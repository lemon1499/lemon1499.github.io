<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>默</title>
  
  <subtitle>星辰大海</subtitle>
  <link href="https://yingliyu.github.io/atom.xml" rel="self"/>
  
  <link href="https://yingliyu.github.io/"/>
  <updated>2022-01-19T03:08:56.659Z</updated>
  <id>https://yingliyu.github.io/</id>
  
  <author>
    <name>Lillian</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Storybook从零到一搭建组件库(上篇)</title>
    <link href="https://yingliyu.github.io/2022/01/19/storybook-js/"/>
    <id>https://yingliyu.github.io/2022/01/19/storybook-js/</id>
    <published>2022-01-19T03:08:56.659Z</published>
    <updated>2022-01-19T03:08:56.659Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Storybook 是一个绝妙的 组件驱动开发环境。它通过隔离组件使开发更快更容易，它可以一次只处理一个组件。在 web 应用程序中构建小的原子组件和复杂的页面，使用 Storybook 可以让你专注于组件开发，无需去关注 API 文档的编写。</p><blockquote><p>Storybook 可以做什么？</p></blockquote><p>工作中开发的 UI 组件或页面可以用 Storybook 帮助你记录并生成 API 文档，增强代码重用性，大大的提高工作效率，并自动可视化地测试组件以防止 bug。<br>同时不受限于框架，它同时支持 Vue、React、Angular。所以工作的同时，不妨用它来沉淀一个自己的组件库，面试的时候也是一个谈资。<br><img src="/2022/01/19/storybook-js/image.png" alt="image"></p><h2 id="依赖技术栈"><a href="#依赖技术栈" class="headerlink" title="依赖技术栈"></a>依赖技术栈</h2><p>首先，先来了解一下搭建一个简单的 UI 组件库需要使用哪些技术栈：</p><ol><li>Node 环境：v14.16.1</li><li>React@17：用于构建用户界面的 JavaScript 库</li><li>TypeScript@^4.5.4：Javascript 类型的超集，有强大的编码提示功能</li><li>Ant-design@^4.17.4：最流行的 React 项目 UI 组件库，要搭建的基础组件库是基于 Ant Design 做的二次封装</li><li>Create React App：React 脚手架快捷搭建项目架构</li><li>Storybook（@storybook/react@^6.4.9）：辅助 UI 控件开发的工具，通过 story 创建独立的控件，让每个控件开发都有一个独立的开发调试环境；</li><li>Prettier&amp;Eslint&amp;husky：统一规范代码风格交给 Prettier、Eslint 校验语法错误，husky 预防将带有语法等错误提交到远程仓库造成污染</li><li>Webpack@^5.0.0：静态模块打包工具</li></ol><h2 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h2><span id="more"></span><p>这里使用 React + Antd + TypeScript 为例</p><h3 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h3><p>使用 <a href="https://create-react-app.dev/docs/adding-typescript/">Creat React App</a> 构建项目，使用官方推荐脚手架搭建~</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用create-react-app初始化一个项目</span></span><br><span class="line">npx create-react-app my-app --typescript</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进入项目根目录</span></span><br><span class="line">cd my-app</span><br><span class="line"></span><br><span class="line"><span class="comment">// 支持ts</span></span><br><span class="line">npm install --save typescript @types/node @types/react @types/react-dom @types/jest</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p>启动项目可以看到如下 React 初始页面，说明项目构建成功。<br><img src="/2022/01/19/storybook-js/2.png" alt="image"></p><h3 id="安装-storybook"><a href="#安装-storybook" class="headerlink" title="安装 storybook"></a>安装 storybook</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装storybook/cli脚手架并安装依赖</span></span><br><span class="line">npx -p @storybook/cli sb init --type react_scripts</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动你的storybook组件库项目</span></span><br><span class="line">npm run storybook</span><br></pre></td></tr></table></figure><p>至此，能看到一个简单的组件库雏形，如下。<br><img src="/2022/01/19/storybook-js/3.png" alt="image"><br>至此，基本的组件库搭建完成，下面继续完善一下其前端生态系统，集成一些开发中必不可缺的工具库，有助于提高开发效率，让我们的开发工作事半功倍。</p><h2 id="项目集成"><a href="#项目集成" class="headerlink" title="项目集成"></a>项目集成</h2><h3 id="typescript"><a href="#typescript" class="headerlink" title="typescript"></a>typescript</h3><p>默认的 Webpack 配置可能无法解析 tsconfig 文件中定义的模块别名，需要 tsconfig-paths-webpack-plugin 来帮助。</p><h4 id="install"><a href="#install" class="headerlink" title="install"></a>install</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install tsconfig-paths-webpack-plugin</span><br></pre></td></tr></table></figure><h4 id="storybook-main-js"><a href="#storybook-main-js" class="headerlink" title=".storybook/main.js"></a>.storybook/main.js</h4><p>首先我们要知道，Storybook 预设了 babel、webpack 插件，所以我们可以在 main.js 中加扩展 webpack 配置。<br>在 main.js 中 webpackFinal 属性用来自定义 webpack 配置，当然也可以在根目录定义一个 webpack.config.js 文件加配置在 main.js 导入使用，这里先在 main.js 中配置.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .storybook/main.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> TsconfigPathsPlugin = <span class="built_in">require</span>(<span class="string">&#x27;tsconfig-paths-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">webpackFinal</span>: <span class="keyword">async</span> (config) =&gt; &#123;</span><br><span class="line">    config.resolve.plugins = [</span><br><span class="line">      ...(config.resolve.plugins || []),</span><br><span class="line">      <span class="keyword">new</span> TsconfigPathsPlugin(&#123;</span><br><span class="line">        <span class="attr">extensions</span>: config.resolve.extensions</span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="tsconfig-json"><a href="#tsconfig-json" class="headerlink" title="tsconfig.json"></a>tsconfig.json</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /tsconfig.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;target&quot;</span>: <span class="string">&quot;es5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;lib&quot;</span>: [<span class="string">&quot;dom&quot;</span>, <span class="string">&quot;dom.iterable&quot;</span>, <span class="string">&quot;esnext&quot;</span>],</span><br><span class="line">    <span class="string">&quot;allowJs&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;skipLibCheck&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;allowSyntheticDefaultImports&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;forceConsistentCasingInFileNames&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;noFallthroughCasesInSwitch&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;module&quot;</span>: <span class="string">&quot;esnext&quot;</span>,</span><br><span class="line">    <span class="string">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">    <span class="string">&quot;resolveJsonModule&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;isolatedModules&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;noEmit&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;jsx&quot;</span>: <span class="string">&quot;react-jsx&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;include&quot;</span>: [<span class="string">&quot;src&quot;</span>],</span><br><span class="line">  <span class="string">&quot;exclude&quot;</span>: [<span class="string">&quot;node_modules&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id><a href="#" class="headerlink" title></a></h3><h3 id="Less"><a href="#Less" class="headerlink" title="Less"></a>Less</h3><p>​</p><p>因为是基于 Antd 做的二次开发，Antd 是基于 Less 所以需要安装 Less</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install less less-loader --save-dev</span><br></pre></td></tr></table></figure><p>添加配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//.storybook/main.js</span></span><br><span class="line"><span class="attr">webpackFinal</span>: <span class="keyword">async</span> (webpackConfig, &#123; configType &#125;) =&gt; &#123;</span><br><span class="line">    webpackConfig.module.rules.push(&#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&#x27;less-loader&#x27;</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">lessOptions</span>: &#123;</span><br><span class="line">              <span class="attr">javascriptEnabled</span>: <span class="literal">true</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">include</span>: [path.resolve(__dirname, <span class="string">&#x27;../&#x27;</span>), <span class="regexp">/[\\/]node_modules[\\/].*antd/</span>],</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> webpackConfig;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><strong>出现问题：storybook 无法解析 less，Antd 样式不生效</strong><br>原因是 file loader 先 resolve 了 less 文件，导致 less-loader 没有解析<br>解决：@storybook/preset-create-react-app 得 file load 排除掉 less 文件，让 less-loader 去解析</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// .storybook/main.js</span></span><br><span class="line"><span class="attr">addons</span>: [</span><br><span class="line">    <span class="string">&#x27;@storybook/addon-links&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@storybook/addon-essentials&#x27;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;@storybook/preset-create-react-app&#x27;</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">craOverrides</span>: &#123;</span><br><span class="line">          <span class="attr">fileLoaderExcludes</span>: [<span class="string">&#x27;less&#x27;</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>了解更多：<a href="https://github.com/storybookjs/storybook/issues/9796">issue#9796</a></p><h3 id="Antd"><a href="#Antd" class="headerlink" title="Antd"></a>Antd</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install antd</span><br></pre></td></tr></table></figure><p>在文件中导入 antd 样式文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .storybook/preview.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;antd/dist/antd.less&#x27;</span> <span class="comment">// 引入 antd 样式</span></span><br></pre></td></tr></table></figure><h3 id="Eslint-amp-Prettier-amp-husky"><a href="#Eslint-amp-Prettier-amp-husky" class="headerlink" title="Eslint&amp;Prettier&amp;husky"></a>Eslint&amp;Prettier&amp;husky</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D eslint eslint-config-prettier eslint-config-react-app eslint-plugin-<span class="keyword">import</span> eslint-plugin-prettier eslint-plugin-react eslint-plugin-react-hooks lint-staged prettier husky</span><br></pre></td></tr></table></figure><p><strong>​</strong></p><p><strong>出现报错：添加了 Eslint，格式校验未通过</strong><br><img src="/2022/01/19/storybook-js/4.png" alt="1640246532(1).png"><br>解决：修改 package.json 文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> package.json</span><br><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">&quot;lint&quot;</span>: <span class="string">&quot;eslint --ext .ts --ext .tsx src/  --fix&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后命令行执行修复指令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run lint</span><br></pre></td></tr></table></figure><p><strong>出现报错：Parsing error: The keyword ‘import’ is reserved</strong><br>个别组件第一行 import 出现警告，试了加 babel 无效，最后把 vscode 关闭再打开好了，目前还没有复现。</p><h2 id="编写组件"><a href="#编写组件" class="headerlink" title="编写组件"></a>编写组件</h2><p>Button.tsx</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Button <span class="keyword">as</span> AntButton &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Button: React.FC&lt;any&gt; = <span class="function">(<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">  primary,</span></span></span><br><span class="line"><span class="params"><span class="function">  type,</span></span></span><br><span class="line"><span class="params"><span class="function">  backgroundColor,</span></span></span><br><span class="line"><span class="params"><span class="function">  size,</span></span></span><br><span class="line"><span class="params"><span class="function">  label,</span></span></span><br><span class="line"><span class="params"><span class="function">  danger,</span></span></span><br><span class="line"><span class="params"><span class="function">  ...props</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> mode = primary ? <span class="string">&#x27;storybook-button--primary&#x27;</span> : <span class="string">&#x27;storybook-button--secondary&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;warpper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">AntButton</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">type</span>=<span class="string">&#123;type&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">size</span>=<span class="string">&#123;size&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">danger</span>=<span class="string">&#123;danger&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">className</span>=<span class="string">&#123;[</span>&#x27;<span class="attr">storybook-button</span>&#x27;, `<span class="attr">storybook-button--</span>$&#123;<span class="attr">size</span>&#125;`, <span class="attr">mode</span>]<span class="attr">.join</span>(&#x27; &#x27;)&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">style</span>=<span class="string">&#123;backgroundColor</span> &amp;&amp; &#123; <span class="attr">backgroundColor</span> &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">        &#123;<span class="attr">...props</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      &gt;</span></span></span><br><span class="line"><span class="xml">        &#123;label&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">AntButton</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Button.propTypes = &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Is this the principal call to action on the page?</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">primary</span>: PropTypes.bool,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * What background color to use</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">backgroundColor</span>: PropTypes.string,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * How large should the button be?</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">size</span>: PropTypes.oneOf([<span class="string">&#x27;small&#x27;</span>, <span class="string">&#x27;medium&#x27;</span>, <span class="string">&#x27;large&#x27;</span>]),</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Button contents</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">label</span>: PropTypes.string.isRequired,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Optional click handler</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onClick</span>: PropTypes.func</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Button.defaultProps = &#123;</span><br><span class="line">  <span class="attr">backgroundColor</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">primary</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">size</span>: <span class="string">&#x27;medium&#x27;</span>,</span><br><span class="line">  <span class="attr">onClick</span>: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Button.stories.tsx</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ComponentStory, ComponentMeta &#125; <span class="keyword">from</span> <span class="string">&#x27;@storybook/react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Button &#125; <span class="keyword">from</span> <span class="string">&#x27;../components/Button&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;Design System/General/Button&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: Button,</span><br><span class="line">  <span class="attr">argTypes</span>: &#123;</span><br><span class="line">    <span class="attr">backgroundColor</span>: &#123; <span class="attr">control</span>: <span class="string">&#x27;color&#x27;</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125; <span class="keyword">as</span> ComponentMeta&lt;<span class="keyword">typeof</span> Button&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Template = <span class="function">(<span class="params">args: any</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Button</span> &#123;<span class="attr">...args</span>&#125; /&gt;</span></span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Primary: ComponentStory&lt;<span class="keyword">typeof</span> Button&gt; = Template.bind(&#123;&#125;);</span><br><span class="line">Primary.args = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;primary&#x27;</span>,</span><br><span class="line">  <span class="comment">// primary: true,</span></span><br><span class="line">  <span class="attr">label</span>: <span class="string">&#x27;Button&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Danger: ComponentStory&lt;<span class="keyword">typeof</span> Button&gt; = Template.bind(&#123;&#125;);</span><br><span class="line">Danger.args = &#123;</span><br><span class="line">  <span class="attr">label</span>: <span class="string">&#x27;Button&#x27;</span>,</span><br><span class="line">  <span class="attr">danger</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Large: ComponentStory&lt;<span class="keyword">typeof</span> Button&gt; = Template.bind(&#123;&#125;);</span><br><span class="line">Large.args = &#123;</span><br><span class="line">  <span class="attr">size</span>: <span class="string">&#x27;large&#x27;</span>,</span><br><span class="line">  <span class="attr">label</span>: <span class="string">&#x27;Button&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Small: ComponentStory&lt;<span class="keyword">typeof</span> Button&gt; = Template.bind(&#123;&#125;);</span><br><span class="line">Small.args = &#123;</span><br><span class="line">  <span class="attr">size</span>: <span class="string">&#x27;small&#x27;</span>,</span><br><span class="line">  <span class="attr">label</span>: <span class="string">&#x27;Button&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>页面效果：<br><img src="/2022/01/19/storybook-js/5.png" alt="image.png"></p><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><blockquote><p>使用 ​<a href="https://github.com/features/actions">Github Actions</a>托管组件库，并实现持续集成 CI 服务</p></blockquote><h5 id="步骤如下"><a href="#步骤如下" class="headerlink" title="步骤如下"></a>步骤如下</h5><h6 id="1-首先明确项目至少有两个分支，以master和gh-pages为例。"><a href="#1-首先明确项目至少有两个分支，以master和gh-pages为例。" class="headerlink" title="1.首先明确项目至少有两个分支，以master和gh-pages为例。"></a>1.首先明确项目至少有两个分支，以<code>master</code>和<code>gh-pages</code>为例。</h6><p><code>master</code>分支是源码，开发在此分支，<code>gh-pages</code>是项目打包后生成的静态资源文件。<br>然后，在此项目仓库<code>Settings-&gt;Pages</code>页面选择 gh-pages 作为静态资源分支，直接在<code>root</code>，即根目录下。<br>如果有自己的域名的话也可以设置 Custom domain。<br>​</p><h6 id="2-然后生成一个github-secrets密钥，然后将密钥至仓库。"><a href="#2-然后生成一个github-secrets密钥，然后将密钥至仓库。" class="headerlink" title="2.然后生成一个github secrets密钥，然后将密钥至仓库。"></a>2.然后生成一个<a href="https://docs.github.com/en/actions/security-guides/encrypted-secrets">github secrets</a>密钥，然后将密钥至仓库。</h6><blockquote><p>step1. 生成一个 github 密钥。</p></blockquote><p>点击 github 的 <code>Github Settings</code>-&gt;<code>Developer settings</code>-&gt;<code>Personal access tokens</code>-&gt;<code>Generate new token</code>-&gt;<code>Generate token</code>-&gt;<code>Copy token</code></p><blockquote><p>step2. 将密钥添加到当前仓库中。</p></blockquote><p>打开当前 github 仓库点击进入<code>Settings-&gt;Secrets</code>-&gt;<code>New repository secret</code>-&gt;<code>Paste token from step1</code></p><h6 id="3-修改-package-json-文件-scripts"><a href="#3-修改-package-json-文件-scripts" class="headerlink" title="3.修改 package.json 文件 scripts"></a>3.修改 package.json 文件 scripts</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;storybook&quot;</span>: <span class="string">&quot;start-storybook -p 6006 -s public&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build-storybook&quot;</span>: <span class="string">&quot;rm -rf ./dist/docs &amp;&amp; build-storybook -o ./dist/docs&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="4-添加-action，编写脚本"><a href="#4-添加-action，编写脚本" class="headerlink" title="4. 添加 action，编写脚本"></a>4. 添加 action，编写脚本</h6><p>在此项目仓库点击 Action-&gt; New workflow-&gt;Node.js<br>deploy.yml</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">name: Deployer # Actions 名字</span><br><span class="line"></span><br><span class="line"><span class="attr">on</span>: # 触发条件</span><br><span class="line">  <span class="attr">push</span>:</span><br><span class="line">    branches:</span><br><span class="line">      - master # 仅向 master 分支 push 时触发</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs</span>:</span><br><span class="line">  build: # job id</span><br><span class="line">    <span class="attr">name</span>: Build and publish # job 名，不写默认使用 job id</span><br><span class="line">    runs-on: ubuntu-latest # 运行环境，可选 ubuntu-latest, ubuntu-<span class="number">18.04</span>, ubuntu-<span class="number">16.04</span>, windows-latest, windows-<span class="number">2019</span>, windows-<span class="number">2016</span>, macOS-latest, macOS-<span class="number">10.14</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps</span>:</span><br><span class="line">      - uses: actions/checkout@v2</span><br><span class="line"></span><br><span class="line">      - name: Use Node.js <span class="number">14.</span>x</span><br><span class="line">        <span class="attr">uses</span>: actions/setup-node@v2</span><br><span class="line">        <span class="attr">with</span>:</span><br><span class="line">          node-version: <span class="number">14.</span>x</span><br><span class="line"></span><br><span class="line">      - name: Setup  env</span><br><span class="line">        <span class="attr">run</span>: |</span><br><span class="line">          npm install</span><br><span class="line">      - name: Generate public files</span><br><span class="line">        <span class="attr">run</span>: |</span><br><span class="line">          npm run build-storybook</span><br><span class="line"></span><br><span class="line">      - name: Deploy</span><br><span class="line">        <span class="attr">env</span>:</span><br><span class="line">          GH_REF: github.com/xxx/my-app.git # 仓库地址</span><br><span class="line">          <span class="attr">ACCESS_TOKEN</span>: $&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125; # github token</span><br><span class="line">        <span class="attr">run</span>: |</span><br><span class="line">          git config --<span class="built_in">global</span> user.name <span class="string">&quot;your name&quot;</span></span><br><span class="line">          git config --<span class="built_in">global</span> user.email <span class="string">&quot;your email&quot;</span></span><br><span class="line">          git clone https:<span class="comment">//$&#123;GH_REF&#125; .deploy_git</span></span><br><span class="line">          cd .deploy_git</span><br><span class="line">          git checkout gh-pages</span><br><span class="line">          cd ../</span><br><span class="line">          mv .deploy_git/.git/ ./dist/docs</span><br><span class="line">          cd ./dist/docs</span><br><span class="line">          git add .</span><br><span class="line">          git commit -m <span class="string">&quot;:construction_worker:CI built at `date +&quot;</span>%Y-%m-%d %H:%M:%S<span class="string">&quot;`&quot;</span></span><br><span class="line">          # GitHub Pages</span><br><span class="line">          git push --force --quiet <span class="string">&quot;https://$&#123;ACCESS_TOKEN&#125;@$&#123;GH_REF&#125;&quot;</span> gh-pages:gh-pages</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建成功会在项目中生成<code> .github/workflows/deploy.yml</code> 。<br>设置了 GitHub action 后，当推送代码时，你的组件库将自动部署到 Github 静态站点托管。至此就实现了，每当我们更新推送代码时可以自动发布组件的最新版本，我们需要手动再部署，GitHub action 会帮我们完成。</p><h3 id="Github-Pages-访问组件库"><a href="#Github-Pages-访问组件库" class="headerlink" title="Github Pages 访问组件库"></a>Github Pages 访问组件库</h3><p>在 master 分支修改源代码，然后 push 到远程仓库时，此时 action 会自动执行并打包部署，通过仓库 Settings-&gt;Pages 里显示的 Your site 访问即可。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><blockquote><p>下一篇记录将组件库发布 npm 包的实践过程</p></blockquote><blockquote><p>预览我的组件库：<a href="https://yingliyu.github.io/fish-design">Fish-Design</a></p></blockquote><blockquote><p>关于我的博客：<a href="https://yingliyu.github.io/">我的博客</a></p></blockquote><h2 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h2><p>本文内容参考: <a href="https://reactjs.org/docs/create-a-new-react-app.html#create-react-app">React</a> 、<a href="https://storybook.js.org/">storybook</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">Storybook从零到一搭建组件库(上篇)</summary>
    
    
    
    
    <category term="框架学习" scheme="https://yingliyu.github.io/tags/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Storybook" scheme="https://yingliyu.github.io/tags/Storybook/"/>
    
  </entry>
  
  <entry>
    <title>dumi搭建组件库</title>
    <link href="https://yingliyu.github.io/2022/01/19/dumi/"/>
    <id>https://yingliyu.github.io/2022/01/19/dumi/</id>
    <published>2022-01-19T03:08:56.647Z</published>
    <updated>2022-01-19T03:08:56.647Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前有用 storybook 尝试搭建一套组件库<a href="https://yingliyu.github.io/2021/12/24/storybook-js/">《Storybook 从零到一搭建组件库(上篇)》</a>，但是一顿操作下来之后，发现 storybook 学习成本相对较高且配置复杂，最重要的是页面有被丑到。然后开始使用 dumi，发现真香，不仅上手简单就像正常开发一个普通的项目一样，而且没有繁杂的配置，最重要的是页面美观简洁大方。一个像 antd 一样的组件库，你值得拥有。</p><blockquote><p>本文将带你学习搭建一个 React+TS 组件库，编写一个完整组件、部署至 github 静态 web 站点及发布 npm 。</p></blockquote><p>使用技术：<br><code>dumi</code>：负责组件开发及组件文档生成（基于 umi，使用过<code>umi</code>的同学比较友好易上手）<br><code>github</code>：配置自动化部署静态 web<br><code>gitee</code>：同步 github gh pages</p><blockquote><p>特性：</p><ul><li>📦 开箱即用，将注意力集中在组件开发和文档编写上</li><li>📋 丰富的 Markdown 扩展，不止于渲染组件 demo</li><li>🏷 基于 TypeScript 类型定义，自动生成组件 API</li><li>🎨 主题轻松自定义，还可创建自己的 Markdown 组件</li><li>📱 支持移动端组件库研发，内置移动端高清渲染方案</li><li>📡 一行命令将组件资产数据化，与下游生产力工具串联</li></ul></blockquote><span id="more"></span><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li><code>node</code>: v10.13.0 及以上版本</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>搭建一个站点模式的组件库</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="string">npx</span> @<span class="string">umijs</span>/<span class="built_in">create-dumi-lib</span> <span class="built_in">--site</span> <span class="comment"># 初始化一个站点模式的组件库开发脚手架</span></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ <span class="string">yarn</span> <span class="string">create</span> @<span class="string">umijs</span>/<span class="string">dumi-lib</span> <span class="built_in">--site</span></span><br></pre></td></tr></table></figure><p>项目目录结构大致如下：</p><p><img src="/2022/01/19/dumi/image1.png" alt="image"></p><p>安装依赖，启动，可以看到类似官网的首页和简洁明了的组件页。<br><strong>首页：</strong></p><blockquote><p><strong>首页对应项目中的 root/docs/index.md</strong></p></blockquote><p><img src="/2022/01/19/dumi/image2.png" alt="image"></p><p><strong>组件页：</strong></p><blockquote><p><strong>组件页对应项目中的 root/src/index.ts</strong></p></blockquote><p><img src="/2022/01/19/dumi/image3.png" alt="image"></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>主要是导航和菜单的配置：<br>.umirc.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;dumi&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMenus</span>(<span class="params">opts: &#123; lang?: <span class="built_in">string</span>; base: <span class="string">&#x27;/components&#x27;</span> | <span class="string">&#x27;/docs&#x27;</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> menus = &#123;</span><br><span class="line">    <span class="string">&#x27;/docs&#x27;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;Introduce&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;title_zh-CN&#x27;</span>: <span class="string">&#x27;介绍&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/docs/guide&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;FAQ&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;title_zh-CN&#x27;</span>: <span class="string">&#x27;问题&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/docs/faq&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;/components&#x27;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;Common&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;title_zh-CN&#x27;</span>: <span class="string">&#x27;通用&#x27;</span>,</span><br><span class="line">        <span class="attr">children</span>: [<span class="string">&#x27;/components/button&#x27;</span>, <span class="string">&#x27;/components/icon&#x27;</span>, <span class="string">&#x27;/components/typography&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;Layout&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;title_zh-CN&#x27;</span>: <span class="string">&#x27;布局&#x27;</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          <span class="string">&#x27;/components/layout/Divider&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;/components/layout/Grid&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;/components/layout/Layout&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;/components/space&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (menus[opts.base] <span class="keyword">as</span> [])?.map(<span class="function">(<span class="params">menu: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!opts.lang) <span class="keyword">return</span> menu;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...menu,</span><br><span class="line">      <span class="attr">title</span>: menu[<span class="string">`title_<span class="subst">$&#123;opts.lang&#125;</span>`</span>] || menu.title,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;fish-ui&#x27;</span>,</span><br><span class="line">  <span class="attr">hash</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">base</span>: <span class="string">&#x27;/fish-ui&#x27;</span>,</span><br><span class="line">  <span class="attr">publicPath</span>: <span class="string">&#x27;/fish-ui/&#x27;</span>,</span><br><span class="line">  <span class="attr">favicon</span>: <span class="string">&#x27;https://img.alicdn.com/tfs/TB1YHEpwUT1gK0jSZFhXXaAtVXa-28-27.svg&#x27;</span>,</span><br><span class="line">  <span class="attr">logo</span>: <span class="string">&#x27;https://img.alicdn.com/tfs/TB1YHEpwUT1gK0jSZFhXXaAtVXa-28-27.svg&#x27;</span>,</span><br><span class="line">  <span class="attr">outputPath</span>: <span class="string">&#x27;docs-dist&#x27;</span>,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;site&#x27;</span>,</span><br><span class="line">  <span class="attr">mfsu</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">dynamicImport</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">navs</span>: [</span><br><span class="line">    <span class="comment">// null,</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;文档&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/docs&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;组件&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/components&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;GitHub&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;https://github.com/yingliyu/fish-ui&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">menus</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;/zh-CN/docs&#x27;</span>: getMenus(&#123; <span class="attr">lang</span>: <span class="string">&#x27;zh-CN&#x27;</span>, <span class="attr">base</span>: <span class="string">&#x27;/docs&#x27;</span> &#125;),</span><br><span class="line">    <span class="string">&#x27;/docs&#x27;</span>: getMenus(&#123; <span class="attr">base</span>: <span class="string">&#x27;/docs&#x27;</span> &#125;),</span><br><span class="line">    <span class="string">&#x27;/zh-CN/components&#x27;</span>: getMenus(&#123; <span class="attr">lang</span>: <span class="string">&#x27;zh-CN&#x27;</span>, <span class="attr">base</span>: <span class="string">&#x27;/components&#x27;</span> &#125;),</span><br><span class="line">    <span class="string">&#x27;/components&#x27;</span>: getMenus(&#123; <span class="attr">base</span>: <span class="string">&#x27;/components&#x27;</span> &#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// more config: https://d.umijs.org/config</span></span><br><span class="line">  <span class="attr">lessLoader</span>: &#123; <span class="attr">javascriptEnabled</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  <span class="comment">//  按需加载 antd</span></span><br><span class="line">  <span class="attr">extraBabelPlugins</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&#x27;babel-plugin-import&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">libraryName</span>: <span class="string">&#x27;antd&#x27;</span>,</span><br><span class="line">        <span class="attr">libraryDirectory</span>: <span class="string">&#x27;es&#x27;</span>,</span><br><span class="line">        <span class="attr">style</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>此配置中的 menus 和 navs 对应到页面布局如下：</p><p><img src="/2022/01/19/dumi/image4.png" alt="image"></p><h2 id="完成一个组件"><a href="#完成一个组件" class="headerlink" title="完成一个组件"></a>完成一个组件</h2><p>基于 Ant Design 以 Button 组件为例：<br>/components/button/index.tsx（写组件）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Button <span class="keyword">as</span> AntdButton &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> classNames <span class="keyword">from</span> <span class="string">&#x27;classnames&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.less&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">type</span> ButtonHTMLType = <span class="string">&#x27;submit&#x27;</span> | <span class="string">&#x27;button&#x27;</span> | <span class="string">&#x27;reset&#x27;</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> ButtonTypes: [<span class="string">&#x27;default&#x27;</span>, <span class="string">&#x27;primary&#x27;</span>, <span class="string">&#x27;ghost&#x27;</span>, <span class="string">&#x27;dashed&#x27;</span>, <span class="string">&#x27;link&#x27;</span>, <span class="string">&#x27;text&#x27;</span>];</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">declare</span> <span class="keyword">type</span> ButtonType = <span class="keyword">typeof</span> ButtonTypes[<span class="built_in">number</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> IABSButtonProps &#123;</span><br><span class="line">  loading?: <span class="built_in">boolean</span>;</span><br><span class="line">  danger?: <span class="built_in">boolean</span>;</span><br><span class="line">  className?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">type</span>?: ButtonType;</span><br><span class="line">  style?: React.CSSProperties;</span><br><span class="line">  icon?: React.ReactNode;</span><br><span class="line">  children?: React.ReactNode;</span><br><span class="line">  disabled?: <span class="built_in">boolean</span>;</span><br><span class="line">  block?: <span class="built_in">boolean</span>;</span><br><span class="line">  large?: <span class="built_in">boolean</span>;</span><br><span class="line">  htmlType?: ButtonHTMLType;</span><br><span class="line">  color?: <span class="string">&#x27;blue&#x27;</span> | <span class="string">&#x27;red&#x27;</span> | <span class="string">&#x27;yellow&#x27;</span> | <span class="string">&#x27;green&#x27;</span> | <span class="string">&#x27;white&#x27;</span>;</span><br><span class="line">  onClick?: React.MouseEventHandler&lt;HTMLButtonElement&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Button: React.FC&lt;IABSButtonProps&gt; = <span class="function">(<span class="params">props: IABSButtonProps</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    danger,</span><br><span class="line">    loading,</span><br><span class="line">    style,</span><br><span class="line">    children,</span><br><span class="line">    large = <span class="literal">false</span>,</span><br><span class="line">    className,</span><br><span class="line">    onClick,</span><br><span class="line">    <span class="keyword">type</span> = <span class="string">&#x27;primary&#x27;</span>,</span><br><span class="line">    icon,</span><br><span class="line">    block = <span class="literal">false</span>,</span><br><span class="line">    disabled,</span><br><span class="line">    htmlType,</span><br><span class="line">    color,</span><br><span class="line">  &#125; = props;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> classes = classNames(<span class="string">&#x27;fish-btn&#x27;</span>, className, &#123;</span><br><span class="line">    <span class="string">&#x27;fish-btn-large&#x27;</span>: large,</span><br><span class="line">    <span class="string">&#x27;fish-btn-block&#x27;</span>: block,</span><br><span class="line">    <span class="string">&#x27;fish-btn-link&#x27;</span>: <span class="keyword">type</span> === <span class="string">&#x27;link&#x27;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> displayStyle = block ? <span class="string">&#x27;block&#x27;</span> : <span class="string">&#x27;inline-block&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> newTpye = <span class="keyword">type</span>;</span><br><span class="line">  <span class="keyword">let</span> isDanger = danger;</span><br><span class="line">  <span class="keyword">if</span> (color) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (color) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;blue&#x27;</span>:</span><br><span class="line">        newTpye = <span class="string">&#x27;primary&#x27;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;red&#x27;</span>:</span><br><span class="line">        isDanger = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;white&#x27;</span>:</span><br><span class="line">        newTpye = <span class="string">&#x27;default&#x27;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;yellow&#x27;</span>:</span><br><span class="line">        classes = classNames(classes, <span class="string">&#x27;fish-yellow-btn&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;green&#x27;</span>:</span><br><span class="line">        classes = classNames(classes, <span class="string">&#x27;fish-green-btn&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;classes&#125;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">display:</span> <span class="attr">displayStyle</span>, <span class="attr">...style</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">AntdButton</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">icon</span>=<span class="string">&#123;icon&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">disabled</span>=<span class="string">&#123;disabled&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">type</span>=<span class="string">&#123;newTpye&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">block</span>=<span class="string">&#123;block&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">htmlType</span>=<span class="string">&#123;htmlType&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">danger</span>=<span class="string">&#123;isDanger&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">loading</span>=<span class="string">&#123;loading&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      &gt;</span></span></span><br><span class="line"><span class="xml">        &#123;children&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">AntdButton</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Button;</span><br></pre></td></tr></table></figure><p>/components/button/index.less（组件样式）</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.color</span>(<span class="variable">@bg</span>, <span class="variable">@bgHover</span>, <span class="variable">@bgActive</span>) <span class="keyword">when</span> (default()) &#123;</span><br><span class="line">  <span class="selector-class">.ant-btn</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@text-color-inverse</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="variable">@bg</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="variable">@bg</span>;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="variable">@text-color-inverse</span>;</span><br><span class="line">      <span class="attribute">background</span>: <span class="variable">@bgHover</span>;</span><br><span class="line">      <span class="attribute">border-color</span>: <span class="variable">@bgHover</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="variable">@text-color-inverse</span>;</span><br><span class="line">      <span class="attribute">background</span>: <span class="variable">@bgActive</span>;</span><br><span class="line">      <span class="attribute">border-color</span>: <span class="variable">@bgActive</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fish-btn</span> &#123;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-class">.fish-btn-block</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-class">.fish-btn-link</span> &#123;</span><br><span class="line">    <span class="selector-class">.ant-btn-link</span> &#123;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-class">.fish-yellow-btn</span> &#123;</span><br><span class="line">    <span class="selector-class">.color</span>(<span class="variable">@warning-color</span>, <span class="variable">@gold-5</span>, <span class="variable">@gold-7</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-class">.fish-green-btn</span> &#123;</span><br><span class="line">    <span class="selector-class">.color</span>(<span class="variable">@success-color</span>, <span class="variable">@green-5</span>, <span class="variable">@green-7</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>/components/button/index.md（组件文档）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Button</span></span><br><span class="line"></span><br><span class="line"><span class="attr">group:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/components</span></span><br><span class="line">  <span class="attr">order:</span> <span class="number">1</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="comment">## Button 按钮</span></span><br><span class="line"></span><br><span class="line"><span class="string">响应用户点击行为，触发相应的业务逻辑。</span></span><br><span class="line"></span><br><span class="line"><span class="string">代码演示</span></span><br><span class="line"></span><br><span class="line"><span class="string">```tsx</span></span><br><span class="line"><span class="string">import</span> <span class="string">React</span> <span class="string">from</span> <span class="string">&#x27;react&#x27;</span><span class="string">;</span></span><br><span class="line"><span class="string">import</span> &#123; <span class="string">Button</span>, <span class="string">Space</span> &#125; <span class="string">from</span> <span class="string">&#x27;fish-ui&#x27;</span><span class="string">;</span></span><br><span class="line"></span><br><span class="line"><span class="string">export</span> <span class="string">default</span> <span class="string">()</span> <span class="string">=&gt;</span> <span class="string">(</span></span><br><span class="line">  <span class="string">&lt;Space&gt;</span></span><br><span class="line">    <span class="string">&lt;Button&gt;Button&lt;/Button&gt;</span></span><br><span class="line">    <span class="string">&lt;Button</span> <span class="string">danger&gt;Button&lt;/Button&gt;</span></span><br><span class="line">    <span class="string">&lt;Button</span> <span class="string">large&gt;Button&lt;/Button&gt;</span></span><br><span class="line">  <span class="string">&lt;/Space&gt;</span></span><br><span class="line"><span class="string">);</span></span><br></pre></td></tr></table></figure><h3 id="按钮颜色"><a href="#按钮颜色" class="headerlink" title="按钮颜色"></a>按钮颜色</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import React from &#x27;react&#x27;</span><br><span class="line">import &#123; Button, Space &#125; from &#x27;fish-ui&#x27;</span><br><span class="line"></span><br><span class="line">export default () =&gt; (</span><br><span class="line">  &lt;Space&gt;</span><br><span class="line">    &lt;Button color=&quot;white&quot;&gt;Button&lt;/Button&gt;</span><br><span class="line">    &lt;Button color=&quot;blue&quot;&gt;Button&lt;/Button&gt;</span><br><span class="line">    &lt;Button color=&quot;red&quot;&gt;Button&lt;/Button&gt;</span><br><span class="line">    &lt;Button color=&quot;yellow&quot;&gt;Button&lt;/Button&gt;</span><br><span class="line">    &lt;Button color=&quot;green&quot;&gt;Button&lt;/Button&gt;</span><br><span class="line">    &lt;Button&gt;Button&lt;/Button&gt;</span><br><span class="line">  &lt;/Space&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>页面展示：</p><p><img src="/2022/01/19/dumi/image5.png" alt="image"></p><p>到这里，基于 antd 的 Button 组件及文档的编写已经有了雏形，但是文档很重要的一部分 API 还没有加上，使用 md 语法编写 API 显得繁琐也违背了专注组件开发的初衷。我们使用的 TS，如果 API 能根据类型声明及代码注释自动生成那岂不美哉，是的它可以，即通过 JS Doc 注解 + TypeScript 类型定义的方式实现组件 API 的自动生成。</p><h2 id="自动生成-API"><a href="#自动生成-API" class="headerlink" title="自动生成 API"></a>自动生成 API</h2><blockquote><p>前提：确保 dumi 能够通过 TypeScript 类型定义 + 注解推导出 API 的内容<br>dumi 背后的类型解析工具是 react-docgen-typescript，更多类型和注解的用法可参考 <a href="https://github.com/styleguidist/react-docgen-typescript#example">它的文档</a></p></blockquote><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> react-docgen-typescript</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>项目根目录创建配置文件 styleguide.config.js</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">module</span>.<span class="built_in">exports</span> = &#123;</span><br><span class="line">propsParser: <span class="built_in">require</span>(<span class="string">&#x27;react-docgen-typescript&#x27;</span>).withDefaultConfig([parserOptions]).parse,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改组件代码"><a href="#修改组件代码" class="headerlink" title="修改组件代码"></a>修改组件代码</h3><p>components/button/index.tsx 加注释如下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">interface IABSButtonProps &#123;</span><br><span class="line"><span class="comment">/**设置按钮载入状态 */</span></span><br><span class="line">loading?: boolean;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*设置危险按钮</span></span><br><span class="line"><span class="comment">*@default false</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  danger?: boolean;</span><br><span class="line">  className?: string;</span><br><span class="line">  <span class="comment">/**按钮类型 */</span></span><br><span class="line">  type?: ButtonType;</span><br><span class="line">  style?: React.CSSProperties;</span><br><span class="line">  <span class="comment">/**设置按钮的图标组件 */</span></span><br><span class="line">  <span class="attribute">icon</span>?: React.ReactNode;</span><br><span class="line">  children?: React.ReactNode;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">* 按钮失效状态</span></span><br><span class="line"><span class="comment">* @default false</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  disabled?: boolean;</span><br><span class="line">  block?: boolean;</span><br><span class="line">  large?: boolean;</span><br><span class="line">  htmlType?: ButtonHTMLType;</span><br><span class="line">  <span class="comment">/**按钮颜色 */</span></span><br><span class="line">  <span class="attribute">color</span>?: <span class="string">&#x27;blue&#x27;</span> | <span class="string">&#x27;red&#x27;</span> | <span class="string">&#x27;yellow&#x27;</span> | <span class="string">&#x27;green&#x27;</span> | <span class="string">&#x27;white&#x27;</span>;</span><br><span class="line">  onClick?: React.MouseEventHandler&lt;HTMLButtonElement&gt;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>components/button/index.md 在你想要显示 API 的页面位置引用 API 标签</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section">&lt;API&gt;</span><span class="section">&lt;/API&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p>基于以上代码，自动生成如下 API 表格：</p><p><img src="/2022/01/19/dumi/image6.png" alt="image"></p><h1 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h1><blockquote><p>将组件库自动化部署至 Github gh-pages，由于 github 访问比较慢，所以在 Gitee gh-pages 也部署一份。</p></blockquote><p>例如，访问我的组件库：<a href="https://yingliyu.github.io/fish-ui">https://yingliyu.github.io/fish-ui</a> 、 <a href="http://ylyubook.gitee.io/fish-ui">http://ylyubook.gitee.io/fish-ui</a><br>如果不是部署在根目录需要修改.umirc.ts 配置，以 fish-ui 为例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// .umirc.ts</span></span><br><span class="line"><span class="function">export <span class="literal">default</span> <span class="title">defineConfig</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">base</span>: <span class="string">&#x27;/fish-ui&#x27;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">publicPath: <span class="string">&#x27;/fish-ui/&#x27;</span></span></span></span><br><span class="line"><span class="params"><span class="function">...</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>)</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><p>在项目根目录下创建<code>.github/workflows/gh-pages.yml</code></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">name:</span> Deploy Github Pages <span class="meta"># Actions 名字</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">on:</span> <span class="meta"># 触发条件</span></span><br><span class="line"><span class="symbol">push:</span></span><br><span class="line"><span class="symbol">branches:</span> - master <span class="meta"># 仅向 master 分支 push 时触发</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">jobs:</span></span><br><span class="line"><span class="symbol">build:</span> <span class="meta"># job id</span></span><br><span class="line"><span class="symbol">name:</span> Build and publish <span class="meta"># job 名，不写默认使用 job id</span></span><br><span class="line">runs-on: ubuntu-latest <span class="meta"># 运行环境，可选 ubuntu-latest, ubuntu-18.04, ubuntu-16.04, windows-latest, windows-2019, windows-2016, macOS-latest, macOS-10.14</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">    steps:</span></span><br><span class="line">      - uses: actions/checkout@v2</span><br><span class="line"></span><br><span class="line">      - name: Use Node.js <span class="number">14.</span>x</span><br><span class="line"><span class="symbol">        uses:</span> actions/setup-node@v2</span><br><span class="line"><span class="symbol">        with:</span></span><br><span class="line">          node-version: <span class="number">14.</span>x</span><br><span class="line"></span><br><span class="line">      - name: Setup  env</span><br><span class="line"><span class="symbol">        run:</span> |</span><br><span class="line">          npm install</span><br><span class="line">      - name: Generate public files</span><br><span class="line"><span class="symbol">        run:</span> |</span><br><span class="line">          npm run docs:build</span><br><span class="line">      <span class="meta"># 发布到 github pages 上</span></span><br><span class="line">      - name: Auto Deploy</span><br><span class="line"><span class="symbol">        env:</span></span><br><span class="line"><span class="symbol">          GH_REF:</span> github.com<span class="meta-keyword">/xxx/</span>仓库名.git <span class="meta"># github仓库地址http</span></span><br><span class="line"><span class="symbol">          ACCESS_TOKEN:</span> $&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125; <span class="meta"># github token</span></span><br><span class="line"><span class="symbol">          GITEE_REF:</span> gitee.com/[gitee usename]/仓库名.git  <span class="meta"># gitee仓库地址,[gitee usename]替换为自己的gitee用户名</span></span><br><span class="line"><span class="symbol">          GITEE_TOKEN:</span> $&#123;&#123; secrets.GITEE_TOKEN&#125;&#125; <span class="meta"># gitee 私人令牌</span></span><br><span class="line"><span class="symbol">        run:</span> |</span><br><span class="line">          git config --global user.name <span class="string">&quot;your name&quot;</span></span><br><span class="line">          git config --global user.email <span class="string">&quot;your email&quot;</span></span><br><span class="line">          git clone https:<span class="comment">//$&#123;GH_REF&#125; .deploy_git</span></span><br><span class="line">          cd .deploy_git</span><br><span class="line">          git checkout gh-pages</span><br><span class="line">          cd ../</span><br><span class="line">          mv .deploy_git/.git/ ./docs-dist <span class="meta"># 打包之后的文件存放目录docs-dist</span></span><br><span class="line">          cd ./docs-dist</span><br><span class="line">          git add .</span><br><span class="line">          git commit -m <span class="string">&quot;:construction_worker:CI built at `date +&quot;</span>%Y-%m-%d %H:%M:%S<span class="string">&quot;`&quot;</span></span><br><span class="line">          <span class="meta"># GitHub Pages</span></span><br><span class="line">          git push --force --quiet <span class="string">&quot;https://$&#123;ACCESS_TOKEN&#125;@$&#123;GH_REF&#125;&quot;</span> gh-pages:gh-pages</span><br><span class="line">          <span class="meta"># Gitee Pages</span></span><br><span class="line">          git push --force --quiet <span class="string">&quot;https://[gitee usename]:$&#123;GITEE_TOKEN&#125;@$&#123;GITEE_REF&#125;&quot;</span> gh-pages:gh-pages</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上 GITEE_TOKEN 是在 gitee 中创建的私人令牌，添加到对应的 github 仓库，ACCESS_TOKEN 是 github screts。</p><h1 id="发布-npm-包"><a href="#发布-npm-包" class="headerlink" title="发布 npm 包"></a>发布 npm 包</h1><blockquote><p><strong>注意：</strong>npm 发布的包是完全公共的，也就是所有使用 npm 的人都可以在 npm 仓库里下载你发布的包，但是实际项目中，部门间公用的包可能涉及到商业机密，那么就不能在 npm 上发布了，公司需要搭建自己的私有包管理仓库，这时可使用 cnpm。</p></blockquote><p>本文只记录 npm 包发布步骤，cnpm 私有仓库的搭建，<a href="https://link.zhihu.com/?target=https://www.cnblogs.com/yalong/p/12837461.html">请点击这里</a>。<br>发布之前需要在 package.json 加配置，添加一些必要的描述信息。<br>package.json</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;private&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"> <span class="string">&quot;name&quot;</span>: <span class="string">&quot;fish-ui-pro&quot;</span>,</span><br><span class="line"> <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line"> <span class="string">&quot;description&quot;</span>: <span class="string">&quot;A library of react components&quot;</span>,</span><br><span class="line"> <span class="string">&quot;author&quot;</span>: <span class="string">&quot;yingliyu&quot;</span>,</span><br><span class="line"> <span class="string">&quot;license&quot;</span>: <span class="string">&quot;MIT&quot;</span>,</span><br><span class="line"> <span class="string">&quot;keywords&quot;</span>: [</span><br><span class="line">   <span class="string">&quot;React&quot;</span>,</span><br><span class="line">   <span class="string">&quot;Component&quot;</span></span><br><span class="line"> ],</span><br><span class="line"> <span class="string">&quot;homepage&quot;</span>: <span class="string">&quot;https://yingliyu.github.io/fish-ui&quot;</span>,</span><br><span class="line"> <span class="string">&quot;repository&quot;</span>: &#123;</span><br><span class="line">   <span class="string">&quot;type&quot;</span>: <span class="string">&quot;git&quot;</span>,</span><br><span class="line">   <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://github.com/yingliyu/fish-ui.git&quot;</span></span><br><span class="line"> &#125;,</span><br><span class="line">  <span class="string">&quot;files&quot;</span>: [</span><br><span class="line">   <span class="string">&quot;docs-dist&quot;</span>,</span><br><span class="line">   <span class="string">&quot;es&quot;</span></span><br><span class="line"> ],</span><br></pre></td></tr></table></figure><ul><li>将 <code>private</code> 字段置为 false , 表示非私有包；</li><li>添加 <code>description</code> 、 <code>author </code>、 <code>license</code> 、 <code>keywords</code> 等相关字段;</li><li>添加 <code>homepage</code> 字段，即项目主页 URL；</li><li>添加 <code>repository</code> 字段，即项目仓库地址 URL；</li><li>添加 files 字段，表示要将哪些文件上传到 npm 上去。如果什么都不写，则默认会使用<code>.gitignore </code>里面的信息。但要注意，不管<code> .gitignore</code> 怎么配置，一些文件会始终发布到 <code>package</code> 上，这些文件包括 <code>package.json </code>、 <code>README.md </code>、 <code>LICENSE </code>等等；</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>package.json</span><br><span class="line"><span class="string">&quot;peerDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;react&quot;</span>: <span class="string">&quot;&gt;=16.9.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;react-dom&quot;</span>: <span class="string">&quot;&gt;=16.9.0&quot;</span>,</span><br><span class="line">     <span class="string">&quot;antd&quot;</span>: <span class="string">&quot;&gt;=4.18.0&quot;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><blockquote><p>执行<code>npm login</code>，依次输入注册 npm 时的 username, password, email 后，执行<code>npm whoami</code>能终端输出用户名，说明登录成功，最后执行<code>npm publish</code>发包。注意：publish 之前先 build 一下，确保 dist 包是最新的。</p></blockquote><p>报错：<br>403：npm 包名已被使用<br>​</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>参考：</p><ul><li><a href="https://d.umijs.org/zh-CN/guide">dumi 官网</a></li><li><a href="https://juejin.cn/post/6844904200359378958#heading-26">https://juejin.cn/post/6844904200359378958#heading-26</a></li></ul><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">dumi搭建组件库</summary>
    
    
    
    
    <category term="umi" scheme="https://yingliyu.github.io/tags/umi/"/>
    
    <category term="dumi" scheme="https://yingliyu.github.io/tags/dumi/"/>
    
  </entry>
  
  <entry>
    <title>2021，沪漂五年重返校园的一年</title>
    <link href="https://yingliyu.github.io/2022/01/19/2021-summary/"/>
    <id>https://yingliyu.github.io/2022/01/19/2021-summary/</id>
    <published>2022-01-19T03:08:56.635Z</published>
    <updated>2022-01-19T03:08:56.635Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/01/19/2021-summary/banner.jpg" alt="img"><br>2021 年，依然是为生活忙碌的一年，考研、考证、换工作……</p><p>回想起去年此时正在紧张的备战考研，或许是年龄大了心态不如从前了，考试前夕特别焦虑一度失眠。不过过程都不重要了，因为结果还不错，现在已经入学半学期啦～</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><h3 id="我换工作了-💻"><a href="#我换工作了-💻" class="headerlink" title="我换工作了 💻"></a>我换工作了 💻</h3><p>就在今年 10 月底我离开了工作两年多的公司，不是裸辞，这个年纪已经没有了裸辞的勇气，原因一言难尽，其实年中就打算走的，但面试了一周左右没有理想的 offer 加之领导的挽留，我放弃了面试，不过 10 月底做完项目后拿到了满意的 offer 还是走了。</p><p>回想在那里的两年，平台虽然不大，但是很开心认识了一群可爱的小伙伴和我的的老大(庄哥)，他的技术很牛，跟他学到了很多东西，他的技术和为人处事都值得我学习，他是 Coach 型的老大，是我的理想 leader。不过他在我之前离职了，说实话知道他要走的时候我很难过，不知道你们有没有那种很慌又孤军奋战的感觉，感觉工作都提不起兴趣，不过慢慢还是要习惯要自己强大起来。</p><span id="more"></span><p>国企是有国企的好，稳定工作强度一般，所以我才有时间准备考研和考证，总之，感恩感谢，江湖再见。<br><img src="/2022/01/19/2021-summary/2.png" alt="img"></p><p>不过说到找工作，年中面试我还挺受打击 👊 的，面试 B 站的时候，面试官面带微笑的告诉我说“既然想找工作建议你还是好好准备一下”，虽然他很大牛也很友好，但我还是很受伤 😭。加之我已婚未育的状态，懂得都懂，年中的面试也不疾而终~</p><p>不过，今年 10 月份找工作的时候还蛮顺利的，所以说找工作技术是一方面，缘分也是一方面吧，我可能比较佛系，现在的公司小而美，都挺好~</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><h3 id="搬家"><a href="#搬家" class="headerlink" title="搬家"></a>搬家</h3><p>今年 5 月份的时候住了一年多的房子 🏠，房东突然告诉我们不租了，我们要被搬家啦～窗台养的小可爱跟我走吧 🧑‍🤝‍🧑<br><img src="/2022/01/19/2021-summary/3.jpg" alt="img"></p><h3 id="又搬家"><a href="#又搬家" class="headerlink" title="又搬家"></a>又搬家</h3><p>然后换了一个两居室和二房东一起住，但是有一种束手束脚的感觉，被房东管的太紧了居住体验不太好，我们果断换（人生建议: 和二房东一起合住一定要擦亮眼睛），所以又又搬家了～</p><h3 id="再搬家"><a href="#再搬家" class="headerlink" title="再搬家"></a>再搬家</h3><p>然后又搬到了宝山，这个房东大哥人很好，居住体验还不错，搬家真的好（lei）开（si）心（人）🤣</p><p>换到新公司之后开始每天带饭 👩‍⚕️</p><h3 id="小日子"><a href="#小日子" class="headerlink" title="小日子"></a>小日子</h3><p>以前的周末都是计划找地方去玩，逛逛周边的公园和朋友一起爬爬山，或者追剧画画。<br><img src="/2022/01/19/2021-summary/4.png" alt="img"><br>有一段时间突然迷上了在瓶子上画画，用来做花瓶，这是画的最喜欢的一次，但是因为是水彩所以它经不起风吹日晒，尤其怕水，现在已经物尽其用了 😂。<br><img src="/2022/01/19/2021-summary/5.png" alt="img"></p><p>有时候会练练毛笔字，喜欢临摹颜真卿的碑帖，感觉聚焦在自己感兴趣的地方能全身贯注，能让我心静。<br>空闲的周末过的也算是不亦乐乎。<br><img src="/2022/01/19/2021-summary/6.png" alt="img"><br>今年九月份入学之后，对我来说工作日就是周末，上课还挺累的，与之相比工作日反而轻松多了，以前有周末的时候是多么多么幸福啊，人总是这样失去的时候才想起来去珍惜，好在我的周末还会回来的哈哈哈 😊</p><p>另外，历经快一年的时间，终于打完了 HPV 疫苗，愿望达成~</p><h2 id="个人提升"><a href="#个人提升" class="headerlink" title="个人提升"></a>个人提升</h2><h3 id="考研-🎓"><a href="#考研-🎓" class="headerlink" title="考研 🎓"></a>考研 🎓</h3><p>年初查考研成绩，过了笔试，开始准备面试，然后 7 月份拿到了录取通知书 🎉<br><img src="/2022/01/19/2021-summary/7.png" alt="img"><br>其实我被问的最多的问题就是，为什么选择考研呢？</p><p>我细想一下，主要有三个方面的原因：</p><ol><li>首先是环境影响，我身边的人都太优秀了，古话说，近朱者赤近墨者黑，就是这样了。</li><li>其次是身边朋友和亲人的鼓励，就是前面说的庄哥，那时候公司也不忙，然后他一直鼓励我考研，虽然我当时有拒绝，但是那粒种子已经深深埋在我心里，后来它就萌芽了。</li><li>然后是自己也想提升自己的学历（或者说为以后怎么转行做准备，毕竟不能写一辈子代码吧，所以在这方面努力一下），希望以后能获得更多的求职机会。</li></ol><p>然后在去年 8 月份开始，自学备考，周末增哥陪我一起泡图书馆，甚至我们的婚假我俩都是在图书馆里过的，还被庄哥调侃为最励志的婚假，现在我回想起来感觉当时有一股神奇的力量在推着我，我之前从来没有这方面的计划，甚至感觉这个人有点不像我 😂，我本不是什么争强好胜之人，反而有点随遇而安，可能我对自己还不够了解吧。</p><p>九月份我入学啦，认识了一群可爱的同学，不得不过感叹一下我的同学们都好（you）卷（xiu）啊 🐶，学业还挺有压力的，这不元旦假期还没到我已经在期待寒假啦 🎉</p><p>加油吧～争取顺利毕业 🎓</p><h3 id="考证-📒"><a href="#考证-📒" class="headerlink" title="考证 📒"></a>考证 📒</h3><p>3 月底考研面试结束之后，4 月份开始准备软考，可以说也是在同事的怂恿下临近报名结束的最后几天我报名了，然后开始备考，5 月份收到了小绿本本，感谢我同事的帮助 🙏<br><img src="/2022/01/19/2021-summary/8.png" alt="img"></p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>2021 年是感恩的一年，需要感谢的人太多，感谢辅导员杨老师，感谢庄哥的帮助和鼓励，感谢学长凯哥的解疑答惑，感谢增哥总是支持我的决定，在我备考时陪我一起泡图书馆、考试、入学的一路始终陪在我左右……感谢在我需要帮助的时候有你们在！！！</p><p>2021 已余额不足，抓住 2021 的尾巴，加油~<br>愿 2022 尽如所期~</p><blockquote><p>这一年，遇见，获得，失去，成长，释怀，完结。愿与旧事归于尽，来年依旧迎花开。</p></blockquote><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">2021年终总结</summary>
    
    
    
    
    <category term="年终总结" scheme="https://yingliyu.github.io/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Formily入门实践</title>
    <link href="https://yingliyu.github.io/2021/12/01/Formily-demo/"/>
    <id>https://yingliyu.github.io/2021/12/01/Formily-demo/</id>
    <published>2021-12-01T15:14:30.000Z</published>
    <updated>2022-01-19T03:08:56.643Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Formily 是阿里开源的动态化表单的解决方案，优雅的解决了多种复杂场景的表单的数据、状态管理及夸表单通信问题，同时规避了全量渲染的弊端，性能优越。刚好满足我近期工作中的业务需求，啃了将近一周的文档，对 Family 有了初步的了解，后续使用起来再出翻坑指南。</p><h2 id="初步了解"><a href="#初步了解" class="headerlink" title="初步了解"></a>初步了解</h2><p>​Formily 基于 MVVM 的设计原则，常用的基础核心库有<code>@formily/core</code>、<code>@formily/react</code>、<code>@formily/vue</code>、<code>@formily/antd</code>，支持 react 和 vue，同时支持 Markup Schema、 JSX 以及现在业界最流行的 JSON Schema 的写法。</p><p>Formily 分为了<strong>内核层</strong>，<strong>UI 桥接层</strong>，<strong>扩展组件层</strong>，和<strong>配置应用层</strong>，如下图。<br><strong>内核层</strong>是 UI 无关的，它保证了用户管理的逻辑和状态是不耦合任何一个框架。<br>JSON Schema 独立存在，给 UI 桥接层消费，保证了协议驱动在不同 UI 框架下的绝对一致性，不需要重复实现协议解析逻辑。<br><strong>扩展组件层</strong>，提供一系列表单场景化组件，保证用户开箱即用。无需花大量时间做二次开发。<br><img src="/2021/12/01/Formily-demo/image.png" alt="Formily的分层架构图"></p><blockquote><p>核心优势</p><ul><li>高性能</li><li>开箱即用</li><li>联动逻辑实现高效</li><li>跨端能力，逻辑可跨框架，跨终端复用</li><li>动态渲染能力</li></ul></blockquote><p>核心劣势：学习成本较高，需引多个包，包体积较大。<br>​</p><p>确实 Formily 的学习成本还是相对较高的，几大核心库一堆的文档和 API 会让你眼花缭乱，但是既然要学就要耐下心来，思路理清之后就轻车熟路了。<br>​</p><p>核心库介绍：<br><code>@formily/core</code>：<strong>ViewModel 层</strong>，负责管理表单的状态，表单校验，联动等等。<br><code>@formily/react</code>：** Model 层<strong>，作为 UI 库来接入内核数据，用来实现最终的表单交互效果，对于不同框架的用户，使用有不同的桥接库，这里使用<code>react</code>为例，使用 vue 安装<code>@formily/vue</code>。<br><code>@formily/antd</code>：</strong>View 层**，在<code>Ant Design</code>基础之上封装的开箱即用的组件库。</p><h2 id="使用准备"><a href="#使用准备" class="headerlink" title="使用准备"></a>使用准备</h2><p>安装依赖，这里以<code>React+Antd </code>为例</p><p>使用 yarn<br><code>yarn add @formily/core</code><br><code>yarn add @formily/react</code><br><code>yarn add antd moment @formily/antd</code><br>​</p><p>or 使用 npm<br><code>npm install --save @formily/core</code><br><code>npm install --save @formily/react</code><br><code>npm install --save antd moment @formily/antd</code><br>​</p><p>导入依赖：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createForm &#125; <span class="keyword">from</span> <span class="string">&#x27;@formily/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; FormProvider, Field &#125; <span class="keyword">from</span> <span class="string">&#x27;@formily/react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; FormItem, Input &#125; <span class="keyword">from</span> <span class="string">&#x27;@formily/antd&#x27;</span></span><br></pre></td></tr></table></figure><p>​</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>以<code>JSON Schema</code>写法为例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createForm &#125; <span class="keyword">from</span> <span class="string">&#x27;@formily/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createSchemaField, FormConsumer, FormProvider &#125; <span class="keyword">from</span> <span class="string">&#x27;@formily/react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; FormItem, Input, Password, Submit, FormLayout, FormButtonGroup &#125; <span class="keyword">from</span> <span class="string">&#x27;@formily/antd&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ICONS <span class="keyword">from</span> <span class="string">&#x27;@ant-design/icons&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用来创建表单核心领域模型，它是作为MVVM设计模式的标准 ViewModel</span></span><br><span class="line"><span class="keyword">const</span> form = createForm()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个 SchemaField 组件用于解析JSON-Schema动态渲染表单的组件</span></span><br><span class="line"><span class="keyword">const</span> SchemaField = createSchemaField(&#123;</span><br><span class="line">  <span class="comment">// 组件列表</span></span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    FormLayout,</span><br><span class="line">    FormItem,</span><br><span class="line">    Input,</span><br><span class="line">    Password</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 全局作用域，用于实现协议表达式变量注入</span></span><br><span class="line">  <span class="attr">scope</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">icon</span>(<span class="params">name: string</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> React.createElement(ICONS[name])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**初始化一份json schema</span></span><br><span class="line"><span class="comment"> * 解析 json-schema 的能力；将 json-schema 转换成 Field Model 的能力；编译 json-schema 表达式的能力</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">const</span> schema = &#123;</span><br><span class="line">  <span class="comment">// schema type</span></span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;object&#x27;</span>,</span><br><span class="line">  <span class="attr">properties</span>: &#123;</span><br><span class="line">    <span class="attr">layout</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;void&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;x-component&#x27;</span>: <span class="string">&#x27;FormLayout&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;x-component-props&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">labelCol</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">wrapperCol</span>: <span class="number">6</span>,</span><br><span class="line">        <span class="attr">labelAlign</span>: <span class="string">&#x27;right&#x27;</span></span><br><span class="line">        <span class="comment">// layout: &#x27;vertical&#x27;,</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 属性描述</span></span><br><span class="line">      <span class="attr">properties</span>: &#123;</span><br><span class="line">        <span class="attr">username</span>: &#123;</span><br><span class="line">          <span class="comment">// schema type</span></span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;string&#x27;</span>,</span><br><span class="line">          <span class="comment">// 标题</span></span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">          <span class="comment">// 必填</span></span><br><span class="line">          <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="comment">// 字段 UI 包装器组件</span></span><br><span class="line">          <span class="string">&#x27;x-decorator&#x27;</span>: <span class="string">&#x27;FormItem&#x27;</span>,</span><br><span class="line">          <span class="comment">// 字段 UI 组件</span></span><br><span class="line">          <span class="string">&#x27;x-component&#x27;</span>: <span class="string">&#x27;Input&#x27;</span>,</span><br><span class="line">          <span class="comment">// 字段 UI 组件属性</span></span><br><span class="line">          <span class="string">&#x27;x-component-props&#x27;</span>: &#123;</span><br><span class="line">            <span class="attr">prefix</span>: <span class="string">&quot;&#123;&#123;icon(&#x27;UserOutlined&#x27;)&#125;&#125;&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">password</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;string&#x27;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">          <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="string">&#x27;x-decorator&#x27;</span>: <span class="string">&#x27;FormItem&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;x-decorator-props&#x27;</span>: &#123;</span><br><span class="line">            <span class="attr">addonAfter</span>: <span class="string">&#x27;强度高&#x27;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&#x27;x-component&#x27;</span>: <span class="string">&#x27;Password&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;x-component-props&#x27;</span>: &#123;</span><br><span class="line">            <span class="attr">prefix</span>: <span class="string">&quot;&#123;&#123;icon(&#x27;LockOutlined&#x27;)&#125;&#125;&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">FormProvider</span> <span class="attr">form</span>=<span class="string">&#123;form&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">FormLayout</span> <span class="attr">layout</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">SchemaField</span> <span class="attr">schema</span>=<span class="string">&#123;schema&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">FormLayout</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">FormButtonGroup</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Submit</span> <span class="attr">onSubmit</span>=<span class="string">&#123;console.log&#125;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">Submit</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">FormButtonGroup</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">FormConsumer</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;() =&gt; (</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">width:</span> <span class="attr">340</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">marginTop:</span> <span class="attr">20</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">padding:</span> <span class="attr">5</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">border:</span> &#x27;<span class="attr">1px</span> <span class="attr">dashed</span> #<span class="attr">666</span>&#x27;</span></span></span><br><span class="line"><span class="tag"><span class="xml">            &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">          &gt;</span></span></span><br><span class="line"><span class="xml">            实时响应-用户名：&#123;form.values.username&#125;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        )&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">FormConsumer</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">FormProvider</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/12/01/Formily-demo/img2.png" alt="image"></p><ul><li><code>FormProvider</code>组件是作为视图层桥接表单模型的入口，它只有一个参数，就是接收 <code>createForm</code>创建出来的 <code>Form </code>实例，并将 <code>Form </code>实例以上下文形式传递到子组件中。</li><li><code>FormLayout</code>组件是用来批量控制<code>FormItem</code>样式的组件，这里我们指定布局为水平布局，也就是标签在左，组件在右。</li><li><code>FormConsumer</code>组件是作为响应式模型的响应器而存在，它核心是一个<code>render props</code>模式，在作为 <code>children </code>的回调函数中，会自动收集所有依赖，如果依赖发生变化，则会重新渲染，借助 <code>FormConsumer </code>我们可以很方便的实现各种计算汇总的需求。</li><li><code>FormButtonGroup</code>组件作为表单按钮组容器而存在，主要负责按钮的布局。</li><li><code>Submit</code>组件作为表单提交的动作触发器而存在，其实我们也可以直接使用 <code>form.submit </code>方法进行提交，但是使用 <code>Submit </code>的好处是不需要每次都在 <code>Button </code>组件上写 <code>onClick </code>事件处理器，同时它还处理了 <code>Form </code>的 <code>loading </code>状态，如果 <code>onSubmit </code>方法返回一个 <code>Promise</code>，且 <code>Promise </code>正在 <code>pending </code>状态，那么按钮会自动进入 <code>loading </code>状态。</li></ul><blockquote><p><code>注意：使用前还需要了解，Formily 已经完全放弃对 IE 的兼容，如需兼容 IE，慎用！！！</code></p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://formilyjs.org/">Formily 官方文档</a><br>​</p><p>​</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">Formily入门实践</summary>
    
    
    
    
    <category term="Formily" scheme="https://yingliyu.github.io/tags/Formily/"/>
    
  </entry>
  
  <entry>
    <title>webpack之HappyPack</title>
    <link href="https://yingliyu.github.io/2021/11/26/webpack-happyPack/"/>
    <id>https://yingliyu.github.io/2021/11/26/webpack-happyPack/</id>
    <published>2021-11-26T15:14:30.000Z</published>
    <updated>2022-01-19T03:08:56.663Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>HappyPack makes initial webpack builds faster by transforming files in parallel.<br>HappyPack 通过并行转换文件，使初始 webpack 构建速度更快。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>webpack中万物皆模块，但是webpack默认只能处理js模块，那么js以外的模块怎么处理呢，所以就有了loader机制，比如：vue-loader、css-loader、file-loader等等。loader是一个导出为function的node模块。可以将匹配到的文件进行一次转换，同时loader可以链式传递。如果项目比较复杂，构建时就会有大量文件需要解析和处理，构建是文件读写和计算密集型的操作，大型项目中webpack构建慢的问题尤为显著，然而运行在nodejs环境的webpack是单线程的，如果能让webpack同一时间能做多项任务，发挥多核 CPU 电脑的威力，就能大大的提升构建速度。这时候HappyPack就闪亮登场了，它把任务分解给多个子进程去并发的执行，子进程处理完后再把结果发送给主进程，相比之前可以有效的提升构建速度。<br>更多loaders内容参考<a href="https://webpack.docschina.org/loaders/">https://webpack.docschina.org/loaders/</a><br>​</p><blockquote><p>线程和进程都可用于实现并发，一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线。</p></blockquote><h2 id="使用HappyPack"><a href="#使用HappyPack" class="headerlink" title="使用HappyPack"></a>使用HappyPack</h2><p>HappyPack提供了一个plugin和一个load完成它的工作，所以你必须同时使用两者来启用它。<br>使用npm：<br><code>npm install --save-dev happypack</code><br>使用yarn：<br><code>yarn add happypack --dev</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @file: webpack.config.js</span></span><br><span class="line"><span class="keyword">var</span> HappyPack = <span class="built_in">require</span>(<span class="string">&#x27;happypack&#x27;</span>);</span><br><span class="line"><span class="comment">// 构造出共享进程池，进程池中包含5个子进程</span></span><br><span class="line"><span class="keyword">var</span> happyThreadPool = HappyPack.ThreadPool(&#123; <span class="attr">size</span>: <span class="number">5</span> &#125;);</span><br><span class="line"> &lt;!--more--&gt;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="comment">// 将.js文件交给id为babel的happypack实例来执行</span></span><br><span class="line">        <span class="comment">// 1) 用happypack/loader代原始的loaders列表</span></span><br><span class="line">        use: <span class="string">&#x27;happypack/loader?id=babel&#x27;</span>,</span><br><span class="line">        <span class="comment">// 排除 node_modules 目录下的文件，node_modules 目录下的文件都是采用的 ES5 语法，没必要再通过 Babel 去转换</span></span><br><span class="line">        <span class="attr">exclude</span>: path.resolve(__dirname, <span class="string">&#x27;node_modules&#x27;</span>),</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// 2)创建一个plugin</span></span><br><span class="line">    <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">      <span class="comment">// id标识happypack处理那一类文件</span></span><br><span class="line">      <span class="attr">id</span>: <span class="string">&#x27;babel&#x27;</span>,</span><br><span class="line">      <span class="comment">// 共享线程池</span></span><br><span class="line">      <span class="attr">threadPool</span>: happyThreadPool,</span><br><span class="line">      <span class="comment">// 3) 配置一个替代步骤1) 中的loader</span></span><br><span class="line">      <span class="attr">loaders</span>: [ <span class="string">&#x27;babel-loader&#x27;</span> ],</span><br><span class="line">      <span class="comment">// 日志输出</span></span><br><span class="line">      <span class="attr">verbose</span>: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在module中定义loader rules告诉 webpack 如何处理特定格式的文件，调用基础配置里的happy/loader，此loader会通过参数的id遍历真实的插件数组，然后找到对应的happyPlugin，通过happyPlugin的配置获取真实的Loader并通过之前初始化完成的多线程进行编译，将编译结果传递给主线程。编译完成后，插件还会针对编译的结果缓存，以及新编译的文件进行缓存的设置。<br>​</p><p>在实例化 HappyPack 插件的时候，HappyPack 支持如下参数：</p><ol><li><code>loaders:Array</code>：</li></ol><p>由一个转换文件的loader名和一个查询字符串组成。例如：<code>use: &#39;happypack/loader?id=babel&#39;</code>，用happypack/loader代原始的loaders列表，唯一的happyPack plugin标识，用于在modules rules中去识别对应的happyPack实例中的loaders去执行文件的转换操作。<br>​</p><ol start="2"><li><code>id: String</code></li></ol><p>happy plugin 的唯一标识。默认值”1”，如果只有一个happy plugin可以不指定，当使用不止一个happy plugin时需要指定它。<br>​</p><ol start="3"><li><code>threads: Number</code></li></ol><p>代表开启几个子进程去处理这一类型的文件，默认是3个，类型必须是整数。<br>​</p><ol start="4"><li><code>threadPool: HappyThreadPool</code></li></ol><p>代表共享进程池，即多个 HappyPack 实例都使用同一个共享进程池中的子进程去处理任务，以防止资源占用过多。默认值：null。<br>​</p><ol start="5"><li><code>verbose: Boolean</code></li></ol><p>是否允许 HappyPack 输出日志，默认是 true。<br>​</p><blockquote><p>HappyPack 并不是完全支持所有的webpack loader API，具体支持情况请查看<a href="https://github.com/amireh/happypack/wiki/Webpack-Loader-API-Support">官方wiki</a> 。</p></blockquote><h2 id="HappyPack原理"><a href="#HappyPack原理" class="headerlink" title="HappyPack原理"></a>HappyPack原理</h2><p><img src="/2021/11/26/webpack-happyPack/1.png" alt="img"></p><p>HappyPack是webpack和主要来源文件（如JS源代码）之间的中间件，其中发生了大量的文件转换处理。每次webpack解析一个模块时，HappyPack都会获取它（模块）及其所有依赖项，并将这些文件分发给多个工作线程”线程”。<br>这些线程实际上是调用转换器的简单node进程。当加载到编译后的版本时，HappyPack会将最终的chunk提供给加载程序。</p><h2 id="不同webpack版本下使用建议"><a href="#不同webpack版本下使用建议" class="headerlink" title="不同webpack版本下使用建议"></a>不同webpack版本下使用建议</h2><blockquote><p><img src="/2021/11/26/webpack-happyPack/2.png" alt="img"></p></blockquote><p>问：对webpack2&amp;3有效吗？<br>答：有，webpack2&amp;3需要搭配使用happyPack@^4.0.1<br>问：对于webpack4有效吗？<br>答：webpack4可能不太需要。<br>大意：webpack4已经融合了多线程机制（HappyPack做的工作），因此happypack的作用不是很明显。如果你使用的版本是&lt;4，那么还是可以继续使用HappyPack。在webpack4中有个<a href="https://github.com/webpack-contrib/thread-loader">thread-loader</a>，配置起来更简单，两种方式都可以试一下看看那种方案对你来说最优。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://www.npmjs.com/package/happypack">https://www.npmjs.com/package/happypack</a></li><li><a href="http://webpack.wuhaolin.cn/4%E4%BC%98%E5%8C%96/4-3%E4%BD%BF%E7%94%A8HappyPack.html">http://webpack.wuhaolin.cn</a></li></ul><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">webpack之HappyPack</summary>
    
    
    
    
    <category term="webpack" scheme="https://yingliyu.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>HTML、CSS面试题</title>
    <link href="https://yingliyu.github.io/2021/10/17/interview-question-htmlcss/"/>
    <id>https://yingliyu.github.io/2021/10/17/interview-question-htmlcss/</id>
    <published>2021-10-17T17:42:45.000Z</published>
    <updated>2022-01-19T03:08:56.655Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-盒模型的两种标准？如何相互转化"><a href="#1-盒模型的两种标准？如何相互转化" class="headerlink" title="1. 盒模型的两种标准？如何相互转化"></a>1. 盒模型的两种标准？如何相互转化</h5><h5 id="2-BFC"><a href="#2-BFC" class="headerlink" title="2. BFC"></a>2. BFC</h5><h5 id="3-伪类的伪元素用法与区别"><a href="#3-伪类的伪元素用法与区别" class="headerlink" title="3. 伪类的伪元素用法与区别"></a>3. 伪类的伪元素用法与区别</h5><h5 id="4-div宽度为100vw-设置宽高固定比为10-1-怎么设置"><a href="#4-div宽度为100vw-设置宽高固定比为10-1-怎么设置" class="headerlink" title="4. div宽度为100vw,设置宽高固定比为10:1,怎么设置"></a>4. div宽度为100vw,设置宽高固定比为10:1,怎么设置</h5><h5 id="5-Flex-1完整写法，分别代表什么意思"><a href="#5-Flex-1完整写法，分别代表什么意思" class="headerlink" title="5. Flex:1完整写法，分别代表什么意思"></a>5. Flex:1完整写法，分别代表什么意思</h5><h5 id="6-flex的实现原理"><a href="#6-flex的实现原理" class="headerlink" title="6. flex的实现原理"></a>6. flex的实现原理</h5><h5 id="7-flex垂直居中兼容ie"><a href="#7-flex垂直居中兼容ie" class="headerlink" title="7. flex垂直居中兼容ie"></a>7. flex垂直居中兼容ie</h5><h5 id="8-rem的使用原理"><a href="#8-rem的使用原理" class="headerlink" title="8. rem的使用原理"></a>8. rem的使用原理</h5><h5 id="9-移动端300毫秒延迟，怎么解决的"><a href="#9-移动端300毫秒延迟，怎么解决的" class="headerlink" title="9. 移动端300毫秒延迟，怎么解决的"></a>9. 移动端300毫秒延迟，怎么解决的</h5><h5 id="10-回流和重汇"><a href="#10-回流和重汇" class="headerlink" title="10. 回流和重汇"></a>10. 回流和重汇</h5><span id="more"></span><h5 id="11-浏览器最小字体，如何实现10px字体"><a href="#11-浏览器最小字体，如何实现10px字体" class="headerlink" title="11. 浏览器最小字体，如何实现10px字体"></a>11. 浏览器最小字体，如何实现10px字体</h5><h5 id="12-解决移动端1px边框过粗的问题"><a href="#12-解决移动端1px边框过粗的问题" class="headerlink" title="12. 解决移动端1px边框过粗的问题"></a>12. 解决移动端1px边框过粗的问题</h5><h5 id="13-渐进增强和优雅降级"><a href="#13-渐进增强和优雅降级" class="headerlink" title="13. 渐进增强和优雅降级"></a>13. 渐进增强和优雅降级</h5><h5 id="14-sass和less的用法和区别"><a href="#14-sass和less的用法和区别" class="headerlink" title="14. sass和less的用法和区别"></a>14. sass和less的用法和区别</h5><h5 id="15-类选择器-a-b-a-b-a-gt-b分别是什么意思"><a href="#15-类选择器-a-b-a-b-a-gt-b分别是什么意思" class="headerlink" title="15. 类选择器.a  .b  .a.b   .a&gt;.b分别是什么意思"></a>15. 类选择器.a  .b  .a.b   .a&gt;.b分别是什么意思</h5><h5 id="16-选择器类型和权重"><a href="#16-选择器类型和权重" class="headerlink" title="16. 选择器类型和权重"></a>16. 选择器类型和权重</h5><h5 id="17-p标签里面可以放div吗？为什么？"><a href="#17-p标签里面可以放div吗？为什么？" class="headerlink" title="17. p标签里面可以放div吗？为什么？"></a>17. p标签里面可以放div吗？为什么？</h5><h5 id="18-移动端button不同手机没有垂直居中怎么解决"><a href="#18-移动端button不同手机没有垂直居中怎么解决" class="headerlink" title="18. 移动端button不同手机没有垂直居中怎么解决"></a>18. 移动端button不同手机没有垂直居中怎么解决</h5><h5 id="19-解释png、jpg、gif图片的格式，分别什么时候用？有没有了解过webp"><a href="#19-解释png、jpg、gif图片的格式，分别什么时候用？有没有了解过webp" class="headerlink" title="19. 解释png、jpg、gif图片的格式，分别什么时候用？有没有了解过webp"></a>19. 解释png、jpg、gif图片的格式，分别什么时候用？有没有了解过webp</h5><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">HTML、CSS面试题</summary>
    
    
    
    <category term="面试题" scheme="https://yingliyu.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="面试题" scheme="https://yingliyu.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    <category term="HTML、CSS" scheme="https://yingliyu.github.io/tags/HTML%E3%80%81CSS/"/>
    
  </entry>
  
  <entry>
    <title>JS系列面试题</title>
    <link href="https://yingliyu.github.io/2021/10/17/interview-question-js/"/>
    <id>https://yingliyu.github.io/2021/10/17/interview-question-js/</id>
    <published>2021-10-17T14:12:00.000Z</published>
    <updated>2022-01-19T03:08:56.655Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-数据类型有哪些"><a href="#1-数据类型有哪些" class="headerlink" title="1. 数据类型有哪些"></a>1. 数据类型有哪些</h5><h5 id="2-For-of-和-for-in-的区别"><a href="#2-For-of-和-for-in-的区别" class="headerlink" title="2. For of 和 for in 的区别"></a>2. For of 和 for in 的区别</h5><h5 id="3-Map和-object-的区别有哪些，weakMap了解么，和Map区别是什么"><a href="#3-Map和-object-的区别有哪些，weakMap了解么，和Map区别是什么" class="headerlink" title="3. Map和 object 的区别有哪些，weakMap了解么，和Map区别是什么"></a>3. Map和 object 的区别有哪些，weakMap了解么，和Map区别是什么</h5><h5 id="4-为什么要进行垃圾回收，垃圾回收的原理"><a href="#4-为什么要进行垃圾回收，垃圾回收的原理" class="headerlink" title="4. 为什么要进行垃圾回收，垃圾回收的原理"></a>4. 为什么要进行垃圾回收，垃圾回收的原理</h5><h5 id="5-0-1-0-2等于0-3么，为什么不等，有什么好的处理办法么，10转成二进制怎么表示"><a href="#5-0-1-0-2等于0-3么，为什么不等，有什么好的处理办法么，10转成二进制怎么表示" class="headerlink" title="5. 0.1+0.2等于0.3么，为什么不等，有什么好的处理办法么，10转成二进制怎么表示"></a>5. 0.1+0.2等于0.3么，为什么不等，有什么好的处理办法么，10转成二进制怎么表示</h5><h5 id="6-继承有哪些方式，最有效是哪种，如何实现的"><a href="#6-继承有哪些方式，最有效是哪种，如何实现的" class="headerlink" title="6. 继承有哪些方式，最有效是哪种，如何实现的"></a>6. 继承有哪些方式，最有效是哪种，如何实现的</h5><h5 id="7-Var和let的区别有哪些-浏览器环境下-全局作用域的let和var-声明变量会挂载到-window上么-const的值可以修改么，为什么"><a href="#7-Var和let的区别有哪些-浏览器环境下-全局作用域的let和var-声明变量会挂载到-window上么-const的值可以修改么，为什么" class="headerlink" title="7. Var和let的区别有哪些, 浏览器环境下,全局作用域的let和var 声明变量会挂载到 window上么 ,const的值可以修改么，为什么"></a>7. Var和let的区别有哪些, 浏览器环境下,全局作用域的let和var 声明变量会挂载到 window上么 ,const的值可以修改么，为什么</h5><h5 id="8-Object-defineProperty的作用是什么，和proxy的区别"><a href="#8-Object-defineProperty的作用是什么，和proxy的区别" class="headerlink" title="8. Object.defineProperty的作用是什么，和proxy的区别"></a>8. Object.defineProperty的作用是什么，和proxy的区别</h5><h5 id="9-reduce用法"><a href="#9-reduce用法" class="headerlink" title="9. reduce用法"></a>9. reduce用法</h5><h5 id="10-防抖和节流使用场景"><a href="#10-防抖和节流使用场景" class="headerlink" title="10. 防抖和节流使用场景"></a>10. 防抖和节流使用场景</h5><span id="more"></span><h5 id="11-深拷贝"><a href="#11-深拷贝" class="headerlink" title="11. 深拷贝"></a>11. 深拷贝</h5><h5 id="12-javaScript-的事件循环（event-loop）"><a href="#12-javaScript-的事件循环（event-loop）" class="headerlink" title="12. javaScript 的事件循环（event loop）"></a>12. javaScript 的事件循环（event loop）</h5><h5 id="13-渲染几万条数据如何优化不卡住页面"><a href="#13-渲染几万条数据如何优化不卡住页面" class="headerlink" title="13. 渲染几万条数据如何优化不卡住页面"></a>13. 渲染几万条数据如何优化不卡住页面</h5><h5 id="14-普通函数和箭头函数的区别"><a href="#14-普通函数和箭头函数的区别" class="headerlink" title="14. 普通函数和箭头函数的区别"></a>14. 普通函数和箭头函数的区别</h5><h5 id="15-原型链"><a href="#15-原型链" class="headerlink" title="15. 原型链"></a>15. 原型链</h5><h5 id="16-js事件模型"><a href="#16-js事件模型" class="headerlink" title="16. js事件模型"></a>16. js事件模型</h5><h5 id="17-函数式编程理解"><a href="#17-函数式编程理解" class="headerlink" title="17. 函数式编程理解"></a>17. 函数式编程理解</h5><h5 id="18-闭包导致的内存泄漏怎么解决"><a href="#18-闭包导致的内存泄漏怎么解决" class="headerlink" title="18. 闭包导致的内存泄漏怎么解决"></a>18. 闭包导致的内存泄漏怎么解决</h5><h5 id="19-JSONP的原理"><a href="#19-JSONP的原理" class="headerlink" title="19. JSONP的原理"></a>19. JSONP的原理</h5><h5 id="20-promise为什么可以链式调用"><a href="#20-promise为什么可以链式调用" class="headerlink" title="20. promise为什么可以链式调用"></a>20. promise为什么可以链式调用</h5><h5 id="21-promise中resolve之后再reject，最终是什么状态"><a href="#21-promise中resolve之后再reject，最终是什么状态" class="headerlink" title="21. promise中resolve之后再reject，最终是什么状态"></a>21. promise中resolve之后再reject，最终是什么状态</h5><h5 id="22-跨域有什么解决方法？json-stringfy有什么类型不能用"><a href="#22-跨域有什么解决方法？json-stringfy有什么类型不能用" class="headerlink" title="22. 跨域有什么解决方法？json.stringfy有什么类型不能用"></a>22. 跨域有什么解决方法？json.stringfy有什么类型不能用</h5><h5 id="23-（es6）class继承"><a href="#23-（es6）class继承" class="headerlink" title="23. （es6）class继承"></a>23. （es6）class继承</h5><h5 id="24-（ts）什么是范型"><a href="#24-（ts）什么是范型" class="headerlink" title="24. （ts）什么是范型"></a>24. （ts）什么是范型</h5><h5 id="25-对柯里化函数的理解"><a href="#25-对柯里化函数的理解" class="headerlink" title="25. 对柯里化函数的理解"></a>25. 对柯里化函数的理解</h5><h5 id="26-面向对象特性"><a href="#26-面向对象特性" class="headerlink" title="26. 面向对象特性"></a>26. 面向对象特性</h5><h5 id="27-如何实现一个new"><a href="#27-如何实现一个new" class="headerlink" title="27. 如何实现一个new"></a>27. 如何实现一个new</h5><h5 id="28-new-这个关键字干了什么"><a href="#28-new-这个关键字干了什么" class="headerlink" title="28. new 这个关键字干了什么"></a>28. new 这个关键字干了什么</h5><h5 id="29-call-apply-bind-的区别"><a href="#29-call-apply-bind-的区别" class="headerlink" title="29. call, apply, bind 的区别"></a>29. call, apply, bind 的区别</h5><h5 id="30-强缓存，协商缓存"><a href="#30-强缓存，协商缓存" class="headerlink" title="30. 强缓存，协商缓存"></a>30. 强缓存，协商缓存</h5><h5 id="31-阻止冒泡，阻止事件捕获"><a href="#31-阻止冒泡，阻止事件捕获" class="headerlink" title="31. 阻止冒泡，阻止事件捕获"></a>31. 阻止冒泡，阻止事件捕获</h5><h5 id="32-高阶函数HOF"><a href="#32-高阶函数HOF" class="headerlink" title="32. 高阶函数HOF"></a>32. 高阶函数HOF</h5><h5 id="33-ES6新特性用过哪些"><a href="#33-ES6新特性用过哪些" class="headerlink" title="33. ES6新特性用过哪些"></a>33. ES6新特性用过哪些</h5><h5 id="34-如何判断是否是对象和数组"><a href="#34-如何判断是否是对象和数组" class="headerlink" title="34. 如何判断是否是对象和数组"></a>34. 如何判断是否是对象和数组</h5><h5 id="35-怎样同步调用接口"><a href="#35-怎样同步调用接口" class="headerlink" title="35. 怎样同步调用接口"></a>35. 怎样同步调用接口</h5><h5 id="36-新api：-pushState、bom"><a href="#36-新api：-pushState、bom" class="headerlink" title="36. 新api： pushState、bom"></a>36. 新api： pushState、bom</h5><h5 id="37-websocket与轮询区别"><a href="#37-websocket与轮询区别" class="headerlink" title="37. websocket与轮询区别"></a>37. websocket与轮询区别</h5><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">JS系列面试题</summary>
    
    
    
    <category term="面试题" scheme="https://yingliyu.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="面试题" scheme="https://yingliyu.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    <category term="JS" scheme="https://yingliyu.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>VUE系列面试题</title>
    <link href="https://yingliyu.github.io/2021/10/17/interview-question-vue/"/>
    <id>https://yingliyu.github.io/2021/10/17/interview-question-vue/</id>
    <published>2021-10-17T13:51:18.000Z</published>
    <updated>2022-01-19T03:08:56.655Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-vue双向绑定的原理"><a href="#1-vue双向绑定的原理" class="headerlink" title="1. vue双向绑定的原理"></a>1. vue双向绑定的原理</h5><h5 id="2-vue通信方式"><a href="#2-vue通信方式" class="headerlink" title="2. vue通信方式"></a>2. vue通信方式</h5><h5 id="3-组件中的data用箭头函数行不行"><a href="#3-组件中的data用箭头函数行不行" class="headerlink" title="3. 组件中的data用箭头函数行不行"></a>3. 组件中的data用箭头函数行不行</h5><h5 id="4-vue生命周期"><a href="#4-vue生命周期" class="headerlink" title="4. vue生命周期"></a>4. vue生命周期</h5><h5 id="5-vue的keep-alive"><a href="#5-vue的keep-alive" class="headerlink" title="5. vue的keep-alive"></a>5. vue的keep-alive</h5><h5 id="6-vue与react有什么相同点-不同点"><a href="#6-vue与react有什么相同点-不同点" class="headerlink" title="6. vue与react有什么相同点/不同点"></a>6. vue与react有什么相同点/不同点</h5><h5 id="7-vue的-listeners"><a href="#7-vue的-listeners" class="headerlink" title="7. vue的 $listeners"></a>7. vue的 $listeners</h5><h5 id="8-vue修饰符-sync"><a href="#8-vue修饰符-sync" class="headerlink" title="8. vue修饰符.sync"></a>8. vue修饰符.sync</h5><h5 id="9-vue的渲染是异步还是同步，为什么"><a href="#9-vue的渲染是异步还是同步，为什么" class="headerlink" title="9. vue的渲染是异步还是同步，为什么"></a>9. vue的渲染是异步还是同步，为什么</h5><h5 id="10-vue的nextTick的用法及场景"><a href="#10-vue的nextTick的用法及场景" class="headerlink" title="10. vue的nextTick的用法及场景"></a>10. vue的nextTick的用法及场景</h5><span id="more"></span><h5 id="11-vue有render吗"><a href="#11-vue有render吗" class="headerlink" title="11. vue有render吗"></a>11. vue有render吗</h5><h5 id="12-v-model做了什么"><a href="#12-v-model做了什么" class="headerlink" title="12. v-model做了什么"></a>12. v-model做了什么</h5><h5 id="13-首页速度加载怎么优化"><a href="#13-首页速度加载怎么优化" class="headerlink" title="13. 首页速度加载怎么优化"></a>13. 首页速度加载怎么优化</h5><h5 id="14-object-defineProperty的弊端怎么解决"><a href="#14-object-defineProperty的弊端怎么解决" class="headerlink" title="14. object.defineProperty的弊端怎么解决"></a>14. object.defineProperty的弊端怎么解决</h5><h5 id="15-vue父子组件的生命周期执行顺序"><a href="#15-vue父子组件的生命周期执行顺序" class="headerlink" title="15. vue父子组件的生命周期执行顺序"></a>15. vue父子组件的生命周期执行顺序</h5><h5 id="16-虚拟DOM"><a href="#16-虚拟DOM" class="headerlink" title="16. 虚拟DOM"></a>16. 虚拟DOM</h5><h5 id="17-vue的设计模式"><a href="#17-vue的设计模式" class="headerlink" title="17. vue的设计模式"></a>17. vue的设计模式</h5><h5 id="18-slot-插槽"><a href="#18-slot-插槽" class="headerlink" title="18. slot 插槽"></a>18. slot 插槽</h5><h5 id="19-指令的封装"><a href="#19-指令的封装" class="headerlink" title="19. 指令的封装"></a>19. 指令的封装</h5><h5 id="20-过滤器的封装"><a href="#20-过滤器的封装" class="headerlink" title="20. 过滤器的封装"></a>20. 过滤器的封装</h5><h5 id="21-diff算法的理解"><a href="#21-diff算法的理解" class="headerlink" title="21. diff算法的理解"></a>21. diff算法的理解</h5><h5 id="22-为什么key不能用下标"><a href="#22-为什么key不能用下标" class="headerlink" title="22. 为什么key不能用下标"></a>22. 为什么key不能用下标</h5><h5 id="23-wacth与computed的区别"><a href="#23-wacth与computed的区别" class="headerlink" title="23. wacth与computed的区别"></a>23. wacth与computed的区别</h5><h5 id="24-实现一个v-model"><a href="#24-实现一个v-model" class="headerlink" title="24. 实现一个v-model"></a>24. 实现一个v-model</h5><h5 id="25-MVVM的理解"><a href="#25-MVVM的理解" class="headerlink" title="25. MVVM的理解"></a>25. MVVM的理解</h5><h5 id="26-全局组件如何引入"><a href="#26-全局组件如何引入" class="headerlink" title="26. 全局组件如何引入"></a>26. 全局组件如何引入</h5><h5 id="27-vuex的使用？引出mutation和action区别？"><a href="#27-vuex的使用？引出mutation和action区别？" class="headerlink" title="27. vuex的使用？引出mutation和action区别？"></a>27. vuex的使用？引出mutation和action区别？</h5><h5 id="28-Vuex整个触发过程（actions，state，view）"><a href="#28-Vuex整个触发过程（actions，state，view）" class="headerlink" title="28. Vuex整个触发过程（actions，state，view）"></a>28. Vuex整个触发过程（actions，state，view）</h5><h5 id="29-vue-router中两种模式的区别？解释原理"><a href="#29-vue-router中两种模式的区别？解释原理" class="headerlink" title="29. vue router中两种模式的区别？解释原理"></a>29. vue router中两种模式的区别？解释原理</h5><h5 id="30-new-Router分别时hush和history时base有什么区别"><a href="#30-new-Router分别时hush和history时base有什么区别" class="headerlink" title="30. new Router分别时hush和history时base有什么区别"></a>30. new Router分别时hush和history时base有什么区别</h5><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">VUE面试题</summary>
    
    
    
    <category term="面试题" scheme="https://yingliyu.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="面试题" scheme="https://yingliyu.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    <category term="VUE" scheme="https://yingliyu.github.io/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>Hexo更换主题出现空白index.html</title>
    <link href="https://yingliyu.github.io/2021/09/26/hexo-upgrade/"/>
    <id>https://yingliyu.github.io/2021/09/26/hexo-upgrade/</id>
    <published>2021-09-26T15:32:00.000Z</published>
    <updated>2022-01-19T03:08:56.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>搭建博客很久了，之前用的<code>yilia</code>主题很喜欢，最近又”移情别恋”上了 <code>ayer</code> 这种简单有点技术控的风格主题，又开始折腾一番。下面记录一下我的折腾轨迹…</p><p>版本：<br><code>hexo: 4.2.1</code><br><code>hexo-cli: 3.1.0</code><br><code>node: 12.13.0</code></p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>更换主题</p><span id="more"></span><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>开始安装新主题并使用</p><h6 id="1-安装主题"><a href="#1-安装主题" class="headerlink" title="1.安装主题"></a>1.安装主题</h6><p>hexo-theme-ayer 主题对 hexo 版本&gt;=5.0 和&lt;5.0 有两种不同的安装方法，因为我的 hexo&lt;5.0 采用&lt;5.0 的安装方法：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> hexo &lt; <span class="number">5.0</span></span><br><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/Shen-Yu/</span>hexo-theme-ayer.git themes/ayer</span><br></pre></td></tr></table></figure><p>安装成功会在项目的 <code>themes</code> 目录下多一个 <code>ayer</code> 目录，<code>ayer</code> 根目录有一个<code>_config.yml</code> 主题配置文件</p><h6 id="2-修改"><a href="#2-修改" class="headerlink" title="2.修改"></a>2.修改</h6><p>将博客根目录下的 <code>_config.yml</code> 里的<code> theme</code> 值修改成 <code>ayer</code></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">theme:</span> ayer</span><br></pre></td></tr></table></figure><p>然后根据自己的需要修改主题的配置文件 <code>themes/ayer/_config.yml</code><br>最后，重新<code>hexo g</code>构建。</p><h2 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h2><p>问题出现了，发现构建的 public 目录下的 index.html 文件都是空的，访问博客显示空白。</p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>在网上查了一下，有相似问题的说是缺少依赖，先<code>npm ls --depth 0</code>查看 npm 插件缺失情况，一般情况下出现<code>npm ERROR！missing xxx</code><br>说明 xxx 插件缺失，然后依次将所有缺失的插件安装上。<br>执行了以上操作之后依然不行，解决不了我的问题。</p><p>最后决定一不做二不休，干脆直接升级 <code>hexo</code> 到 5.x.x 版本。<br>执行以下指令进行版本升级：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> install -g <span class="built_in">npm</span>-check <span class="comment"># 检查之前安装的插件，都有哪些是可以升级的</span></span><br><span class="line"><span class="built_in">npm</span> install -g <span class="built_in">npm</span>-upgrade <span class="comment"># 升级系统中的插件</span></span><br><span class="line"><span class="built_in">npm</span>-check</span><br><span class="line"><span class="built_in">npm</span>-upgrade  <span class="comment">#更新</span></span><br><span class="line"><span class="comment"># 更新 hexo 及所有插件</span></span><br><span class="line"><span class="built_in">npm</span> update</span><br><span class="line"><span class="comment"># 查看版本 确认 hexo 已经更新</span></span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>升级之后版本：<br><code>hexo: 5.4.1</code><br><code>hexo-cli: 3.1.0</code><br><code>node: 12.13.0</code></p><p>删除之前步骤 1 安装的（ hexo 版本&lt;5.0 ） <code>ayer</code> 主题（/themes/ayer）,然后使用 hexo&gt;5.0 的安装方法重新安装：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> i hexo-theme-ayer -S</span><br></pre></td></tr></table></figure><p>安装完成后会在根目录生成一个<code>_config.ayer.yml</code> 文件，直接编辑<code>_config.ayer.yml</code> 文件进行配置即可。<br>最后，重新<code>hexo g</code>构建，构建成功，index.html 文件内容正常，发布之后博客正常显示，问题解决。</p><p>参考：<a href="https://shen-yu.gitee.io/2019/ayer/#%E5%AE%89%E8%A3%85">Ayer 中文说明</a></p><p>错误之处欢迎交流指正，感谢~</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">Hexo更换主题出现空白index.html解决方案</summary>
    
    
    
    
    <category term="Hexo" scheme="https://yingliyu.github.io/tags/Hexo/"/>
    
    <category term="Hexo版本升级" scheme="https://yingliyu.github.io/tags/Hexo%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>vue-elementui-diary</title>
    <link href="https://yingliyu.github.io/2021/09/24/vue-elementui-diary/"/>
    <id>https://yingliyu.github.io/2021/09/24/vue-elementui-diary/</id>
    <published>2021-09-24T09:44:30.000Z</published>
    <updated>2022-01-19T03:08:56.663Z</updated>
    
    <content type="html"><![CDATA[<h5 id="title"><a href="#title" class="headerlink" title="title"></a>title</h5><!-- <blockquote class="pullquote mindmap mindmap-md"><ul><li><p><a href="https://hunterx.xyz/hexo-simple-mindmap-plugin-intro.html">Hexo 的思维导图插件</a></p><ul><li>前言</li><li>使用方法<ul><li>一</li><li>二</li><li>三</li></ul></li><li>太长不看</li><li>参考资料</li></ul></li></ul></blockquote> --><div style="width: 90%;margin: 0 auto">    <canvas id="chart1767" style="height: 300px"></canvas></div><script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script><script type="text/javascript">    var ctx = document.getElementById('chart1767').getContext('2d');    var options = {type: 'line',data: {labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],datasets: [{label: 'My First dataset',backgroundColor: 'rgb(255, 99, 132)',borderColor: 'rgb(255, 99, 132)',data: [0, 10, 5, 2, 20, 30, 45]}]},options: {responsive: true,title: {display: true,text: 'Chart.js Line Chart'}}};    new Chart(ctx, options);</script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;title&quot;&gt;&lt;a href=&quot;#title&quot; class=&quot;headerlink&quot; title=&quot;title&quot;&gt;&lt;/a&gt;title&lt;/h5&gt;&lt;!-- &lt;blockquote class=&quot;pullquote mindmap mindmap-md&quot;&gt;&lt;ul&gt;
&lt;l</summary>
      
    
    
    
    <category term="VUE" scheme="https://yingliyu.github.io/categories/VUE/"/>
    
    <category term="VUE2" scheme="https://yingliyu.github.io/categories/VUE/VUE2/"/>
    
    
    <category term="VUE" scheme="https://yingliyu.github.io/tags/VUE/"/>
    
    <category term="VUE2" scheme="https://yingliyu.github.io/tags/VUE2/"/>
    
  </entry>
  
  <entry>
    <title>文件下载的三种方式</title>
    <link href="https://yingliyu.github.io/2021/09/23/file-down/"/>
    <id>https://yingliyu.github.io/2021/09/23/file-down/</id>
    <published>2021-09-23T14:29:09.000Z</published>
    <updated>2022-01-19T03:08:56.647Z</updated>
    
    <content type="html"><![CDATA[<p>文件上传下载是项目中经常遇到的常规功能，本文针对下载功能总结了一共三种使用方式。</p><h5 id="一-无-API-浏览器直接下载（静态资源在前端）"><a href="#一-无-API-浏览器直接下载（静态资源在前端）" class="headerlink" title="一.无 API 浏览器直接下载（静态资源在前端）"></a>一.无 API 浏览器直接下载（静态资源在前端）</h5><p>将静态资源文件直接放于<code> public</code> 目录下，打包时 <code>public</code> 文件不会被编译。</p><blockquote><p>注意：静态资源的路径，在 public 文件夹下路径是<code>/文件名</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;download-file&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/file.xlsx&quot;</span> <span class="attr">download</span>=<span class="string">&quot;模板.xlsx&quot;</span>&gt;</span>下载模板文件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者使用非 a 标签的按钮下载：</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">@param &#123;string&#125; url  静态资源url</span></span><br><span class="line"><span class="comment">@param &#123;string&#125; filename  静态资源文件名(可选)</span></span><br><span class="line"><span class="comment">@param &#123;string&#125; target  </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fileUrlHandled = <span class="function">(<span class="params">&#123; url, filename, target &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> downloadElement = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  downloadElement.style.display = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">  downloadElement.href = url</span><br><span class="line">  <span class="keyword">if</span> (target) &#123;</span><br><span class="line">    downloadElement.target = <span class="string">&#x27;_blank&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  downloadElement.rel = <span class="string">&#x27;noopener noreferrer&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (filename) &#123;</span><br><span class="line">    downloadElement.download = filename</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(downloadElement)</span><br><span class="line">  downloadElement.click()</span><br><span class="line">  <span class="built_in">document</span>.body.removeChild(downloadElement)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：文件名不可控。</p><h5 id="二-后端-API-返回静态资源下载-url"><a href="#二-后端-API-返回静态资源下载-url" class="headerlink" title="二.后端 API 返回静态资源下载 url"></a>二.后端 API 返回静态资源下载 url</h5><p>原理：使用 ajax 下载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取 blob</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;String&#125;</span> </span>url 目标文件地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Promise&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBlob</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"></span><br><span class="line">    xhr.open(<span class="string">&#x27;GET&#x27;</span>, url, <span class="literal">true</span>)</span><br><span class="line">    xhr.responseType = <span class="string">&#x27;blob&#x27;</span></span><br><span class="line">    xhr.onload = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">        resolve(xhr.response)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Message.error(xhr.statusText || <span class="string">&#x27;文件获取失败&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    xhr.send()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;Blob&#125;</span> <span class="variable">blob</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;String&#125;</span> </span>filename 想要保存的文件名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveAs</span>(<span class="params">blob, filename</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.navigator.msSaveOrOpenBlob) &#123;</span><br><span class="line">    navigator.msSaveBlob(blob, filename)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> body = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    link.href = <span class="built_in">window</span>.URL.createObjectURL(blob)</span><br><span class="line">    link.download = filename</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fix Firefox</span></span><br><span class="line">    link.style.display = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">    body.appendChild(link)</span><br><span class="line"></span><br><span class="line">    link.click()</span><br><span class="line">    body.removeChild(link)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.URL.revokeObjectURL(link.href)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;String&#125;</span> </span>url 目标文件地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;String&#125;</span> </span>filename 想要保存的文件名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">download</span>(<span class="params">url, filename</span>) </span>&#123;</span><br><span class="line">  getBlob(url).then(<span class="function">(<span class="params">blob</span>) =&gt;</span> &#123;</span><br><span class="line">    saveAs(blob, filename)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>缺点：存在跨域问题。<br>优点：文件名可控。</p></blockquote><h5 id="三-后端-API-返回文件流"><a href="#三-后端-API-返回文件流" class="headerlink" title="三.后端 API 返回文件流"></a>三.后端 API 返回文件流</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二次封装axios POST请求方法下载</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">AppDownload</span>(<span class="params">url, data, baseURL</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    instance</span><br><span class="line">      .post(url, data, &#123;</span><br><span class="line">        baseURL,</span><br><span class="line">        <span class="attr">responseType</span>: <span class="string">&#x27;blob&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">      .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res &amp;&amp; res.status !== <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="comment">// reject(new Error(`下载失败`))</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> reader = <span class="keyword">new</span> FileReader()</span><br><span class="line">          reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> content = reader.result <span class="comment">// 内容就在这里</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="regexp">/&quot;ok&quot;:false/</span>.test(content)) &#123;</span><br><span class="line">              <span class="keyword">let</span> response = &#123;</span><br><span class="line">                <span class="attr">data</span>: <span class="built_in">JSON</span>.parse(content)</span><br><span class="line">              &#125;</span><br><span class="line">              responseFn(&#123; ...&#123; <span class="attr">res</span>: response &#125;, resolve, reject &#125;)</span><br><span class="line">              <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> url = <span class="built_in">window</span>.URL.createObjectURL(<span class="keyword">new</span> Blob([res.data]), &#123;</span><br><span class="line">              <span class="attr">type</span>: <span class="string">&#x27;multipary/form-data&#x27;</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">let</span> link = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">            link.style.display = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">            link.href = url</span><br><span class="line">            <span class="keyword">let</span> filename = data.filename || <span class="string">`<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>() - <span class="number">0</span>&#125;</span>.xlsx`</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (res.headers[<span class="string">&#x27;filename&#x27;</span>]) &#123;</span><br><span class="line">                filename = <span class="built_in">decodeURI</span>(res.headers[<span class="string">&#x27;filename&#x27;</span>]) || <span class="string">`<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>() - <span class="number">0</span>&#125;</span>.xlsx`</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">              <span class="built_in">console</span>.log(e)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            link.setAttribute(<span class="string">&#x27;download&#x27;</span>, filename)</span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(link)</span><br><span class="line">            link.click()</span><br><span class="line">            URL.revokeObjectURL(url.href)</span><br><span class="line">            <span class="built_in">document</span>.body.removeChild(link)</span><br><span class="line">            resolve()</span><br><span class="line">          &#125;</span><br><span class="line">          reader.readAsText(res.data)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error)</span><br><span class="line">        Message.error(&#123;</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&#x27;download failed&#x27;</span>,</span><br><span class="line">          <span class="attr">duration</span>: <span class="number">2000</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：后端需要将响应头中的 Access-Control-Expose-Headers，设置 Content-Disposition，否则前端取不到 Content-Disposition 的值。</p></blockquote><p>本文不到之处欢迎指正，感谢~</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">文件上传/下载</summary>
    
    
    
    <category term="文件" scheme="https://yingliyu.github.io/categories/%E6%96%87%E4%BB%B6/"/>
    
    <category term="下载" scheme="https://yingliyu.github.io/categories/%E6%96%87%E4%BB%B6/%E4%B8%8B%E8%BD%BD/"/>
    
    
    <category term="上传/下载" scheme="https://yingliyu.github.io/tags/%E4%B8%8A%E4%BC%A0-%E4%B8%8B%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>综合面试题</title>
    <link href="https://yingliyu.github.io/2021/09/11/interview-question-http/"/>
    <id>https://yingliyu.github.io/2021/09/11/interview-question-http/</id>
    <published>2021-09-11T14:23:00.000Z</published>
    <updated>2022-01-19T03:08:56.655Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、计算机网络"><a href="#一、计算机网络" class="headerlink" title="一、计算机网络"></a>一、计算机网络</h4><h5 id="1-浏览器的缓存机制"><a href="#1-浏览器的缓存机制" class="headerlink" title="1. 浏览器的缓存机制"></a>1. 浏览器的缓存机制</h5><h5 id="2-babel与ployfill的关系和区别"><a href="#2-babel与ployfill的关系和区别" class="headerlink" title="2. babel与ployfill的关系和区别"></a>2. babel与ployfill的关系和区别</h5><h5 id="3-解决跨域的方法"><a href="#3-解决跨域的方法" class="headerlink" title="3. 解决跨域的方法"></a>3. 解决跨域的方法</h5><h5 id="4-http状态码"><a href="#4-http状态码" class="headerlink" title="4. http状态码"></a>4. http状态码</h5><h5 id="5-git-stash"><a href="#5-git-stash" class="headerlink" title="5. git stash"></a>5. git stash</h5><h5 id="6-localstorage跨域可以共享吗，如何解决"><a href="#6-localstorage跨域可以共享吗，如何解决" class="headerlink" title="6. localstorage跨域可以共享吗，如何解决"></a>6. localstorage跨域可以共享吗，如何解决</h5><h5 id="7-描述url到页面渲染的整个过程"><a href="#7-描述url到页面渲染的整个过程" class="headerlink" title="7. 描述url到页面渲染的整个过程"></a>7. 描述url到页面渲染的整个过程</h5><h5 id="8-https页面引入http资源的解决方式-如何让网站同时兼容http和https"><a href="#8-https页面引入http资源的解决方式-如何让网站同时兼容http和https" class="headerlink" title="8. https页面引入http资源的解决方式/如何让网站同时兼容http和https"></a>8. https页面引入http资源的解决方式/如何让网站同时兼容http和https</h5><h5 id="9-cookie、session、sessionStorage和localStorage的-区别"><a href="#9-cookie、session、sessionStorage和localStorage的-区别" class="headerlink" title="9. cookie、session、sessionStorage和localStorage的 区别"></a>9. cookie、session、sessionStorage和localStorage的 区别</h5><h5 id="10-http-和-https-的区别"><a href="#10-http-和-https-的区别" class="headerlink" title="10. http 和 https 的区别"></a>10. http 和 https 的区别</h5><span id="more"></span><h5 id="11-GET-和-POST-的区别"><a href="#11-GET-和-POST-的区别" class="headerlink" title="11. GET 和 POST 的区别"></a>11. GET 和 POST 的区别</h5><h5 id="12-DNS（Domain-Name-System）域名解析-的原理"><a href="#12-DNS（Domain-Name-System）域名解析-的原理" class="headerlink" title="12. DNS（Domain Name System）域名解析 的原理"></a>12. DNS（Domain Name System）域名解析 的原理</h5><h5 id="13-三次握手和四次挥手"><a href="#13-三次握手和四次挥手" class="headerlink" title="13. 三次握手和四次挥手"></a>13. 三次握手和四次挥手</h5><h5 id="14-http2-0有什么改进"><a href="#14-http2-0有什么改进" class="headerlink" title="14. http2.0有什么改进"></a>14. http2.0有什么改进</h5><h5 id="15-Web-Storage-sessionStorage、localStorage-带来的好处"><a href="#15-Web-Storage-sessionStorage、localStorage-带来的好处" class="headerlink" title="15. Web Storage(sessionStorage、localStorage)带来的好处"></a>15. Web Storage(sessionStorage、localStorage)带来的好处</h5><h5 id="16-如何让前端禁用cookie"><a href="#16-如何让前端禁用cookie" class="headerlink" title="16. 如何让前端禁用cookie"></a>16. 如何让前端禁用cookie</h5><h5 id="17-script标签为什么放后面？引出defer和async区别？"><a href="#17-script标签为什么放后面？引出defer和async区别？" class="headerlink" title="17. script标签为什么放后面？引出defer和async区别？"></a>17. script标签为什么放后面？引出defer和async区别？</h5><h5 id="18-304状态码是怎么样，怎么产生的"><a href="#18-304状态码是怎么样，怎么产生的" class="headerlink" title="18. 304状态码是怎么样，怎么产生的"></a>18. 304状态码是怎么样，怎么产生的</h5><h4 id="二、webpack"><a href="#二、webpack" class="headerlink" title="二、webpack"></a>二、webpack</h4><h5 id="1-publicpath和contentBase的区别"><a href="#1-publicpath和contentBase的区别" class="headerlink" title="1. publicpath和contentBase的区别"></a>1. publicpath和contentBase的区别</h5><h5 id="2-怎么配置css的局部作用域"><a href="#2-怎么配置css的局部作用域" class="headerlink" title="2. 怎么配置css的局部作用域"></a>2. 怎么配置css的局部作用域</h5><h5 id="3-拆包的配置项是什么，chunks分别代表什么"><a href="#3-拆包的配置项是什么，chunks分别代表什么" class="headerlink" title="3. 拆包的配置项是什么，chunks分别代表什么"></a>3. 拆包的配置项是什么，chunks分别代表什么</h5><h5 id="4-webpack的分包机制、代码分割"><a href="#4-webpack的分包机制、代码分割" class="headerlink" title="4. webpack的分包机制、代码分割"></a>4. webpack的分包机制、代码分割</h5><h5 id="5-webpack的loder是怎么解析不同类型的资源的"><a href="#5-webpack的loder是怎么解析不同类型的资源的" class="headerlink" title="5. webpack的loder是怎么解析不同类型的资源的"></a>5. webpack的loder是怎么解析不同类型的资源的</h5><h5 id="6-webpack的devSever"><a href="#6-webpack的devSever" class="headerlink" title="6. webpack的devSever"></a>6. webpack的devSever</h5><h5 id="7-webpack打包速度做过什么优化"><a href="#7-webpack打包速度做过什么优化" class="headerlink" title="7. webpack打包速度做过什么优化"></a>7. webpack打包速度做过什么优化</h5><h5 id="8-如何解决编译慢的问题"><a href="#8-如何解决编译慢的问题" class="headerlink" title="8. 如何解决编译慢的问题"></a>8. 如何解决编译慢的问题</h5><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">计算机网络、webpack系列面试题</summary>
    
    
    
    <category term="面试题" scheme="https://yingliyu.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="面试题" scheme="https://yingliyu.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    <category term="计算机网络" scheme="https://yingliyu.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="webpack" scheme="https://yingliyu.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>单点登录实现</title>
    <link href="https://yingliyu.github.io/2021/05/06/sso/"/>
    <id>https://yingliyu.github.io/2021/05/06/sso/</id>
    <published>2021-05-06T05:14:30.000Z</published>
    <updated>2022-01-19T03:08:56.659Z</updated>
    
    <content type="html"><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>在日常生活中，很多人由于忘记某些网站的登录密码而烦恼，因为大多数用户都要记忆不少于 10 个用户名和相应密码。随着信息化飞速发展，大型企业和政府部门等都开始使用电子系统进行办公，整个办公系统由多个不同的子系统构成，如办公自动化(OA)系统，财务管理系统，档案管理系统，信息查询系统等。如果每个系统都使用独立的登录和验证机制，那么每天工作人员都要登录不同的系统进行办公。用户登录的频繁操作，降低了员工的工作效率，造成工作成本的浪费。而大量的密码和用户名的记忆时间长了也会出现问题，忘记密码或者混淆密码都会造成很大的麻烦。基于以上原因，为用户提供一个畅通的登录通道变得十分重要。</p><p>这时候用户希望我在一个系统登录之后可以默认在它的关联系统（二级域名必须相同）中也是已登录状态，避免繁琐的多次登录。这时候就需要 SSO（Single Sign On）来帮助我们实现。</p><p>单点登录(SingleSign-On，SSO)是一种帮助用户快捷访问网络中多个站点的安全通信技术。单点登录系统基于一种安全的通信协议，该协议通过多个系统之间的用户身份信息的交换来实现单点登录。使用单点登录系统时，用户只需要登录一次，就可以访问多个系统。</p><h5 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h5><blockquote><p>Cookie 作为凭证媒介</p></blockquote><p>众所周知，HTTP 是无状态的协议，这意味着服务器无法确认用户的信息。于是，W3C 就提出了：给每一个用户都发一个通行证，用户访问站点时都要携带通行证，这样服务器就可以从通行证上确认用户的信息，通行证就是 Cookie。</p><p>同样因为 HTTP 协议是无状态的，Session 不能依据 HTTP 连接来判断是否为同一个用户。于是：服务器向客户端发送了一个名为 SESSIONID 的 Cookie，它的值是 Session 的 id 值。其实 Session 是依据 Cookie 来识别是否是同一个用户。</p><blockquote><p>通过页面重定向的方式</p></blockquote><h5 id="逻辑流程图"><a href="#逻辑流程图" class="headerlink" title="逻辑流程图"></a>逻辑流程图</h5><span id="more"></span><p>错误之处欢迎交流指正，感谢~</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">单点登录实现</summary>
    
    
    
    
    <category term="SSO" scheme="https://yingliyu.github.io/tags/SSO/"/>
    
  </entry>
  
  <entry>
    <title>权限管理的原理</title>
    <link href="https://yingliyu.github.io/2021/03/11/rights-mgt/"/>
    <id>https://yingliyu.github.io/2021/03/11/rights-mgt/</id>
    <published>2021-03-11T09:44:30.000Z</published>
    <updated>2022-01-19T03:08:56.659Z</updated>
    
    <content type="html"><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>在一些中后台项目的业务中经常会有给不同的用户看到不同的页面甚至不同的操作权限，这时候权限管理功能就闪亮登场了，用它来给用户赋予不同的角色，给不同的角色设置不同的权限，那么前后端在技术方面具体是如何实现的呢？带着这个问题我们来看下权限管理的流程和实现原理。</p><h5 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h5><blockquote><p>权限管理大致方案就是给角色分配权限，给用户分配角色。根据业务不同要求的颗粒度不同，如果颗粒度仅限于路由级别，实现思路大致如下</p></blockquote><p>首先，前端需要分别定义一套（不需权限所有已登陆用户都可访问）静态路由表和动态路由表，路由元信息中包含这个路由对应的（和后端定义好的）权限名。</p><span id="more"></span><p>然后， 1.跟后端协商好权限的定义规则，其次，从服务端获取含有用户权限信息的菜单列表然后跟前端自己定义的完整的动态路由表进行递归遍历，如果用户有此页面的权限则添加到用户可访问的路由表中，得到用户有权限访问的路由表； 2.在导航前置守卫中做拦截。<code>token</code> 存在且有效的是权限管理的第一步判断，如果 token 不存在，判断该路由是否在白名单中，如果在则<code>next()</code>，如果不在则重定向至登录页，如果 <code>token</code> 存在再判断（全局状态中）该用户是否有权限，如果有 <code>next()</code>，否则再从服务端获取该用户的权限信息，通过步骤 1，将 1 得到的路由表添加<code>router.addRoutes()</code>到路由表中，并更新全局状态中的路由表，然后 <code>next()</code>，页面渲染出来就是该用户有访问权限的菜单/页面。</p><blockquote><p>如果权限管理颗粒度细到每个操作按钮级别，可以使用自定义指令实现。</p></blockquote><p>首先，编写自定义指令，具体思路：能拿到绑定的元素及该操作需要的权限，如果该用户没有此操作的权限则不显示此按钮。然后在模板中使用该指令。</p><h5 id="逻辑流程图"><a href="#逻辑流程图" class="headerlink" title="逻辑流程图"></a>逻辑流程图</h5><p><img src="/2021/03/11/rights-mgt/1.png" alt="流程图"></p><p>错误之处欢迎交流指正，感谢~</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">权限管理</summary>
    
    
    
    
    <category term="-vue - 权限管理" scheme="https://yingliyu.github.io/tags/vue-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>WEB应用中的权限认证</title>
    <link href="https://yingliyu.github.io/2021/01/27/gwt-token/"/>
    <id>https://yingliyu.github.io/2021/01/27/gwt-token/</id>
    <published>2021-01-27T17:25:17.000Z</published>
    <updated>2022-01-19T03:08:56.647Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-传统方案——基于-cookie-session-的解决方案"><a href="#1-传统方案——基于-cookie-session-的解决方案" class="headerlink" title="1.传统方案——基于 cookie/session 的解决方案"></a>1.传统方案——基于 cookie/session 的解决方案</h3><p>首先，浏览器端向服务端发送 login 请求，把用户名和密码都发送过去，服务器验证用户名密码正确，然后就会创建对应的 session 数据并保存在内存或者数据库中。然后，服务器返回一个 HTTP 200 OK 的 response，这个 response 会有个 header 叫 set-Cookie：sessionid=xxx，浏览器拿到这个 response 以后，因为有 set-Cookie 这个 header， 带上唯一的 id sessionid（set-Cookie：sessionid=xxx），它就会把 cookie 保存在浏览器中，下次我们再访问这个需要权限的接口，这时候会自动把 cookie 带上。服务器端就可以使用 cookie 中的信息 sessionid，查看服务器中是否存在这个 session 的数据，如果存在则返回对应的信息，否则返回 401 Not authorized。</p><p>基于 cookie 的身份验证是有状态的，意味着这个验证记录或者会话必须同时保存在服务器端和客户端，服务器要跟踪记录 session 并且存至内存或者数据库，同时前端在 cookie 也要保存这个 sessionid 作为 session 唯一的标识符。这种模式的问题在于扩展性不好。假如只有一台服务器当然没有问题，假如是一个服务器集群，这就要求 session 的数据共享，我们需要每台服务器都读取到这个 session，一种解决方案就是 session 的数据持久化，把数据写到持久层中去，各种服务收到请求以后都向持久层发送数据。这种方案优点是架构清晰，缺点是工程量比较大，另外，持久层如果挂了，那么就单点失败。<br><img width="600px" style="display:block;margin:20px auto;" src="/2021/01/27/gwt-token/1.jpeg"></p><span id="more"></span><!-- ![1](1.jpeg) --><h3 id="2-基于-Token-的解决方案：GWT"><a href="#2-基于-Token-的解决方案：GWT" class="headerlink" title="2.基于 Token 的解决方案：GWT"></a>2.基于 Token 的解决方案：GWT</h3><p>它不同于在服务器保存信息的特点，而是把所有的信息都保存在客户端，之后每次请求都将生成的信息发回到服务器，JWT（JSON WEB TOKEN）就是这种方案的一个代表。</p><p>流程：<br>浏览器向服务器发送登陆请求，把用户名和密码发送过去，服务器验证用户名和密码正确，服务端会使用 JWT 算法生成 token 签名，然后 response 返回 token 到客户端，然后浏览器会将 token 储存到客户端，常见方式 local Storage 或者 session Storage 中，之后每次请求将 token 在 HTTP 请求头中发送给服务器（也可以通过放在 cookie 中自动发送的方式，但是这样不能跨域），服务器拿到信息之后 JWT 反向验证对应的 token 是否正确，如果验证通过就返回 200 OK 并带上相应的信息，如果错误则返回 401 Not authorized。<br>如果用户退出登陆，token 在客户端销毁，和服务器无关。基于 token 的身份验证是没有状态的，服务器不需要记录哪些用户已经登陆或者哪些 JWT 已经处理，每个发送到服务器的请求都会带一个 token，服务器通过 token 检查确认请求的有效性。</p><p>token 是通过特定的加密算法将用户登陆后的一些信息储存在一个加密后的字符串中，服务器凭 token 认定用户的身份，即服务器是无状态的因此非常容易实现拓展。<br><img width="600px" style="display:block;margin:20px auto;" src="/2021/01/27/gwt-token/2.jpeg"></p><!-- ![1](2.jpeg) --><p>登陆之后，刷新浏览器登录状态丢失，持久化方案：</p><!-- ![3](3.jpeg) --><img width="600px" style="display:block;margin:20px auto;" src="/2021/01/27/gwt-token/3.jpeg"><blockquote><p>权限逻辑流程：</p></blockquote> <img width="600px" style="display:block;margin:20px auto;" src="/2021/01/27/gwt-token/4.png"><!-- ![4](4.jpeg) --><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">token</summary>
    
    
    
    <category term="单点登录" scheme="https://yingliyu.github.io/categories/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/"/>
    
    <category term="GWT" scheme="https://yingliyu.github.io/categories/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/GWT/"/>
    
    
    <category term="GWT" scheme="https://yingliyu.github.io/tags/GWT/"/>
    
  </entry>
  
  <entry>
    <title>nginx入门</title>
    <link href="https://yingliyu.github.io/2021/01/22/nginx/"/>
    <id>https://yingliyu.github.io/2021/01/22/nginx/</id>
    <published>2021-01-22T17:41:54.000Z</published>
    <updated>2022-01-19T03:08:56.655Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>nginx 是 web 服务器，由 C 语言开发，基于事件驱动能处理百万级别的 tcp 连接，高度模块化的设计和自由的许可证使得扩展其功能的模块层出不穷，跨平台，可使用当前操作系统特有的一些高效 API 来提高自己的性能，nginx 以性能为王。选择 nginx 的核心理由是处理高并发请求的同时保持高效的服务。<br>Nginx 特点：<br>适合前后端分离开发、保证安全、nginx 非常快、负载均衡</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>环境：MAC OS 系统<br><code>brew install nginx</code></p><p>查看版本号：<br><code>nginx -V</code></p><p>启动：<br><code>nginx</code></p><span id="more"></span><p>关闭：<br><code>nginx -s stop</code></p><p>查看 nginx 相关文件：<br><code>cd /usr/local/etc/nginx</code><br><code>ls</code></p><p>打开 nginx 配置文件：<br><code>code nginx.conf</code><br>局部如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       8080;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        #charset koi8-r;</span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>进入 nginx 静态资源文件的默认路径：<br><code>cd /usr/local/var/www</code></p><p><code>ls</code><br>查看默认静态资源 html 文件<br><code>cat index.html</code></p><h4 id="使用-nginx-部署静态文件"><a href="#使用-nginx-部署静态文件" class="headerlink" title="使用 nginx 部署静态文件"></a>使用 nginx 部署静态文件</h4><p>进入本地项目目录下：<br><code>cd xxx/yourProjectName</code><br><code>ls</code><br><code>cd dist</code><br><code>ls</code></p><p>把打包生成的代码 copy 到/usr/local/var/www 目录<br><code>cp -r * /usr/local/var/www</code></p><p>然后，访问<br>localhost:8080</p><p>流程：<br>用户-&gt;xxx.com-&gt;Nginx-&gt;静态文件</p><p>重新启动 nginx：</p><p><code>nginx -s reload</code></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">nginx入门</summary>
    
    
    
    <category term="Nginx" scheme="https://yingliyu.github.io/categories/Nginx/"/>
    
    
    <category term="nginx" scheme="https://yingliyu.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Vue3的新特性(二)：生命周期</title>
    <link href="https://yingliyu.github.io/2021/01/13/vue3-lifecycle/"/>
    <id>https://yingliyu.github.io/2021/01/13/vue3-lifecycle/</id>
    <published>2021-01-13T14:38:44.000Z</published>
    <updated>2022-01-19T03:08:56.663Z</updated>
    
    <content type="html"><![CDATA[<h3 id="生命周期钩子函数"><a href="#生命周期钩子函数" class="headerlink" title="生命周期钩子函数"></a>生命周期钩子函数</h3><p>vue3 更新了生命周期钩子函数。<br>可以直接通过 import 对应的函数（例如：onMounted）来注册生命周期钩子函数。</p><p>Options API -&gt; Hook inside <code>setup</code></p><ol><li><del>beforeCreate</del> -&gt; use setup()</li><li><del>created</del> -&gt; use setup()</li><li>beforeMount -&gt; onBeforeMount</li><li>mounted -&gt; onMounted</li><li>beforeUpdate -&gt; onBeforeUpdate</li><li>updated -&gt; onUpdated</li><li>beforeUnmount -&gt; onBeforeUnmount</li><li>unmounted -&gt; onUnmounted</li><li>errorCaptured -&gt; onErrorCaptured</li><li>renderTracked -&gt; onRenderTracked（调试用）</li><li>renderTriggered -&gt; onRenderTriggered（调试用）</li></ol><p>因为 setup 是在 beforeCreated 和 created 几乎是同时进行的，所以可以将在这两个生命周期里的代码写在 setup 里面。</p><span id="more"></span><!-- ![life](circle.png) --><img width="600px" style="display:block;margin:20px auto;" src="/2021/01/13/vue3-lifecycle/circle.png"><p>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted, onUpdated, onUnmounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> MyComponent = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;mounted!&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    onUpdated(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;updated!&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    onUnmounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;unmounted!&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://v3.vuejs.org/guide/composition-api-lifecycle-hooks.html">更多内容参考 vue3</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">vue3</summary>
    
    
    
    <category term="VUE" scheme="https://yingliyu.github.io/categories/VUE/"/>
    
    <category term="VUE3" scheme="https://yingliyu.github.io/categories/VUE/VUE3/"/>
    
    <category term="新特性" scheme="https://yingliyu.github.io/categories/VUE/VUE3/%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
    <category term="VUE" scheme="https://yingliyu.github.io/tags/VUE/"/>
    
    <category term="VUE3" scheme="https://yingliyu.github.io/tags/VUE3/"/>
    
  </entry>
  
  <entry>
    <title>Vue3的新特性(三)：setup()、computed()和watch()</title>
    <link href="https://yingliyu.github.io/2021/01/13/vue3-02/"/>
    <id>https://yingliyu.github.io/2021/01/13/vue3-02/</id>
    <published>2021-01-13T14:16:42.000Z</published>
    <updated>2022-01-19T03:08:56.663Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文主要介绍 vue3 新增 Composition API 的一些特性 setup()、computed()和 watch()，Composition API 可以把复杂组件的逻辑变得更为紧凑，使代码有更高复用性和灵活性。</p><h3 id="1-setup"><a href="#1-setup" class="headerlink" title="1. setup()"></a>1. setup()</h3><p><code>setup()</code>是 <code>vue3</code> 中新增特性，在组件 <code>created()</code>生命周期之前执行。<br>因为 <code>setup()</code> 是在组件 <code>created()</code>之前执行的，所以在 <code>setup()</code>内部无法获取 <code>this</code>。</p><p><code>setup(props,context)</code>接收两个参数：<code>props</code>,<code>context</code></p><h5 id="参数一：props"><a href="#参数一：props" class="headerlink" title="参数一：props"></a>参数一：props</h5><p>组件接收的 <code>props</code> 数据可以在 <code>setup()</code>函数内访问到。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="built_in">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(props.title)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>props</code> 具有响应性，不能使用 ES6 解构它，这会使其失去响应性。如果需要解构，可以使用 <code>toRefs()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; title &#125; = toRefs(props)</span><br><span class="line"><span class="built_in">console</span>.log(title.value)</span><br></pre></td></tr></table></figure><p>如果 <code>title</code> 是一个可选的属性，需使用 <code>toRef()</code>,如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; toRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="function"><span class="title">setup</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line"><span class="keyword">const</span> title = toRef(props, <span class="string">&#x27;title&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(title.value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h5 id="参数二：context："><a href="#参数二：context：" class="headerlink" title="参数二：context："></a>参数二：context：</h5><pre><code>`context` 是一个上下文对象，可以通过 context 来访问 Vue 的实力 this。`context` 内部包括三个属性：`attrs`、`slots`、`emit`</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, &#123; attrs, slots, emit &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>context 是一个常规的 js 对象，它不具有响应性可以直接对它解构。但 <code>attrs</code> 和 <code>slots</code> 是有状态的对象，当组件本身更新时它们也会随之更新，这意味着我们应该避免解构它们。</p><h3 id="2-computed"><a href="#2-computed" class="headerlink" title="2. computed()"></a>2. computed()</h3><h5 id="computed-创建只读计算属性"><a href="#computed-创建只读计算属性" class="headerlink" title="computed()创建只读计算属性"></a>computed()创建只读计算属性</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> count = ref(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 创建一个只读性计算属性，依赖于count值</span></span><br><span class="line"><span class="keyword">const</span> plusOne = computed(<span class="function">() =&gt;</span> count.value + <span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(plusOne.value) <span class="comment">// 2</span></span><br><span class="line">plusOne.value++ <span class="comment">// error 该计算属性为只读属性，不可写</span></span><br></pre></td></tr></table></figure><h5 id="computed-创建可读写计算属性"><a href="#computed-创建可读写计算属性" class="headerlink" title="computed()创建可读写计算属性"></a>computed()创建可读写计算属性</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> count = ref(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 创建一个可读写计算属性</span></span><br><span class="line"><span class="keyword">const</span> plusOne = computed(&#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="function">() =&gt;</span> count.value + <span class="number">1</span>,</span><br><span class="line">  <span class="attr">set</span>: <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    count.value = val - <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">plusOne.value = <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(count.value) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h3 id="3-watch"><a href="#3-watch" class="headerlink" title="3. watch()"></a>3. watch()</h3><h5 id="watch-监听单个数据源"><a href="#watch-监听单个数据源" class="headerlink" title="watch()监听单个数据源"></a>watch()监听单个数据源</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听 a getter</span></span><br><span class="line"><span class="keyword">const</span> state = reactive(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span><br><span class="line">watch(</span><br><span class="line">  <span class="function">() =&gt;</span> state.count,</span><br><span class="line">  <span class="function">(<span class="params">count, prevCount</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接监听 a ref</span></span><br><span class="line"><span class="keyword">const</span> count = ref(<span class="number">0</span>)</span><br><span class="line">watch(count, <span class="function">(<span class="params">count, prevCount</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="watch-监听多个数据源"><a href="#watch-监听多个数据源" class="headerlink" title="watch()监听多个数据源"></a>watch()监听多个数据源</h5><p>第一个参数中，要监听的数据源以数组的形式传入。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> firstName = ref(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> lastName = ref(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">watch([firstName, lastName], <span class="function">(<span class="params">newValues, prevValues</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(newValues, prevValues)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">firstName.value = <span class="string">&#x27;John&#x27;</span> <span class="comment">// logs: [&quot;John&quot;,&quot;&quot;] [&quot;&quot;, &quot;&quot;]</span></span><br><span class="line">lastName.value = <span class="string">&#x27;Smith&#x27;</span> <span class="comment">// logs: [&quot;John&quot;, &quot;Smith&quot;] [&quot;John&quot;, &quot;&quot;]</span></span><br></pre></td></tr></table></figure><p>另，当监听一个响应性对象时，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = reactive([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">watch(</span><br><span class="line">  <span class="function">() =&gt;</span> [...numbers],</span><br><span class="line">  <span class="function">(<span class="params">numbers, prevNumbers</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(numbers, prevNumbers)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">numbers.push(<span class="number">5</span>) <span class="comment">// logs: [1,2,3,4,5] [1,2,3,4]</span></span><br></pre></td></tr></table></figure><p>当监听一个复杂对象的属性或者数组时需要传入第三个参数<code>&#123;deep:true&#125;</code>，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">attributes</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">watch(</span><br><span class="line">  <span class="function">() =&gt;</span> state,</span><br><span class="line">  <span class="function">(<span class="params">state, prevState</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;not deep &#x27;</span>, state.attributes.name, prevState.attributes.name)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">watch(</span><br><span class="line">  <span class="function">() =&gt;</span> state,</span><br><span class="line">  <span class="function">(<span class="params">state, prevState</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;deep &#x27;</span>, state.attributes.name, prevState.attributes.name)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">deep</span>: <span class="literal">true</span> &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">state.attributes.name = <span class="string">&#x27;Alex&#x27;</span> <span class="comment">// Logs: &quot;deep &quot; &quot;Alex&quot; &quot;Alex&quot;</span></span><br></pre></td></tr></table></figure><p>监听一个响应式对象或者数组时总是返回当前数据变化前后的引用，为了真正的监听复杂对象或数组，需要进行一次深拷贝。<br>官方推荐方案：<a href="!https://lodash.com/docs/4.17.15#cloneDeep">lodash.cloneDeep</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"><span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">attributes</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;lemon&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">watch(</span><br><span class="line">  <span class="function">() =&gt;</span> _.cloneDeep(state),</span><br><span class="line">  <span class="function">(<span class="params">state, prevState</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(state.attributes.name, prevState.attributes.name)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">state.attributes.name = <span class="string">&#x27;Alex&#x27;</span> <span class="comment">// Logs: &quot;Alex&quot; &quot;lemon&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>更多详细用法请参考<a href="!https://v3.vuejs.org/guide/reactivity-computed-watchers.html#watching-reactive-objects">Composition API——watch</a></p></blockquote><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">vue3</summary>
    
    
    
    <category term="VUE" scheme="https://yingliyu.github.io/categories/VUE/"/>
    
    <category term="VUE3" scheme="https://yingliyu.github.io/categories/VUE/VUE3/"/>
    
    <category term="新特性" scheme="https://yingliyu.github.io/categories/VUE/VUE3/%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
    <category term="VUE" scheme="https://yingliyu.github.io/tags/VUE/"/>
    
    <category term="VUE3" scheme="https://yingliyu.github.io/tags/VUE3/"/>
    
  </entry>
  
  <entry>
    <title>Vue3 的新特性(一):ref()、reactive()、toRef() 和 toRefs()</title>
    <link href="https://yingliyu.github.io/2021/01/12/vue3-01/"/>
    <id>https://yingliyu.github.io/2021/01/12/vue3-01/</id>
    <published>2021-01-12T15:28:58.000Z</published>
    <updated>2022-01-19T03:08:56.663Z</updated>
    
    <content type="html"><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>vue3 更好的支持了 <code>Typescript</code>，新增了 <code>CompositionAPI</code>，而且在性能方面有很大提升</p><ol><li>打包大小减少 41%</li><li>初次渲染快 55%，更新快 133%</li><li>内存使用减少 54%</li></ol><p>这篇文章主要来学习以下 vue3 的以下新特性：<code>ref()</code>、<code>reactive()</code>、<code>toRef()</code>、<code>toRefs()</code></p><h5 id="版本要求"><a href="#版本要求" class="headerlink" title="版本要求"></a>版本要求</h5><p>对于 Vue3，node 版本 10+、Vue Cli v4.5+的版本可用。已经安装过<code>@vue/cli</code>需更新至最新版本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn <span class="built_in">global</span> add @vue/cli</span><br><span class="line">#or</span><br><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><h5 id="配置-Vue3-开发环境"><a href="#配置-Vue3-开发环境" class="headerlink" title="配置 Vue3 开发环境"></a>配置 Vue3 开发环境</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create [project-name]</span><br></pre></td></tr></table></figure><span id="more"></span><p><code>？Please pick a preset: </code><br>Manually select feature(手动选择一些特性)<br>然后，是一系列可插拔的支持，囊括各种功能，充分体现了渐进式的特点<br><code>？Check the feature needed for your project:</code><br>Choose vue version<br>Babel<br>Typescript<br>Linter/Formatter(代码格式检查工具)<br><code>？Choose a version of vue.js that you want to start the project with: </code><br>3.X(Preview)<br><code>? Use class-style component snytax?</code>（类类型的组件）<br>No<br><code>？Use Babel alongSide Typescript？</code><br>No<br><code>？Pick a linter / formatter config:</code><br>Eslint with error prevention only<br><code>? Pick additional lint features:</code><br>Lint on save<br><code>? Where do you prefer placing config for Babel,Eslint ,etc.?</code><br>In dedicated config files<br><code>? Save this as a preset for future projects?</code><br>No(根据自己的需要选择)</p><p>OR 使用 UI 界面：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure><p>进入图文界面进行选择配置</p><h5 id="vue2-与-vue3-的响应式实现"><a href="#vue2-与-vue3-的响应式实现" class="headerlink" title="vue2 与 vue3 的响应式实现"></a>vue2 与 vue3 的响应式实现</h5><p>我们知道，vue2 中的 data 返回的是一个响应式对象，其原理是通过 <code>Object.defineProperty()</code>实现的，但是会有一些弊端，比如它对于对象上新增的属性无能为力；对于数组则需要拦截它的原型方法来实现响应式。<br>那么，vue3 踏着五彩祥云就来了。vue3 是使用 ES6 中的新特性 Proxy 来实现响应式。先来对 <code>Proxy</code> 进行一下预热，<br><code>Proxy</code> 对象用于定义基本操作的自定义行为（如：属性查找、赋值、枚举、函数调用等）。<br><code>Proxy</code> 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。<br>更多内容可以参考 <a href="https://es6.ruanyifeng.com/#docs/proxy">ES6 Proxy</a></p><h5 id="ref-和-reactive"><a href="#ref-和-reactive" class="headerlink" title="ref() 和 reactive()"></a>ref() 和 reactive()</h5><blockquote><p><code>ref()</code> 函数接收一个基本数据类型的参数同时返回一个基于该值的响应性对象，该对象内部有且仅有一个属性 value，该对象中的值一旦被改变和访问就会被跟踪到，通过修改 <code>refData.value</code> 的值，可以触发模版的重新的渲染，显示最新的值。<code>reactive</code> 则是修改 <code>state.reactiveField</code> 的值。</p></blockquote><blockquote><p><code>reactive()</code> 函数接收一个复杂数据类型的数据（对象或数组）作为参数，并返回一个响应式代理对象。（响应式数据即当数据发生变化时 UI 也会自动更新）</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; temp &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; user.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; user.age &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increase&quot;</span>&gt;</span>click me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> temp = ref(<span class="number">0</span>)</span><br><span class="line">    temp.value = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> user = reactive(&#123; <span class="attr">name</span>: <span class="string">&#x27;lemon&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(temp)</span><br><span class="line">    <span class="built_in">console</span>.log(temp.value) <span class="comment">// hello</span></span><br><span class="line">    <span class="built_in">console</span>.log(user) <span class="comment">// Proxy &#123;name:&#x27;lemon&#x27;,age:20&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> increase = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      user.age++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123; temp, user, increase &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>reactive()</code> 函数可以代理一个复杂数据类型比如：对象、数组，但不能代理基本类型值，例如字符串、数字、boolean 等，这是 js 语言的限制，因此我们需要使用 <code>ref()</code> 函数来间接对基本类型值进行处理。<code>ref</code>的本质还是<code>reactive</code>系统会自动根据<code>ref()</code>函数的入参将其转换成<code>ref(x)</code>即<code>reactive(&#123;value:x&#125;)</code></p><blockquote><p>综上，<code>ref(user.name)</code> 就相当于 <code>ref(&#39;lemon&#39;)</code> 也相当于 <code>reactive(&#123;value:&#39;lemon&#39;&#125;)</code></p></blockquote><p><code>注意：</code></p><ol><li>在 vue 模板中使用 <code>ref</code> 的值不需要通过 <code>value</code> 属性获取（vue 会自动给 ref 的值加上.value）</li><li>在 js 中使用 <code>ref</code> 的值要通过<code>.value</code>获取</li></ol><h5 id="toRef-和-toRefs"><a href="#toRef-和-toRefs" class="headerlink" title="toRef() 和 toRefs()"></a>toRef() 和 toRefs()</h5><blockquote><p><code>toRef</code>是将个对象 A 中的某个属性 x 转换为响应式数据，其接收两个参数，第一个参数为对象 A，第二个参数为对象中的某个属性名 x。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; toRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">&#x27;lemon&#x27;</span>, <span class="attr">age</span>: <span class="number">3</span> &#125;</span><br><span class="line">    <span class="keyword">const</span> userRef = toRef(user, <span class="string">&#x27;age&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123; userRef &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里你应该会有一个疑问，<code>toRef()</code>和<code>ref()</code> 都是创建响应式数据的函数，它们之间有什么不同呢？我们来测试一下。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    响应式数值ref0：</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add0&quot;</span>&gt;</span>add &#123;&#123; state0 &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    响应式对象ref1：</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add1&quot;</span>&gt;</span>Add &#123;&#123; state1 &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    响应式对象toRef2：</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add2&quot;</span>&gt;</span>Add &#123;&#123; state2 &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, toRef &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> temp = &#123; <span class="attr">count</span>: <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">const</span> temp0 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> state0 = ref(temp0);</span><br><span class="line">    <span class="keyword">const</span> state1 = ref(temp.count);</span><br><span class="line">    <span class="keyword">const</span> state2 = toRef(temp, <span class="string">&quot;count&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> add0 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      state0.value++;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;原始值：&quot;</span>, temp0); <span class="comment">//原始值：1</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;响应式数据对象ref：&quot;</span>, state0.value); <span class="comment">//响应式数值ref：2</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> add1 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      state1.value++;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;原始值：&quot;</span>, temp); <span class="comment">//原始值：1</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;响应式数据对象ref：&quot;</span>, state1.value); <span class="comment">//响应式对象ref：2</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> add2 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      state2.value++;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;原始值：&quot;</span>, temp); <span class="comment">// 原始值：2</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;响应式数据对象toRef：&quot;</span>, state2.value); <span class="comment">//响应式对象toRef：2</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123; state0, state1, state2, add0, add1, add2 &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>综上，ref()和 refs()有以下区别：</p></blockquote><ol><li>参数不同：<code>ref()</code>接收一个 js 基本数据类型的参数；<code>toRef()</code>接收两个参数，第一个为对象，第二个为对象中的某个属性；</li><li>原理不同：<code>ref()</code>是对原数据的一个深拷贝，当其值改变时不会影响到原始值；<code>toRef()</code>是对原数据的一个引用，当值改变时会影响到原始值；</li><li>响应性不同：<code>ref()</code>创建的数据会触发 vue 模版更新；<code>toRef()</code>创建的响应式数据并不会触发 vue 模版更新，所以<code>toRef()</code>的本质是引用，与原始数据有关联。</li></ol><blockquote><p><code>toRefs()</code>接收一个对象作为参数，并遍历对象身上的所有属性，然后逐个调用<code>toRef()</code>执行。以此，将响应式对象转化为普通对象，便于在模版中可以直接使用属性。</p></blockquote><p>当我们希望对象的多个属性都变成响应式数据，并且要求响应式数据和原始数据相关联，并且更新响应式数据时不更新界面，这时候<code>toRefs()</code>就派上用场了，它用于批量设置多个响应式数据。</p><p>那么，到这里又有疑问了，通过上面的学习我们知道使用 reactive()创建的数据已经具有响应式了，为什么还要再 toRefs()呢？<br>往下看，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个响应式对象state</span></span><br><span class="line">    <span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">      <span class="attr">foo</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">bar</span>: <span class="number">2</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> stateAsRefs = toRefs(state) <span class="comment">// 将响应式的对象变为普通对象结构</span></span><br><span class="line">    <span class="comment">// The ref and the original property is &quot;linked&quot;</span></span><br><span class="line">    state.foo++</span><br><span class="line">    <span class="built_in">console</span>.log(stateAsRefs.foo.value) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">    stateAsRefs.foo.value++</span><br><span class="line">    <span class="built_in">console</span>.log(state.foo) <span class="comment">// 3</span></span><br><span class="line">    <span class="keyword">return</span> &#123; temp, userRefs, ...stateAsRefs, add &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于以上代码，toRefs()将响应式的对象 state 变为普通对象 stateAsRefs 后，return 时使用 ES6 的扩展运算符，在模版中可以直接使用其内部属性，且仍具有响应性（ 对响应式对象 state 使用扩展运算符后，其内部属性就失去了响应性 ）</p><p>官方案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useFeatureX</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">bar</span>: <span class="number">2</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// logic operating on state</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// convert to refs when returning（返回时转为refs）</span></span><br><span class="line">  <span class="keyword">return</span> toRefs(state)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// can destructure without losing reactivity（可以解构而不失去其响应性）</span></span><br><span class="line">    <span class="keyword">const</span> &#123; foo, bar &#125; = useFeatureX()</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      foo,</span><br><span class="line">      bar</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对响应式对象进行 toRefs 后，可以对其进行解构方便 vue 模版使用，但是不会使其失去响应性。</p></blockquote><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>参考：<a href="https://es6.ruanyifeng.com/#docs/proxy">ES6</a> 、 <a href="https://v3.vuejs.org/api/refs-api.html#torefs">Vue3</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">vue3</summary>
    
    
    
    <category term="VUE" scheme="https://yingliyu.github.io/categories/VUE/"/>
    
    <category term="VUE3" scheme="https://yingliyu.github.io/categories/VUE/VUE3/"/>
    
    <category term="新特性" scheme="https://yingliyu.github.io/categories/VUE/VUE3/%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
    <category term="VUE" scheme="https://yingliyu.github.io/tags/VUE/"/>
    
    <category term="VUE3" scheme="https://yingliyu.github.io/tags/VUE3/"/>
    
  </entry>
  
  <entry>
    <title>React-ts-d3 项目实践</title>
    <link href="https://yingliyu.github.io/2020/11/18/react-ts-d3/"/>
    <id>https://yingliyu.github.io/2020/11/18/react-ts-d3/</id>
    <published>2020-11-18T14:33:38.000Z</published>
    <updated>2022-01-19T03:08:56.655Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>自从涉足了知识图谱项目便一发不可收拾，本次项目中也是涉及到一些可视化和知识图谱的元素，对我来说虽不是新的技术领域但是这次改用了 <code>ts</code>，所以还是踩了不少的坑呢，主要集中在 <code>d3</code> 和 <code>ts</code> 结合部分。</p><p>其次在项目评审期间，前端主要问题还有自适应方面的问题，最终敲定使用断点媒体查询的方式实现。</p><p>近期 <code>bug</code> 修复进入尾声，时隔数日还是复盘一下，毕竟我的脑瓜子还是一如既往的健忘，刚刚被问及一个项目是不是我做的，我记得是我做的，但是具体内容什么的我已经无力想起了，不过看到我还是认识的。言归正传，下面就来回顾一下踩坑流水帐。</p><h3 id="1-Echarts-Graph"><a href="#1-Echarts-Graph" class="headerlink" title="1. Echarts Graph"></a>1. Echarts Graph</h3><p>如果使用过 <code>echart</code> 系列图表，那么 <code>graph</code> 关系图还是相对比较容易上手的，毕竟是高度可定制化套路一样同类型属性名也一样。</p><span id="more"></span><p>但是使用过程中我还是踩到了坑：由于数据返回节点的 <code>name</code> 字符比较长，为了美观前端显示的时候要做个性化样式设计包括换行超出字符省略等等，我天真又粗暴的直接在 <code>name</code> 上动刀了，虽然我知道 <code>name</code> 不能有重复，但我还是撞了南墙，因为部分 <code>name</code> 做个性化处理之后显示的剩余那部分字符相同，所以触碰了 <code>name</code> 不能重复的红线。<br>解决：<code>name</code> 拿来原封不动，在 <code>label</code> 上做 <code>formatter</code> 处理。</p><blockquote><p>注意：每一个节点的 <code>name</code> 要唯一，如果有重复的 <code>name</code> 就会报如下错，类似于遍历时的 <code>key</code> 值是唯一的。</p></blockquote><p><img src="/2020/11/18/react-ts-d3/pic1.png" alt="image1"></p><h3 id="2-词云-echarts-wordcloud"><a href="#2-词云-echarts-wordcloud" class="headerlink" title="2. 词云 echarts-wordcloud"></a>2. 词云 echarts-wordcloud</h3><p>这是一个基于 <code>echarts</code> 封装的第三方库，使用中没有踩到值得一提的坑。<br>部分代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">interface IWordCloud &#123;</span><br><span class="line">    <span class="attr">list</span>: ICommonProps[];</span><br><span class="line">    width: number;</span><br><span class="line">    height: number;</span><br><span class="line">    fontSizeRange: number[];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> WordCloud: React.FC&lt;IWordCloud&gt; = <span class="function">(<span class="params">props: IWordCloud</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; list, width, height, fontSizeRange &#125; = props;</span><br><span class="line"></span><br><span class="line">    useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        drawWordCloud();</span><br><span class="line">    &#125;, [list]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> drawWordCloud = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> wordElement = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;wordCloud&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> chart = echarts.init(wordElement <span class="keyword">as</span> HTMLDivElement);</span><br><span class="line">        <span class="keyword">let</span> data = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">in</span> list) &#123;</span><br><span class="line">            data.push(&#123;</span><br><span class="line">                <span class="attr">name</span>: list[index].name,</span><br><span class="line">                <span class="attr">value</span>: <span class="built_in">Math</span>.sqrt(list[index].value)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> maskImage = <span class="keyword">new</span> Image();</span><br><span class="line">        maskImage.src = bg;</span><br><span class="line">        <span class="keyword">let</span> option = &#123;</span><br><span class="line">            <span class="attr">series</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&#x27;wordCloud&#x27;</span>,</span><br><span class="line">                    <span class="attr">left</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">                    <span class="attr">top</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">                    <span class="attr">width</span>: <span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line">                    <span class="attr">height</span>: <span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line">                    <span class="attr">right</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="attr">bottom</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="attr">sizeRange</span>: fontSizeRange, <span class="comment">// 字号</span></span><br><span class="line">                    <span class="attr">rotationRange</span>: [-<span class="number">90</span>, <span class="number">90</span>],</span><br><span class="line">                    <span class="attr">rotationStep</span>: <span class="number">90</span>,</span><br><span class="line">                    <span class="attr">gridSize</span>: fontSizeRange[<span class="number">0</span>] - <span class="number">2</span>,</span><br><span class="line">                    <span class="attr">shape</span>: <span class="string">&#x27;circle&#x27;</span>, <span class="comment">// diamond/triangle/circle/pentagon/star</span></span><br><span class="line">                    <span class="comment">// maskImage: maskImage,</span></span><br><span class="line">                    <span class="attr">textStyle</span>: &#123;</span><br><span class="line">                        <span class="attr">normal</span>: &#123;</span><br><span class="line">                            <span class="comment">// fontFamily: &#x27;微软雅黑&#x27;,</span></span><br><span class="line">                            <span class="comment">// fontWeight: &#x27;normal&#x27;,</span></span><br><span class="line">                            <span class="comment">// Color can be a callback function or a color string</span></span><br><span class="line">                            <span class="attr">color</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                                <span class="comment">// Random color</span></span><br><span class="line">                                <span class="keyword">return</span> WORD_CLOUD_COLORS[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">3</span>)];</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">emphasis</span>: &#123;</span><br><span class="line">                            <span class="attr">shadowBlur</span>: <span class="number">2</span>,</span><br><span class="line">                            <span class="attr">shadowColor</span>: <span class="string">&#x27;#1890ff&#x27;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">data</span>: data</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;;</span><br><span class="line">        chart.setOption(option);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;wordCloud&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">height:</span> <span class="attr">height</span>, <span class="attr">width:</span> <span class="attr">width</span> &#125;&#125; /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>效果图如下：<br><img src="/2020/11/18/react-ts-d3/pic2.png" alt="image"></p><h3 id="3-echarts-legend-个性化细节"><a href="#3-echarts-legend-个性化细节" class="headerlink" title="3.echarts legend 个性化细节"></a>3.echarts legend 个性化细节</h3><p>可能对别人来说是小儿科，只是它是我初次发现的比较符合我项目中需求的点。</p><p>1.<code>legend</code> 图例标记的图形除了定制的哪几种形状还可以设置宽高 <code>itemWidth</code>、<code>itemHeight</code>。 2.<code>legend</code> 文字块的宽定制这样可以是 <code>value</code> 左对齐。 3.<code>legend</code> 也有 <code>tooltip</code>。<br>如下图：<br><img src="/2020/11/18/react-ts-d3/pic3.png" alt="image3"></p><h3 id="4-d3-力导向图——-force"><a href="#4-d3-力导向图——-force" class="headerlink" title="4. d3 力导向图—— force"></a>4. d3 力导向图—— force</h3><p>使用 <code>ts</code> 时部分第三方库的定义的各种类型定位起来还是有点烧脑的。<br>我在使用过程中 drag 函数的范型大概折磨了我一周左右最后在庄哥的帮助下终于解决了。<br><img src="/2020/11/18/react-ts-d3/pic4.png" alt="img4"></p><p>部分代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create a force simulation</span></span><br><span class="line">    <span class="keyword">const</span> initForceSimulation = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> linkForce = d3</span><br><span class="line">                .forceLink&lt;INode, ILink&gt;(linksData)</span><br><span class="line">                .id(<span class="function">(<span class="params">data: INode</span>) =&gt;</span> data.id)</span><br><span class="line">                .distance(<span class="number">200</span>);</span><br><span class="line">            <span class="keyword">const</span> nodeCollision = d3</span><br><span class="line">                .forceCollide()</span><br><span class="line">                .radius(<span class="number">80</span>)</span><br><span class="line">                .iterations(<span class="number">0.5</span>)</span><br><span class="line">                .strength(<span class="number">0.5</span>);</span><br><span class="line">            <span class="keyword">const</span> nodeCharge = d3.forceManyBody().strength(-<span class="number">300</span>).theta(<span class="number">0.01</span>);</span><br><span class="line">            simulationRef.current = d3</span><br><span class="line">                .forceSimulation&lt;INode, ILink&gt;(nodesData)</span><br><span class="line">                .alpha(<span class="number">0.3</span>) <span class="comment">// 活力，渲染之后再自动动多久到达目标位置</span></span><br><span class="line">                .force(<span class="string">&#x27;link&#x27;</span>, linkForce) <span class="comment">// 映射id &amp; 线的长度</span></span><br><span class="line">                .force(<span class="string">&#x27;x&#x27;</span>, d3.forceX())</span><br><span class="line">                .force(<span class="string">&#x27;y&#x27;</span>, d3.forceY())</span><br><span class="line">                .force(<span class="string">&#x27;center&#x27;</span>, d3.forceCenter(svgWidth / <span class="number">2</span>, svgHeight / <span class="number">2</span>))</span><br><span class="line">                .force(<span class="string">&#x27;collision&#x27;</span>, nodeCollision)<span class="comment">// 避免节点相互覆盖</span></span><br><span class="line">                .force(<span class="string">&#x27;charge&#x27;</span>, nodeCharge);<span class="comment">// 节点间相互排斥的电磁力</span></span><br><span class="line"></span><br><span class="line">            simulationRef.current.nodes(nodesData).on(<span class="string">&#x27;tick&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                edges</span><br><span class="line">                    .attr(<span class="string">&#x27;x1&#x27;</span>, <span class="function">(<span class="params">&#123; source &#125;</span>) =&gt;</span> (source <span class="keyword">as</span> INode).x || <span class="number">0</span>)</span><br><span class="line">                    .attr(<span class="string">&#x27;y1&#x27;</span>, <span class="function">(<span class="params">&#123; source &#125;</span>) =&gt;</span> (source <span class="keyword">as</span> INode).y || <span class="number">0</span>)</span><br><span class="line">                    .attr(<span class="string">&#x27;x2&#x27;</span>, <span class="function">(<span class="params">&#123; target &#125;</span>) =&gt;</span> (target <span class="keyword">as</span> INode).x || <span class="number">0</span>)</span><br><span class="line">                    .attr(<span class="string">&#x27;y2&#x27;</span>, <span class="function">(<span class="params">&#123; target &#125;</span>) =&gt;</span> (target <span class="keyword">as</span> INode).y || <span class="number">0</span>);</span><br><span class="line">                nodes.attr(<span class="string">&#x27;transform&#x27;</span>, <span class="function">(<span class="params">data: any</span>) =&gt;</span> <span class="string">`translate(<span class="subst">$&#123;data.x&#125;</span>, <span class="subst">$&#123;data.y&#125;</span>)`</span>);</span><br><span class="line">                edgepaths.attr(</span><br><span class="line">                    <span class="string">&#x27;d&#x27;</span>,</span><br><span class="line">                    <span class="function">(<span class="params">&#123; target, source &#125;</span>) =&gt;</span></span><br><span class="line">                        <span class="string">&#x27;M &#x27;</span> +</span><br><span class="line">                        (source <span class="keyword">as</span> INode).x +</span><br><span class="line">                        <span class="string">&#x27; &#x27;</span> +</span><br><span class="line">                        (source <span class="keyword">as</span> INode).y +</span><br><span class="line">                        <span class="string">&#x27; L &#x27;</span> +</span><br><span class="line">                        (target <span class="keyword">as</span> INode).x +</span><br><span class="line">                        <span class="string">&#x27; &#x27;</span> +</span><br><span class="line">                        (target <span class="keyword">as</span> INode).y</span><br><span class="line">                );</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">const</span> edges = drewLines(); <span class="comment">// draw lines</span></span><br><span class="line">            <span class="keyword">const</span> nodes = drawNodes(); <span class="comment">// draw nodes</span></span><br><span class="line">            <span class="keyword">const</span> edgepaths = drawEdgeLabel(); <span class="comment">// draw relation label</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(error);</span><br><span class="line">            message.error(<span class="string">&#x27;内部错误，&#x27;</span> + <span class="built_in">JSON</span>.stringify(error));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>最后，推荐一个切换全屏库： screenfull。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">react-ts-d3</summary>
    
    
    
    <category term="React" scheme="https://yingliyu.github.io/categories/React/"/>
    
    <category term="Typescript" scheme="https://yingliyu.github.io/categories/React/Typescript/"/>
    
    
    <category term="react" scheme="https://yingliyu.github.io/tags/react/"/>
    
    <category term="typescript" scheme="https://yingliyu.github.io/tags/typescript/"/>
    
    <category term="d3" scheme="https://yingliyu.github.io/tags/d3/"/>
    
  </entry>
  
</feed>
