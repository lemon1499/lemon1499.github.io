<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>默</title>
  
  <subtitle>星辰大海</subtitle>
  <link href="https://yingliyu.github.io/atom.xml" rel="self"/>
  
  <link href="https://yingliyu.github.io/"/>
  <updated>2021-10-17T06:57:20.257Z</updated>
  <id>https://yingliyu.github.io/</id>
  
  <author>
    <name>Lillian</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTML、CSS面试题</title>
    <link href="https://yingliyu.github.io/2021/10/17/interview-question-htmlcss/"/>
    <id>https://yingliyu.github.io/2021/10/17/interview-question-htmlcss/</id>
    <published>2021-10-17T17:42:45.000Z</published>
    <updated>2021-10-17T06:57:20.257Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-盒模型的两种标准？如何相互转化"><a href="#1-盒模型的两种标准？如何相互转化" class="headerlink" title="1. 盒模型的两种标准？如何相互转化"></a>1. 盒模型的两种标准？如何相互转化</h5><h5 id="2-BFC"><a href="#2-BFC" class="headerlink" title="2. BFC"></a>2. BFC</h5><h5 id="3-伪类的伪元素用法与区别"><a href="#3-伪类的伪元素用法与区别" class="headerlink" title="3. 伪类的伪元素用法与区别"></a>3. 伪类的伪元素用法与区别</h5><h5 id="4-div宽度为100vw-设置宽高固定比为10-1-怎么设置"><a href="#4-div宽度为100vw-设置宽高固定比为10-1-怎么设置" class="headerlink" title="4. div宽度为100vw,设置宽高固定比为10:1,怎么设置"></a>4. div宽度为100vw,设置宽高固定比为10:1,怎么设置</h5><h5 id="5-Flex-1完整写法，分别代表什么意思"><a href="#5-Flex-1完整写法，分别代表什么意思" class="headerlink" title="5. Flex:1完整写法，分别代表什么意思"></a>5. Flex:1完整写法，分别代表什么意思</h5><h5 id="6-flex的实现原理"><a href="#6-flex的实现原理" class="headerlink" title="6. flex的实现原理"></a>6. flex的实现原理</h5><h5 id="7-flex垂直居中兼容ie"><a href="#7-flex垂直居中兼容ie" class="headerlink" title="7. flex垂直居中兼容ie"></a>7. flex垂直居中兼容ie</h5><h5 id="8-rem的使用原理"><a href="#8-rem的使用原理" class="headerlink" title="8. rem的使用原理"></a>8. rem的使用原理</h5><h5 id="9-移动端300毫秒延迟，怎么解决的"><a href="#9-移动端300毫秒延迟，怎么解决的" class="headerlink" title="9. 移动端300毫秒延迟，怎么解决的"></a>9. 移动端300毫秒延迟，怎么解决的</h5><h5 id="10-回流和重汇"><a href="#10-回流和重汇" class="headerlink" title="10. 回流和重汇"></a>10. 回流和重汇</h5><span id="more"></span><h5 id="11-浏览器最小字体，如何实现10px字体"><a href="#11-浏览器最小字体，如何实现10px字体" class="headerlink" title="11. 浏览器最小字体，如何实现10px字体"></a>11. 浏览器最小字体，如何实现10px字体</h5><h5 id="12-解决移动端1px边框过粗的问题"><a href="#12-解决移动端1px边框过粗的问题" class="headerlink" title="12. 解决移动端1px边框过粗的问题"></a>12. 解决移动端1px边框过粗的问题</h5><h5 id="13-渐进增强和优雅降级"><a href="#13-渐进增强和优雅降级" class="headerlink" title="13. 渐进增强和优雅降级"></a>13. 渐进增强和优雅降级</h5><h5 id="14-sass和less的用法和区别"><a href="#14-sass和less的用法和区别" class="headerlink" title="14. sass和less的用法和区别"></a>14. sass和less的用法和区别</h5><h5 id="15-类选择器-a-b-a-b-a-gt-b分别是什么意思"><a href="#15-类选择器-a-b-a-b-a-gt-b分别是什么意思" class="headerlink" title="15. 类选择器.a  .b  .a.b   .a&gt;.b分别是什么意思"></a>15. 类选择器.a  .b  .a.b   .a&gt;.b分别是什么意思</h5><h5 id="16-选择器类型和权重"><a href="#16-选择器类型和权重" class="headerlink" title="16. 选择器类型和权重"></a>16. 选择器类型和权重</h5><h5 id="17-p标签里面可以放div吗？为什么？"><a href="#17-p标签里面可以放div吗？为什么？" class="headerlink" title="17. p标签里面可以放div吗？为什么？"></a>17. p标签里面可以放div吗？为什么？</h5><h5 id="18-移动端button不同手机没有垂直居中怎么解决"><a href="#18-移动端button不同手机没有垂直居中怎么解决" class="headerlink" title="18. 移动端button不同手机没有垂直居中怎么解决"></a>18. 移动端button不同手机没有垂直居中怎么解决</h5><h5 id="19-解释png、jpg、gif图片的格式，分别什么时候用？有没有了解过webp"><a href="#19-解释png、jpg、gif图片的格式，分别什么时候用？有没有了解过webp" class="headerlink" title="19. 解释png、jpg、gif图片的格式，分别什么时候用？有没有了解过webp"></a>19. 解释png、jpg、gif图片的格式，分别什么时候用？有没有了解过webp</h5><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">HTML、CSS面试题</summary>
    
    
    
    <category term="面试题" scheme="https://yingliyu.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="面试题" scheme="https://yingliyu.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    <category term="HTML、CSS" scheme="https://yingliyu.github.io/tags/HTML%E3%80%81CSS/"/>
    
  </entry>
  
  <entry>
    <title>JS系列面试题</title>
    <link href="https://yingliyu.github.io/2021/10/17/interview-question-js/"/>
    <id>https://yingliyu.github.io/2021/10/17/interview-question-js/</id>
    <published>2021-10-17T14:12:00.000Z</published>
    <updated>2021-10-17T06:57:20.257Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-数据类型有哪些"><a href="#1-数据类型有哪些" class="headerlink" title="1. 数据类型有哪些"></a>1. 数据类型有哪些</h5><h5 id="2-For-of-和-for-in-的区别"><a href="#2-For-of-和-for-in-的区别" class="headerlink" title="2. For of 和 for in 的区别"></a>2. For of 和 for in 的区别</h5><h5 id="3-Map和-object-的区别有哪些，weakMap了解么，和Map区别是什么"><a href="#3-Map和-object-的区别有哪些，weakMap了解么，和Map区别是什么" class="headerlink" title="3. Map和 object 的区别有哪些，weakMap了解么，和Map区别是什么"></a>3. Map和 object 的区别有哪些，weakMap了解么，和Map区别是什么</h5><h5 id="4-为什么要进行垃圾回收，垃圾回收的原理"><a href="#4-为什么要进行垃圾回收，垃圾回收的原理" class="headerlink" title="4. 为什么要进行垃圾回收，垃圾回收的原理"></a>4. 为什么要进行垃圾回收，垃圾回收的原理</h5><h5 id="5-0-1-0-2等于0-3么，为什么不等，有什么好的处理办法么，10转成二进制怎么表示"><a href="#5-0-1-0-2等于0-3么，为什么不等，有什么好的处理办法么，10转成二进制怎么表示" class="headerlink" title="5. 0.1+0.2等于0.3么，为什么不等，有什么好的处理办法么，10转成二进制怎么表示"></a>5. 0.1+0.2等于0.3么，为什么不等，有什么好的处理办法么，10转成二进制怎么表示</h5><h5 id="6-继承有哪些方式，最有效是哪种，如何实现的"><a href="#6-继承有哪些方式，最有效是哪种，如何实现的" class="headerlink" title="6. 继承有哪些方式，最有效是哪种，如何实现的"></a>6. 继承有哪些方式，最有效是哪种，如何实现的</h5><h5 id="7-Var和let的区别有哪些-浏览器环境下-全局作用域的let和var-声明变量会挂载到-window上么-const的值可以修改么，为什么"><a href="#7-Var和let的区别有哪些-浏览器环境下-全局作用域的let和var-声明变量会挂载到-window上么-const的值可以修改么，为什么" class="headerlink" title="7. Var和let的区别有哪些, 浏览器环境下,全局作用域的let和var 声明变量会挂载到 window上么 ,const的值可以修改么，为什么"></a>7. Var和let的区别有哪些, 浏览器环境下,全局作用域的let和var 声明变量会挂载到 window上么 ,const的值可以修改么，为什么</h5><h5 id="8-Object-defineProperty的作用是什么，和proxy的区别"><a href="#8-Object-defineProperty的作用是什么，和proxy的区别" class="headerlink" title="8. Object.defineProperty的作用是什么，和proxy的区别"></a>8. Object.defineProperty的作用是什么，和proxy的区别</h5><h5 id="9-reduce用法"><a href="#9-reduce用法" class="headerlink" title="9. reduce用法"></a>9. reduce用法</h5><h5 id="10-防抖和节流使用场景"><a href="#10-防抖和节流使用场景" class="headerlink" title="10. 防抖和节流使用场景"></a>10. 防抖和节流使用场景</h5><span id="more"></span><h5 id="11-深拷贝"><a href="#11-深拷贝" class="headerlink" title="11. 深拷贝"></a>11. 深拷贝</h5><h5 id="12-javaScript-的事件循环（event-loop）"><a href="#12-javaScript-的事件循环（event-loop）" class="headerlink" title="12. javaScript 的事件循环（event loop）"></a>12. javaScript 的事件循环（event loop）</h5><h5 id="13-渲染几万条数据如何优化不卡住页面"><a href="#13-渲染几万条数据如何优化不卡住页面" class="headerlink" title="13. 渲染几万条数据如何优化不卡住页面"></a>13. 渲染几万条数据如何优化不卡住页面</h5><h5 id="14-普通函数和箭头函数的区别"><a href="#14-普通函数和箭头函数的区别" class="headerlink" title="14. 普通函数和箭头函数的区别"></a>14. 普通函数和箭头函数的区别</h5><h5 id="15-原型链"><a href="#15-原型链" class="headerlink" title="15. 原型链"></a>15. 原型链</h5><h5 id="16-js事件模型"><a href="#16-js事件模型" class="headerlink" title="16. js事件模型"></a>16. js事件模型</h5><h5 id="17-函数式编程理解"><a href="#17-函数式编程理解" class="headerlink" title="17. 函数式编程理解"></a>17. 函数式编程理解</h5><h5 id="18-闭包导致的内存泄漏怎么解决"><a href="#18-闭包导致的内存泄漏怎么解决" class="headerlink" title="18. 闭包导致的内存泄漏怎么解决"></a>18. 闭包导致的内存泄漏怎么解决</h5><h5 id="19-JSONP的原理"><a href="#19-JSONP的原理" class="headerlink" title="19. JSONP的原理"></a>19. JSONP的原理</h5><h5 id="20-promise为什么可以链式调用"><a href="#20-promise为什么可以链式调用" class="headerlink" title="20. promise为什么可以链式调用"></a>20. promise为什么可以链式调用</h5><h5 id="21-promise中resolve之后再reject，最终是什么状态"><a href="#21-promise中resolve之后再reject，最终是什么状态" class="headerlink" title="21. promise中resolve之后再reject，最终是什么状态"></a>21. promise中resolve之后再reject，最终是什么状态</h5><h5 id="22-跨域有什么解决方法？json-stringfy有什么类型不能用"><a href="#22-跨域有什么解决方法？json-stringfy有什么类型不能用" class="headerlink" title="22. 跨域有什么解决方法？json.stringfy有什么类型不能用"></a>22. 跨域有什么解决方法？json.stringfy有什么类型不能用</h5><h5 id="23-（es6）class继承"><a href="#23-（es6）class继承" class="headerlink" title="23. （es6）class继承"></a>23. （es6）class继承</h5><h5 id="24-（ts）什么是范型"><a href="#24-（ts）什么是范型" class="headerlink" title="24. （ts）什么是范型"></a>24. （ts）什么是范型</h5><h5 id="25-对柯里化函数的理解"><a href="#25-对柯里化函数的理解" class="headerlink" title="25. 对柯里化函数的理解"></a>25. 对柯里化函数的理解</h5><h5 id="26-面向对象特性"><a href="#26-面向对象特性" class="headerlink" title="26. 面向对象特性"></a>26. 面向对象特性</h5><h5 id="27-如何实现一个new"><a href="#27-如何实现一个new" class="headerlink" title="27. 如何实现一个new"></a>27. 如何实现一个new</h5><h5 id="28-new-这个关键字干了什么"><a href="#28-new-这个关键字干了什么" class="headerlink" title="28. new 这个关键字干了什么"></a>28. new 这个关键字干了什么</h5><h5 id="29-call-apply-bind-的区别"><a href="#29-call-apply-bind-的区别" class="headerlink" title="29. call, apply, bind 的区别"></a>29. call, apply, bind 的区别</h5><h5 id="30-强缓存，协商缓存"><a href="#30-强缓存，协商缓存" class="headerlink" title="30. 强缓存，协商缓存"></a>30. 强缓存，协商缓存</h5><h5 id="31-阻止冒泡，阻止事件捕获"><a href="#31-阻止冒泡，阻止事件捕获" class="headerlink" title="31. 阻止冒泡，阻止事件捕获"></a>31. 阻止冒泡，阻止事件捕获</h5><h5 id="32-高阶函数HOF"><a href="#32-高阶函数HOF" class="headerlink" title="32. 高阶函数HOF"></a>32. 高阶函数HOF</h5><h5 id="33-ES6新特性用过哪些"><a href="#33-ES6新特性用过哪些" class="headerlink" title="33. ES6新特性用过哪些"></a>33. ES6新特性用过哪些</h5><h5 id="34-如何判断是否是对象和数组"><a href="#34-如何判断是否是对象和数组" class="headerlink" title="34. 如何判断是否是对象和数组"></a>34. 如何判断是否是对象和数组</h5><h5 id="35-怎样同步调用接口"><a href="#35-怎样同步调用接口" class="headerlink" title="35. 怎样同步调用接口"></a>35. 怎样同步调用接口</h5><h5 id="36-新api：-pushState、bom"><a href="#36-新api：-pushState、bom" class="headerlink" title="36. 新api： pushState、bom"></a>36. 新api： pushState、bom</h5><h5 id="37-websocket与轮询区别"><a href="#37-websocket与轮询区别" class="headerlink" title="37. websocket与轮询区别"></a>37. websocket与轮询区别</h5><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">JS系列面试题</summary>
    
    
    
    <category term="面试题" scheme="https://yingliyu.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="面试题" scheme="https://yingliyu.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    <category term="JS" scheme="https://yingliyu.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>VUE系列面试题</title>
    <link href="https://yingliyu.github.io/2021/10/17/interview-question-vue/"/>
    <id>https://yingliyu.github.io/2021/10/17/interview-question-vue/</id>
    <published>2021-10-17T13:51:18.000Z</published>
    <updated>2021-10-17T06:57:20.257Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-vue双向绑定的原理"><a href="#1-vue双向绑定的原理" class="headerlink" title="1. vue双向绑定的原理"></a>1. vue双向绑定的原理</h5><h5 id="2-vue通信方式"><a href="#2-vue通信方式" class="headerlink" title="2. vue通信方式"></a>2. vue通信方式</h5><h5 id="3-组件中的data用箭头函数行不行"><a href="#3-组件中的data用箭头函数行不行" class="headerlink" title="3. 组件中的data用箭头函数行不行"></a>3. 组件中的data用箭头函数行不行</h5><h5 id="4-vue生命周期"><a href="#4-vue生命周期" class="headerlink" title="4. vue生命周期"></a>4. vue生命周期</h5><h5 id="5-vue的keep-alive"><a href="#5-vue的keep-alive" class="headerlink" title="5. vue的keep-alive"></a>5. vue的keep-alive</h5><h5 id="6-vue与react有什么相同点-不同点"><a href="#6-vue与react有什么相同点-不同点" class="headerlink" title="6. vue与react有什么相同点/不同点"></a>6. vue与react有什么相同点/不同点</h5><h5 id="7-vue的-listeners"><a href="#7-vue的-listeners" class="headerlink" title="7. vue的 $listeners"></a>7. vue的 $listeners</h5><h5 id="8-vue修饰符-sync"><a href="#8-vue修饰符-sync" class="headerlink" title="8. vue修饰符.sync"></a>8. vue修饰符.sync</h5><h5 id="9-vue的渲染是异步还是同步，为什么"><a href="#9-vue的渲染是异步还是同步，为什么" class="headerlink" title="9. vue的渲染是异步还是同步，为什么"></a>9. vue的渲染是异步还是同步，为什么</h5><h5 id="10-vue的nextTick的用法及场景"><a href="#10-vue的nextTick的用法及场景" class="headerlink" title="10. vue的nextTick的用法及场景"></a>10. vue的nextTick的用法及场景</h5><span id="more"></span><h5 id="11-vue有render吗"><a href="#11-vue有render吗" class="headerlink" title="11. vue有render吗"></a>11. vue有render吗</h5><h5 id="12-v-model做了什么"><a href="#12-v-model做了什么" class="headerlink" title="12. v-model做了什么"></a>12. v-model做了什么</h5><h5 id="13-首页速度加载怎么优化"><a href="#13-首页速度加载怎么优化" class="headerlink" title="13. 首页速度加载怎么优化"></a>13. 首页速度加载怎么优化</h5><h5 id="14-object-defineProperty的弊端怎么解决"><a href="#14-object-defineProperty的弊端怎么解决" class="headerlink" title="14. object.defineProperty的弊端怎么解决"></a>14. object.defineProperty的弊端怎么解决</h5><h5 id="15-vue父子组件的生命周期执行顺序"><a href="#15-vue父子组件的生命周期执行顺序" class="headerlink" title="15. vue父子组件的生命周期执行顺序"></a>15. vue父子组件的生命周期执行顺序</h5><h5 id="16-虚拟DOM"><a href="#16-虚拟DOM" class="headerlink" title="16. 虚拟DOM"></a>16. 虚拟DOM</h5><h5 id="17-vue的设计模式"><a href="#17-vue的设计模式" class="headerlink" title="17. vue的设计模式"></a>17. vue的设计模式</h5><h5 id="18-slot-插槽"><a href="#18-slot-插槽" class="headerlink" title="18. slot 插槽"></a>18. slot 插槽</h5><h5 id="19-指令的封装"><a href="#19-指令的封装" class="headerlink" title="19. 指令的封装"></a>19. 指令的封装</h5><h5 id="20-过滤器的封装"><a href="#20-过滤器的封装" class="headerlink" title="20. 过滤器的封装"></a>20. 过滤器的封装</h5><h5 id="21-diff算法的理解"><a href="#21-diff算法的理解" class="headerlink" title="21. diff算法的理解"></a>21. diff算法的理解</h5><h5 id="22-为什么key不能用下标"><a href="#22-为什么key不能用下标" class="headerlink" title="22. 为什么key不能用下标"></a>22. 为什么key不能用下标</h5><h5 id="23-wacth与computed的区别"><a href="#23-wacth与computed的区别" class="headerlink" title="23. wacth与computed的区别"></a>23. wacth与computed的区别</h5><h5 id="24-实现一个v-model"><a href="#24-实现一个v-model" class="headerlink" title="24. 实现一个v-model"></a>24. 实现一个v-model</h5><h5 id="25-MVVM的理解"><a href="#25-MVVM的理解" class="headerlink" title="25. MVVM的理解"></a>25. MVVM的理解</h5><h5 id="26-全局组件如何引入"><a href="#26-全局组件如何引入" class="headerlink" title="26. 全局组件如何引入"></a>26. 全局组件如何引入</h5><h5 id="27-vuex的使用？引出mutation和action区别？"><a href="#27-vuex的使用？引出mutation和action区别？" class="headerlink" title="27. vuex的使用？引出mutation和action区别？"></a>27. vuex的使用？引出mutation和action区别？</h5><h5 id="28-Vuex整个触发过程（actions，state，view）"><a href="#28-Vuex整个触发过程（actions，state，view）" class="headerlink" title="28. Vuex整个触发过程（actions，state，view）"></a>28. Vuex整个触发过程（actions，state，view）</h5><h5 id="29-vue-router中两种模式的区别？解释原理"><a href="#29-vue-router中两种模式的区别？解释原理" class="headerlink" title="29. vue router中两种模式的区别？解释原理"></a>29. vue router中两种模式的区别？解释原理</h5><h5 id="30-new-Router分别时hush和history时base有什么区别"><a href="#30-new-Router分别时hush和history时base有什么区别" class="headerlink" title="30. new Router分别时hush和history时base有什么区别"></a>30. new Router分别时hush和history时base有什么区别</h5><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">VUE面试题</summary>
    
    
    
    <category term="面试题" scheme="https://yingliyu.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="面试题" scheme="https://yingliyu.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    <category term="VUE" scheme="https://yingliyu.github.io/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>Hexo更换主题出现空白index.html</title>
    <link href="https://yingliyu.github.io/2021/09/26/hexo-upgrade/"/>
    <id>https://yingliyu.github.io/2021/09/26/hexo-upgrade/</id>
    <published>2021-09-26T15:32:00.000Z</published>
    <updated>2021-10-17T06:57:20.257Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>搭建博客很久了，之前用的<code>yilia</code>主题很喜欢，最近又”移情别恋”上了 <code>ayer</code> 这种简单有点技术控的风格主题，又开始折腾一番。下面记录一下我的折腾轨迹…</p><p>版本：<br><code>hexo: 4.2.1</code><br><code>hexo-cli: 3.1.0</code><br><code>node: 12.13.0</code></p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>更换主题</p><span id="more"></span><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>开始安装新主题并使用</p><h6 id="1-安装主题"><a href="#1-安装主题" class="headerlink" title="1.安装主题"></a>1.安装主题</h6><p>hexo-theme-ayer 主题对 hexo 版本&gt;=5.0 和&lt;5.0 有两种不同的安装方法，因为我的 hexo&lt;5.0 采用&lt;5.0 的安装方法：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> hexo &lt; <span class="number">5.0</span></span><br><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/Shen-Yu/</span>hexo-theme-ayer.git themes/ayer</span><br></pre></td></tr></table></figure><p>安装成功会在项目的 <code>themes</code> 目录下多一个 <code>ayer</code> 目录，<code>ayer</code> 根目录有一个<code>_config.yml</code> 主题配置文件</p><h6 id="2-修改"><a href="#2-修改" class="headerlink" title="2.修改"></a>2.修改</h6><p>将博客根目录下的 <code>_config.yml</code> 里的<code> theme</code> 值修改成 <code>ayer</code></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">theme:</span> ayer</span><br></pre></td></tr></table></figure><p>然后根据自己的需要修改主题的配置文件 <code>themes/ayer/_config.yml</code><br>最后，重新<code>hexo g</code>构建。</p><h2 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h2><p>问题出现了，发现构建的 public 目录下的 index.html 文件都是空的，访问博客显示空白。</p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>在网上查了一下，有相似问题的说是缺少依赖，先<code>npm ls --depth 0</code>查看 npm 插件缺失情况，一般情况下出现<code>npm ERROR！missing xxx</code><br>说明 xxx 插件缺失，然后依次将所有缺失的插件安装上。<br>执行了以上操作之后依然不行，解决不了我的问题。</p><p>最后决定一不做二不休，干脆直接升级 <code>hexo</code> 到 5.x.x 版本。<br>执行以下指令进行版本升级：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> install -g <span class="built_in">npm</span>-check <span class="comment"># 检查之前安装的插件，都有哪些是可以升级的</span></span><br><span class="line"><span class="built_in">npm</span> install -g <span class="built_in">npm</span>-upgrade <span class="comment"># 升级系统中的插件</span></span><br><span class="line"><span class="built_in">npm</span>-check</span><br><span class="line"><span class="built_in">npm</span>-upgrade  <span class="comment">#更新</span></span><br><span class="line"><span class="comment"># 更新 hexo 及所有插件</span></span><br><span class="line"><span class="built_in">npm</span> update</span><br><span class="line"><span class="comment"># 查看版本 确认 hexo 已经更新</span></span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>升级之后版本：<br><code>hexo: 5.4.1</code><br><code>hexo-cli: 3.1.0</code><br><code>node: 12.13.0</code></p><p>删除之前步骤 1 安装的（ hexo 版本&lt;5.0 ） <code>ayer</code> 主题（/themes/ayer）,然后使用 hexo&gt;5.0 的安装方法重新安装：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> i hexo-theme-ayer -S</span><br></pre></td></tr></table></figure><p>安装完成后会在根目录生成一个<code>_config.ayer.yml</code> 文件，直接编辑<code>_config.ayer.yml</code> 文件进行配置即可。<br>最后，重新<code>hexo g</code>构建，构建成功，index.html 文件内容正常，发布之后博客正常显示，问题解决。</p><p>参考：<a href="https://shen-yu.gitee.io/2019/ayer/#%E5%AE%89%E8%A3%85">Ayer 中文说明</a></p><p>错误之处欢迎交流指正，感谢~</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">Hexo更换主题出现空白index.html解决方案</summary>
    
    
    
    
    <category term="Hexo" scheme="https://yingliyu.github.io/tags/Hexo/"/>
    
    <category term="Hexo版本升级" scheme="https://yingliyu.github.io/tags/Hexo%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>vue-elementui-diary</title>
    <link href="https://yingliyu.github.io/2021/09/24/vue-elementui-diary/"/>
    <id>https://yingliyu.github.io/2021/09/24/vue-elementui-diary/</id>
    <published>2021-09-24T09:44:30.000Z</published>
    <updated>2021-10-17T06:57:20.261Z</updated>
    
    <content type="html"><![CDATA[<h5 id="title"><a href="#title" class="headerlink" title="title"></a>title</h5><!-- <blockquote class="pullquote mindmap mindmap-md"><ul><li><p><a href="https://hunterx.xyz/hexo-simple-mindmap-plugin-intro.html">Hexo 的思维导图插件</a></p><ul><li>前言</li><li>使用方法<ul><li>一</li><li>二</li><li>三</li></ul></li><li>太长不看</li><li>参考资料</li></ul></li></ul></blockquote> --><div style="width: 90%;margin: 0 auto">    <canvas id="chart861" style="height: 300px"></canvas></div><script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script><script type="text/javascript">    var ctx = document.getElementById('chart861').getContext('2d');    var options = {type: 'line',data: {labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],datasets: [{label: 'My First dataset',backgroundColor: 'rgb(255, 99, 132)',borderColor: 'rgb(255, 99, 132)',data: [0, 10, 5, 2, 20, 30, 45]}]},options: {responsive: true,title: {display: true,text: 'Chart.js Line Chart'}}};    new Chart(ctx, options);</script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;title&quot;&gt;&lt;a href=&quot;#title&quot; class=&quot;headerlink&quot; title=&quot;title&quot;&gt;&lt;/a&gt;title&lt;/h5&gt;&lt;!-- &lt;blockquote class=&quot;pullquote mindmap mindmap-md&quot;&gt;&lt;ul&gt;
&lt;l</summary>
      
    
    
    
    <category term="VUE" scheme="https://yingliyu.github.io/categories/VUE/"/>
    
    <category term="VUE2" scheme="https://yingliyu.github.io/categories/VUE/VUE2/"/>
    
    
    <category term="VUE" scheme="https://yingliyu.github.io/tags/VUE/"/>
    
    <category term="VUE2" scheme="https://yingliyu.github.io/tags/VUE2/"/>
    
  </entry>
  
  <entry>
    <title>文件下载的三种方式</title>
    <link href="https://yingliyu.github.io/2021/09/23/file-down/"/>
    <id>https://yingliyu.github.io/2021/09/23/file-down/</id>
    <published>2021-09-23T14:29:09.000Z</published>
    <updated>2021-10-17T06:57:20.253Z</updated>
    
    <content type="html"><![CDATA[<p>文件上传下载是项目中经常遇到的常规功能，本文针对下载功能总结了一共三种使用方式。</p><h5 id="一-无-API-浏览器直接下载（静态资源在前端）"><a href="#一-无-API-浏览器直接下载（静态资源在前端）" class="headerlink" title="一.无 API 浏览器直接下载（静态资源在前端）"></a>一.无 API 浏览器直接下载（静态资源在前端）</h5><p>将静态资源文件直接放于<code> public</code> 目录下，打包时 <code>public</code> 文件不会被编译。</p><blockquote><p>注意：静态资源的路径，在 public 文件夹下路径是<code>/文件名</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;download-file&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/file.xlsx&quot;</span> <span class="attr">download</span>=<span class="string">&quot;模板.xlsx&quot;</span>&gt;</span>下载模板文件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者使用非 a 标签的按钮下载：</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">@param &#123;string&#125; url  静态资源url</span></span><br><span class="line"><span class="comment">@param &#123;string&#125; filename  静态资源文件名(可选)</span></span><br><span class="line"><span class="comment">@param &#123;string&#125; target  </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fileUrlHandled = <span class="function">(<span class="params">&#123; url, filename, target &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> downloadElement = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  downloadElement.style.display = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">  downloadElement.href = url</span><br><span class="line">  <span class="keyword">if</span> (target) &#123;</span><br><span class="line">    downloadElement.target = <span class="string">&#x27;_blank&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  downloadElement.rel = <span class="string">&#x27;noopener noreferrer&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (filename) &#123;</span><br><span class="line">    downloadElement.download = filename</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(downloadElement)</span><br><span class="line">  downloadElement.click()</span><br><span class="line">  <span class="built_in">document</span>.body.removeChild(downloadElement)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：文件名不可控。</p><h5 id="二-后端-API-返回静态资源下载-url"><a href="#二-后端-API-返回静态资源下载-url" class="headerlink" title="二.后端 API 返回静态资源下载 url"></a>二.后端 API 返回静态资源下载 url</h5><p>原理：使用 ajax 下载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取 blob</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;String&#125;</span> </span>url 目标文件地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Promise&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBlob</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"></span><br><span class="line">    xhr.open(<span class="string">&#x27;GET&#x27;</span>, url, <span class="literal">true</span>)</span><br><span class="line">    xhr.responseType = <span class="string">&#x27;blob&#x27;</span></span><br><span class="line">    xhr.onload = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">        resolve(xhr.response)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Message.error(xhr.statusText || <span class="string">&#x27;文件获取失败&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    xhr.send()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;Blob&#125;</span> <span class="variable">blob</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;String&#125;</span> </span>filename 想要保存的文件名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveAs</span>(<span class="params">blob, filename</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.navigator.msSaveOrOpenBlob) &#123;</span><br><span class="line">    navigator.msSaveBlob(blob, filename)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> body = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    link.href = <span class="built_in">window</span>.URL.createObjectURL(blob)</span><br><span class="line">    link.download = filename</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fix Firefox</span></span><br><span class="line">    link.style.display = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">    body.appendChild(link)</span><br><span class="line"></span><br><span class="line">    link.click()</span><br><span class="line">    body.removeChild(link)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.URL.revokeObjectURL(link.href)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;String&#125;</span> </span>url 目标文件地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;String&#125;</span> </span>filename 想要保存的文件名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">download</span>(<span class="params">url, filename</span>) </span>&#123;</span><br><span class="line">  getBlob(url).then(<span class="function">(<span class="params">blob</span>) =&gt;</span> &#123;</span><br><span class="line">    saveAs(blob, filename)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>缺点：存在跨域问题。<br>优点：文件名可控。</p></blockquote><h5 id="三-后端-API-返回文件流"><a href="#三-后端-API-返回文件流" class="headerlink" title="三.后端 API 返回文件流"></a>三.后端 API 返回文件流</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二次封装axios POST请求方法下载</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">AppDownload</span>(<span class="params">url, data, baseURL</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    instance</span><br><span class="line">      .post(url, data, &#123;</span><br><span class="line">        baseURL,</span><br><span class="line">        <span class="attr">responseType</span>: <span class="string">&#x27;blob&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">      .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res &amp;&amp; res.status !== <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="comment">// reject(new Error(`下载失败`))</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> reader = <span class="keyword">new</span> FileReader()</span><br><span class="line">          reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> content = reader.result <span class="comment">// 内容就在这里</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="regexp">/&quot;ok&quot;:false/</span>.test(content)) &#123;</span><br><span class="line">              <span class="keyword">let</span> response = &#123;</span><br><span class="line">                <span class="attr">data</span>: <span class="built_in">JSON</span>.parse(content)</span><br><span class="line">              &#125;</span><br><span class="line">              responseFn(&#123; ...&#123; <span class="attr">res</span>: response &#125;, resolve, reject &#125;)</span><br><span class="line">              <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> url = <span class="built_in">window</span>.URL.createObjectURL(<span class="keyword">new</span> Blob([res.data]), &#123;</span><br><span class="line">              <span class="attr">type</span>: <span class="string">&#x27;multipary/form-data&#x27;</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">let</span> link = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">            link.style.display = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">            link.href = url</span><br><span class="line">            <span class="keyword">let</span> filename = data.filename || <span class="string">`<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>() - <span class="number">0</span>&#125;</span>.xlsx`</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (res.headers[<span class="string">&#x27;filename&#x27;</span>]) &#123;</span><br><span class="line">                filename = <span class="built_in">decodeURI</span>(res.headers[<span class="string">&#x27;filename&#x27;</span>]) || <span class="string">`<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>() - <span class="number">0</span>&#125;</span>.xlsx`</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">              <span class="built_in">console</span>.log(e)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            link.setAttribute(<span class="string">&#x27;download&#x27;</span>, filename)</span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(link)</span><br><span class="line">            link.click()</span><br><span class="line">            URL.revokeObjectURL(url.href)</span><br><span class="line">            <span class="built_in">document</span>.body.removeChild(link)</span><br><span class="line">            resolve()</span><br><span class="line">          &#125;</span><br><span class="line">          reader.readAsText(res.data)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error)</span><br><span class="line">        Message.error(&#123;</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&#x27;download failed&#x27;</span>,</span><br><span class="line">          <span class="attr">duration</span>: <span class="number">2000</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：后端需要将响应头中的 Access-Control-Expose-Headers，设置 Content-Disposition，否则前端取不到 Content-Disposition 的值。</p></blockquote><p>本文不到之处欢迎指正，感谢~</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">文件上传/下载</summary>
    
    
    
    <category term="文件" scheme="https://yingliyu.github.io/categories/%E6%96%87%E4%BB%B6/"/>
    
    <category term="下载" scheme="https://yingliyu.github.io/categories/%E6%96%87%E4%BB%B6/%E4%B8%8B%E8%BD%BD/"/>
    
    
    <category term="上传/下载" scheme="https://yingliyu.github.io/tags/%E4%B8%8A%E4%BC%A0-%E4%B8%8B%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>综合面试题</title>
    <link href="https://yingliyu.github.io/2021/09/11/interview-question-http/"/>
    <id>https://yingliyu.github.io/2021/09/11/interview-question-http/</id>
    <published>2021-09-11T14:23:00.000Z</published>
    <updated>2021-10-17T06:57:20.257Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、计算机网络"><a href="#一、计算机网络" class="headerlink" title="一、计算机网络"></a>一、计算机网络</h4><h5 id="1-浏览器的缓存机制"><a href="#1-浏览器的缓存机制" class="headerlink" title="1. 浏览器的缓存机制"></a>1. 浏览器的缓存机制</h5><h5 id="2-babel与ployfill的关系和区别"><a href="#2-babel与ployfill的关系和区别" class="headerlink" title="2. babel与ployfill的关系和区别"></a>2. babel与ployfill的关系和区别</h5><h5 id="3-解决跨域的方法"><a href="#3-解决跨域的方法" class="headerlink" title="3. 解决跨域的方法"></a>3. 解决跨域的方法</h5><h5 id="4-http状态码"><a href="#4-http状态码" class="headerlink" title="4. http状态码"></a>4. http状态码</h5><h5 id="5-git-stash"><a href="#5-git-stash" class="headerlink" title="5. git stash"></a>5. git stash</h5><h5 id="6-localstorage跨域可以共享吗，如何解决"><a href="#6-localstorage跨域可以共享吗，如何解决" class="headerlink" title="6. localstorage跨域可以共享吗，如何解决"></a>6. localstorage跨域可以共享吗，如何解决</h5><h5 id="7-描述url到页面渲染的整个过程"><a href="#7-描述url到页面渲染的整个过程" class="headerlink" title="7. 描述url到页面渲染的整个过程"></a>7. 描述url到页面渲染的整个过程</h5><h5 id="8-https页面引入http资源的解决方式-如何让网站同时兼容http和https"><a href="#8-https页面引入http资源的解决方式-如何让网站同时兼容http和https" class="headerlink" title="8. https页面引入http资源的解决方式/如何让网站同时兼容http和https"></a>8. https页面引入http资源的解决方式/如何让网站同时兼容http和https</h5><h5 id="9-cookie、session、sessionStorage和localStorage的-区别"><a href="#9-cookie、session、sessionStorage和localStorage的-区别" class="headerlink" title="9. cookie、session、sessionStorage和localStorage的 区别"></a>9. cookie、session、sessionStorage和localStorage的 区别</h5><h5 id="10-http-和-https-的区别"><a href="#10-http-和-https-的区别" class="headerlink" title="10. http 和 https 的区别"></a>10. http 和 https 的区别</h5><span id="more"></span><h5 id="11-GET-和-POST-的区别"><a href="#11-GET-和-POST-的区别" class="headerlink" title="11. GET 和 POST 的区别"></a>11. GET 和 POST 的区别</h5><h5 id="12-DNS（Domain-Name-System）域名解析-的原理"><a href="#12-DNS（Domain-Name-System）域名解析-的原理" class="headerlink" title="12. DNS（Domain Name System）域名解析 的原理"></a>12. DNS（Domain Name System）域名解析 的原理</h5><h5 id="13-三次握手和四次挥手"><a href="#13-三次握手和四次挥手" class="headerlink" title="13. 三次握手和四次挥手"></a>13. 三次握手和四次挥手</h5><h5 id="14-http2-0有什么改进"><a href="#14-http2-0有什么改进" class="headerlink" title="14. http2.0有什么改进"></a>14. http2.0有什么改进</h5><h5 id="15-Web-Storage-sessionStorage、localStorage-带来的好处"><a href="#15-Web-Storage-sessionStorage、localStorage-带来的好处" class="headerlink" title="15. Web Storage(sessionStorage、localStorage)带来的好处"></a>15. Web Storage(sessionStorage、localStorage)带来的好处</h5><h5 id="16-如何让前端禁用cookie"><a href="#16-如何让前端禁用cookie" class="headerlink" title="16. 如何让前端禁用cookie"></a>16. 如何让前端禁用cookie</h5><h5 id="17-script标签为什么放后面？引出defer和async区别？"><a href="#17-script标签为什么放后面？引出defer和async区别？" class="headerlink" title="17. script标签为什么放后面？引出defer和async区别？"></a>17. script标签为什么放后面？引出defer和async区别？</h5><h5 id="18-304状态码是怎么样，怎么产生的"><a href="#18-304状态码是怎么样，怎么产生的" class="headerlink" title="18. 304状态码是怎么样，怎么产生的"></a>18. 304状态码是怎么样，怎么产生的</h5><h4 id="二、webpack"><a href="#二、webpack" class="headerlink" title="二、webpack"></a>二、webpack</h4><h5 id="1-publicpath和contentBase的区别"><a href="#1-publicpath和contentBase的区别" class="headerlink" title="1. publicpath和contentBase的区别"></a>1. publicpath和contentBase的区别</h5><h5 id="2-怎么配置css的局部作用域"><a href="#2-怎么配置css的局部作用域" class="headerlink" title="2. 怎么配置css的局部作用域"></a>2. 怎么配置css的局部作用域</h5><h5 id="3-拆包的配置项是什么，chunks分别代表什么"><a href="#3-拆包的配置项是什么，chunks分别代表什么" class="headerlink" title="3. 拆包的配置项是什么，chunks分别代表什么"></a>3. 拆包的配置项是什么，chunks分别代表什么</h5><h5 id="4-webpack的分包机制、代码分割"><a href="#4-webpack的分包机制、代码分割" class="headerlink" title="4. webpack的分包机制、代码分割"></a>4. webpack的分包机制、代码分割</h5><h5 id="5-webpack的loder是怎么解析不同类型的资源的"><a href="#5-webpack的loder是怎么解析不同类型的资源的" class="headerlink" title="5. webpack的loder是怎么解析不同类型的资源的"></a>5. webpack的loder是怎么解析不同类型的资源的</h5><h5 id="6-webpack的devSever"><a href="#6-webpack的devSever" class="headerlink" title="6. webpack的devSever"></a>6. webpack的devSever</h5><h5 id="7-webpack打包速度做过什么优化"><a href="#7-webpack打包速度做过什么优化" class="headerlink" title="7. webpack打包速度做过什么优化"></a>7. webpack打包速度做过什么优化</h5><h5 id="8-如何解决编译慢的问题"><a href="#8-如何解决编译慢的问题" class="headerlink" title="8. 如何解决编译慢的问题"></a>8. 如何解决编译慢的问题</h5><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">计算机网络、webpack系列面试题</summary>
    
    
    
    <category term="面试题" scheme="https://yingliyu.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="面试题" scheme="https://yingliyu.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    <category term="计算机网络" scheme="https://yingliyu.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="webpack" scheme="https://yingliyu.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>权限管理的原理</title>
    <link href="https://yingliyu.github.io/2021/03/11/rights-mgt/"/>
    <id>https://yingliyu.github.io/2021/03/11/rights-mgt/</id>
    <published>2021-03-11T09:44:30.000Z</published>
    <updated>2021-10-17T06:57:20.261Z</updated>
    
    <content type="html"><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>在一些中后台项目的业务中经常会有给不同的用户看到不同的页面甚至不同的操作权限，这时候权限管理功能就闪亮登场了，用它来给用户赋予不同的角色，给不同的角色设置不同的权限，那么前后端在技术方面具体是如何实现的呢？带着这个问题我们来看下权限管理的流程和实现原理。</p><h5 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h5><blockquote><p>权限管理大致方案就是给角色分配权限，给用户分配角色。根据业务不同要求的颗粒度不同，如果颗粒度仅限于路由级别，实现思路大致如下</p></blockquote><p>首先，前端需要分别定义一套（不需权限所有已登陆用户都可访问）静态路由表和动态路由表，路由元信息中包含这个路由对应的（和后端定义好的）权限名。</p><span id="more"></span><p>然后， 1.跟后端协商好权限的定义规则，其次，从服务端获取含有用户权限信息的菜单列表然后跟前端自己定义的完整的动态路由表进行递归遍历，如果用户有此页面的权限则添加到用户可访问的路由表中，得到用户有权限访问的路由表； 2.在导航前置守卫中做拦截。<code>token</code> 存在且有效的是权限管理的第一步判断，如果 token 不存在，判断该路由是否在白名单中，如果在则<code>next()</code>，如果不在则重定向至登录页，如果 <code>token</code> 存在再判断（全局状态中）该用户是否有权限，如果有 <code>next()</code>，否则再从服务端获取该用户的权限信息，通过步骤 1，将 1 得到的路由表添加<code>router.addRoutes()</code>到路由表中，并更新全局状态中的路由表，然后 <code>next()</code>，页面渲染出来就是该用户有访问权限的菜单/页面。</p><blockquote><p>如果权限管理颗粒度细到每个操作按钮级别，可以使用自定义指令实现。</p></blockquote><p>首先，编写自定义指令，具体思路：能拿到绑定的元素及该操作需要的权限，如果该用户没有此操作的权限则不显示此按钮。然后在模板中使用该指令。</p><h5 id="逻辑流程图"><a href="#逻辑流程图" class="headerlink" title="逻辑流程图"></a>逻辑流程图</h5><p><img src="/2021/03/11/rights-mgt/1.png" alt="流程图"></p><p>错误之处欢迎交流指正，感谢~</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">权限管理</summary>
    
    
    
    
    <category term="-vue - 权限管理" scheme="https://yingliyu.github.io/tags/vue-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>WEB应用中的权限认证</title>
    <link href="https://yingliyu.github.io/2021/01/27/gwt-token/"/>
    <id>https://yingliyu.github.io/2021/01/27/gwt-token/</id>
    <published>2021-01-27T17:25:17.000Z</published>
    <updated>2021-10-17T06:57:20.253Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-传统方案——基于-cookie-session-的解决方案"><a href="#1-传统方案——基于-cookie-session-的解决方案" class="headerlink" title="1.传统方案——基于 cookie/session 的解决方案"></a>1.传统方案——基于 cookie/session 的解决方案</h3><p>首先，浏览器端向服务端发送 login 请求，把用户名和密码都发送过去，服务器验证用户名密码正确，然后就会创建对应的 session 数据并保存在内存或者数据库中。然后，服务器返回一个 HTTP 200 OK 的 response，这个 response 会有个 header 叫 set-Cookie：sessionid=xxx，浏览器拿到这个 response 以后，因为有 set-Cookie 这个 header， 带上唯一的 id sessionid（set-Cookie：sessionid=xxx），它就会把 cookie 保存在浏览器中，下次我们再访问这个需要权限的接口，这时候会自动把 cookie 带上。服务器端就可以使用 cookie 中的信息 sessionid，查看服务器中是否存在这个 session 的数据，如果存在则返回对应的信息，否则返回 401 Not authorized。</p><p>基于 cookie 的身份验证是有状态的，意味着这个验证记录或者会话必须同时保存在服务器端和客户端，服务器要跟踪记录 session 并且存至内存或者数据库，同时前端在 cookie 也要保存这个 sessionid 作为 session 唯一的标识符。这种模式的问题在于扩展性不好。假如只有一台服务器当然没有问题，假如是一个服务器集群，这就要求 session 的数据共享，我们需要每台服务器都读取到这个 session，一种解决方案就是 session 的数据持久化，把数据写到持久层中去，各种服务收到请求以后都向持久层发送数据。这种方案优点是架构清晰，缺点是工程量比较大，另外，持久层如果挂了，那么就单点失败。<br><img width="600px" style="display:block;margin:20px auto;" src="/2021/01/27/gwt-token/1.jpeg"></p><span id="more"></span><!-- ![1](1.jpeg) --><h3 id="2-基于-Token-的解决方案：GWT"><a href="#2-基于-Token-的解决方案：GWT" class="headerlink" title="2.基于 Token 的解决方案：GWT"></a>2.基于 Token 的解决方案：GWT</h3><p>它不同于在服务器保存信息的特点，而是把所有的信息都保存在客户端，之后每次请求都将生成的信息发回到服务器，JWT（JSON WEB TOKEN）就是这种方案的一个代表。</p><p>流程：<br>浏览器向服务器发送登陆请求，把用户名和密码发送过去，服务器验证用户名和密码正确，服务端会使用 JWT 算法生成 token 签名，然后 response 返回 token 到客户端，然后浏览器会将 token 储存到客户端，常见方式 local Storage 或者 session Storage 中，之后每次请求将 token 在 HTTP 请求头中发送给服务器（也可以通过放在 cookie 中自动发送的方式，但是这样不能跨域），服务器拿到信息之后 JWT 反向验证对应的 token 是否正确，如果验证通过就返回 200 OK 并带上相应的信息，如果错误则返回 401 Not authorized。<br>如果用户退出登陆，token 在客户端销毁，和服务器无关。基于 token 的身份验证是没有状态的，服务器不需要记录哪些用户已经登陆或者哪些 JWT 已经处理，每个发送到服务器的请求都会带一个 token，服务器通过 token 检查确认请求的有效性。</p><p>token 是通过特定的加密算法将用户登陆后的一些信息储存在一个加密后的字符串中，服务器凭 token 认定用户的身份，即服务器是无状态的因此非常容易实现拓展。<br><img width="600px" style="display:block;margin:20px auto;" src="/2021/01/27/gwt-token/2.jpeg"></p><!-- ![1](2.jpeg) --><p>登陆之后，刷新浏览器登录状态丢失，持久化方案：</p><!-- ![3](3.jpeg) --><img width="600px" style="display:block;margin:20px auto;" src="/2021/01/27/gwt-token/3.jpeg"><blockquote><p>权限逻辑流程：</p></blockquote> <img width="600px" style="display:block;margin:20px auto;" src="/2021/01/27/gwt-token/4.png"><!-- ![4](4.jpeg) --><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">token</summary>
    
    
    
    <category term="单点登录" scheme="https://yingliyu.github.io/categories/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/"/>
    
    <category term="GWT" scheme="https://yingliyu.github.io/categories/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/GWT/"/>
    
    
    <category term="GWT" scheme="https://yingliyu.github.io/tags/GWT/"/>
    
  </entry>
  
  <entry>
    <title>nginx入门</title>
    <link href="https://yingliyu.github.io/2021/01/22/nginx/"/>
    <id>https://yingliyu.github.io/2021/01/22/nginx/</id>
    <published>2021-01-22T17:41:54.000Z</published>
    <updated>2021-10-17T06:57:20.257Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>nginx 是 web 服务器，由 C 语言开发，基于事件驱动能处理百万级别的 tcp 连接，高度模块化的设计和自由的许可证使得扩展其功能的模块层出不穷，跨平台，可使用当前操作系统特有的一些高效 API 来提高自己的性能，nginx 以性能为王。选择 nginx 的核心理由是处理高并发请求的同时保持高效的服务。<br>Nginx 特点：<br>适合前后端分离开发、保证安全、nginx 非常快、负载均衡</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>环境：MAC OS 系统<br><code>brew install nginx</code></p><p>查看版本号：<br><code>nginx -V</code></p><p>启动：<br><code>nginx</code></p><span id="more"></span><p>关闭：<br><code>nginx -s stop</code></p><p>查看 nginx 相关文件：<br><code>cd /usr/local/etc/nginx</code><br><code>ls</code></p><p>打开 nginx 配置文件：<br><code>code nginx.conf</code><br>局部如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       8080;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        #charset koi8-r;</span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>进入 nginx 静态资源文件的默认路径：<br><code>cd /usr/local/var/www</code></p><p><code>ls</code><br>查看默认静态资源 html 文件<br><code>cat index.html</code></p><h4 id="使用-nginx-部署静态文件"><a href="#使用-nginx-部署静态文件" class="headerlink" title="使用 nginx 部署静态文件"></a>使用 nginx 部署静态文件</h4><p>进入本地项目目录下：<br><code>cd xxx/yourProjectName</code><br><code>ls</code><br><code>cd dist</code><br><code>ls</code></p><p>把打包生成的代码 copy 到/usr/local/var/www 目录<br><code>cp -r * /usr/local/var/www</code></p><p>然后，访问<br>localhost:8080</p><p>流程：<br>用户-&gt;xxx.com-&gt;Nginx-&gt;静态文件</p><p>重新启动 nginx：</p><p><code>nginx -s reload</code></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">nginx入门</summary>
    
    
    
    <category term="Nginx" scheme="https://yingliyu.github.io/categories/Nginx/"/>
    
    
    <category term="nginx" scheme="https://yingliyu.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Vue3的新特性(二)：生命周期</title>
    <link href="https://yingliyu.github.io/2021/01/13/vue3-lifecycle/"/>
    <id>https://yingliyu.github.io/2021/01/13/vue3-lifecycle/</id>
    <published>2021-01-13T14:38:44.000Z</published>
    <updated>2021-10-17T06:57:20.261Z</updated>
    
    <content type="html"><![CDATA[<h3 id="生命周期钩子函数"><a href="#生命周期钩子函数" class="headerlink" title="生命周期钩子函数"></a>生命周期钩子函数</h3><p>vue3 更新了生命周期钩子函数。<br>可以直接通过 import 对应的函数（例如：onMounted）来注册生命周期钩子函数。</p><p>Options API -&gt; Hook inside <code>setup</code></p><ol><li><del>beforeCreate</del> -&gt; use setup()</li><li><del>created</del> -&gt; use setup()</li><li>beforeMount -&gt; onBeforeMount</li><li>mounted -&gt; onMounted</li><li>beforeUpdate -&gt; onBeforeUpdate</li><li>updated -&gt; onUpdated</li><li>beforeUnmount -&gt; onBeforeUnmount</li><li>unmounted -&gt; onUnmounted</li><li>errorCaptured -&gt; onErrorCaptured</li><li>renderTracked -&gt; onRenderTracked（调试用）</li><li>renderTriggered -&gt; onRenderTriggered（调试用）</li></ol><p>因为 setup 是在 beforeCreated 和 created 几乎是同时进行的，所以可以将在这两个生命周期里的代码写在 setup 里面。</p><span id="more"></span><!-- ![life](circle.png) --><img width="600px" style="display:block;margin:20px auto;" src="/2021/01/13/vue3-lifecycle/circle.png"><p>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted, onUpdated, onUnmounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> MyComponent = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;mounted!&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    onUpdated(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;updated!&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    onUnmounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;unmounted!&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://v3.vuejs.org/guide/composition-api-lifecycle-hooks.html">更多内容参考 vue3</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">vue3</summary>
    
    
    
    <category term="VUE" scheme="https://yingliyu.github.io/categories/VUE/"/>
    
    <category term="VUE3" scheme="https://yingliyu.github.io/categories/VUE/VUE3/"/>
    
    <category term="新特性" scheme="https://yingliyu.github.io/categories/VUE/VUE3/%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
    <category term="VUE" scheme="https://yingliyu.github.io/tags/VUE/"/>
    
    <category term="VUE3" scheme="https://yingliyu.github.io/tags/VUE3/"/>
    
  </entry>
  
  <entry>
    <title>Vue3的新特性(三)：setup()、computed()和watch()</title>
    <link href="https://yingliyu.github.io/2021/01/13/vue3-02/"/>
    <id>https://yingliyu.github.io/2021/01/13/vue3-02/</id>
    <published>2021-01-13T14:16:42.000Z</published>
    <updated>2021-10-17T06:57:20.261Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文主要介绍 vue3 新增 Composition API 的一些特性 setup()、computed()和 watch()，Composition API 可以把复杂组件的逻辑变得更为紧凑，使代码有更高复用性和灵活性。</p><h3 id="1-setup"><a href="#1-setup" class="headerlink" title="1. setup()"></a>1. setup()</h3><p><code>setup()</code>是 <code>vue3</code> 中新增特性，在组件 <code>created()</code>生命周期之前执行。<br>因为 <code>setup()</code> 是在组件 <code>created()</code>之前执行的，所以在 <code>setup()</code>内部无法获取 <code>this</code>。</p><p><code>setup(props,context)</code>接收两个参数：<code>props</code>,<code>context</code></p><h5 id="参数一：props"><a href="#参数一：props" class="headerlink" title="参数一：props"></a>参数一：props</h5><p>组件接收的 <code>props</code> 数据可以在 <code>setup()</code>函数内访问到。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="built_in">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(props.title)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>props</code> 具有响应性，不能使用 ES6 解构它，这会使其失去响应性。如果需要解构，可以使用 <code>toRefs()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; title &#125; = toRefs(props)</span><br><span class="line"><span class="built_in">console</span>.log(title.value)</span><br></pre></td></tr></table></figure><p>如果 <code>title</code> 是一个可选的属性，需使用 <code>toRef()</code>,如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; toRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="function"><span class="title">setup</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line"><span class="keyword">const</span> title = toRef(props, <span class="string">&#x27;title&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(title.value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h5 id="参数二：context："><a href="#参数二：context：" class="headerlink" title="参数二：context："></a>参数二：context：</h5><pre><code>`context` 是一个上下文对象，可以通过 context 来访问 Vue 的实力 this。`context` 内部包括三个属性：`attrs`、`slots`、`emit`</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, &#123; attrs, slots, emit &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>context 是一个常规的 js 对象，它不具有响应性可以直接对它解构。但 <code>attrs</code> 和 <code>slots</code> 是有状态的对象，当组件本身更新时它们也会随之更新，这意味着我们应该避免解构它们。</p><h3 id="2-computed"><a href="#2-computed" class="headerlink" title="2. computed()"></a>2. computed()</h3><h5 id="computed-创建只读计算属性"><a href="#computed-创建只读计算属性" class="headerlink" title="computed()创建只读计算属性"></a>computed()创建只读计算属性</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> count = ref(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 创建一个只读性计算属性，依赖于count值</span></span><br><span class="line"><span class="keyword">const</span> plusOne = computed(<span class="function">() =&gt;</span> count.value + <span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(plusOne.value) <span class="comment">// 2</span></span><br><span class="line">plusOne.value++ <span class="comment">// error 该计算属性为只读属性，不可写</span></span><br></pre></td></tr></table></figure><h5 id="computed-创建可读写计算属性"><a href="#computed-创建可读写计算属性" class="headerlink" title="computed()创建可读写计算属性"></a>computed()创建可读写计算属性</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> count = ref(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 创建一个可读写计算属性</span></span><br><span class="line"><span class="keyword">const</span> plusOne = computed(&#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="function">() =&gt;</span> count.value + <span class="number">1</span>,</span><br><span class="line">  <span class="attr">set</span>: <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    count.value = val - <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">plusOne.value = <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(count.value) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h3 id="3-watch"><a href="#3-watch" class="headerlink" title="3. watch()"></a>3. watch()</h3><h5 id="watch-监听单个数据源"><a href="#watch-监听单个数据源" class="headerlink" title="watch()监听单个数据源"></a>watch()监听单个数据源</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听 a getter</span></span><br><span class="line"><span class="keyword">const</span> state = reactive(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span><br><span class="line">watch(</span><br><span class="line">  <span class="function">() =&gt;</span> state.count,</span><br><span class="line">  <span class="function">(<span class="params">count, prevCount</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接监听 a ref</span></span><br><span class="line"><span class="keyword">const</span> count = ref(<span class="number">0</span>)</span><br><span class="line">watch(count, <span class="function">(<span class="params">count, prevCount</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="watch-监听多个数据源"><a href="#watch-监听多个数据源" class="headerlink" title="watch()监听多个数据源"></a>watch()监听多个数据源</h5><p>第一个参数中，要监听的数据源以数组的形式传入。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> firstName = ref(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> lastName = ref(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">watch([firstName, lastName], <span class="function">(<span class="params">newValues, prevValues</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(newValues, prevValues)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">firstName.value = <span class="string">&#x27;John&#x27;</span> <span class="comment">// logs: [&quot;John&quot;,&quot;&quot;] [&quot;&quot;, &quot;&quot;]</span></span><br><span class="line">lastName.value = <span class="string">&#x27;Smith&#x27;</span> <span class="comment">// logs: [&quot;John&quot;, &quot;Smith&quot;] [&quot;John&quot;, &quot;&quot;]</span></span><br></pre></td></tr></table></figure><p>另，当监听一个响应性对象时，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = reactive([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">watch(</span><br><span class="line">  <span class="function">() =&gt;</span> [...numbers],</span><br><span class="line">  <span class="function">(<span class="params">numbers, prevNumbers</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(numbers, prevNumbers)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">numbers.push(<span class="number">5</span>) <span class="comment">// logs: [1,2,3,4,5] [1,2,3,4]</span></span><br></pre></td></tr></table></figure><p>当监听一个复杂对象的属性或者数组时需要传入第三个参数<code>&#123;deep:true&#125;</code>，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">attributes</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">watch(</span><br><span class="line">  <span class="function">() =&gt;</span> state,</span><br><span class="line">  <span class="function">(<span class="params">state, prevState</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;not deep &#x27;</span>, state.attributes.name, prevState.attributes.name)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">watch(</span><br><span class="line">  <span class="function">() =&gt;</span> state,</span><br><span class="line">  <span class="function">(<span class="params">state, prevState</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;deep &#x27;</span>, state.attributes.name, prevState.attributes.name)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">deep</span>: <span class="literal">true</span> &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">state.attributes.name = <span class="string">&#x27;Alex&#x27;</span> <span class="comment">// Logs: &quot;deep &quot; &quot;Alex&quot; &quot;Alex&quot;</span></span><br></pre></td></tr></table></figure><p>监听一个响应式对象或者数组时总是返回当前数据变化前后的引用，为了真正的监听复杂对象或数组，需要进行一次深拷贝。<br>官方推荐方案：<a href="!https://lodash.com/docs/4.17.15#cloneDeep">lodash.cloneDeep</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"><span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">attributes</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;lemon&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">watch(</span><br><span class="line">  <span class="function">() =&gt;</span> _.cloneDeep(state),</span><br><span class="line">  <span class="function">(<span class="params">state, prevState</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(state.attributes.name, prevState.attributes.name)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">state.attributes.name = <span class="string">&#x27;Alex&#x27;</span> <span class="comment">// Logs: &quot;Alex&quot; &quot;lemon&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>更多详细用法请参考<a href="!https://v3.vuejs.org/guide/reactivity-computed-watchers.html#watching-reactive-objects">Composition API——watch</a></p></blockquote><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">vue3</summary>
    
    
    
    <category term="VUE" scheme="https://yingliyu.github.io/categories/VUE/"/>
    
    <category term="VUE3" scheme="https://yingliyu.github.io/categories/VUE/VUE3/"/>
    
    <category term="新特性" scheme="https://yingliyu.github.io/categories/VUE/VUE3/%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
    <category term="VUE" scheme="https://yingliyu.github.io/tags/VUE/"/>
    
    <category term="VUE3" scheme="https://yingliyu.github.io/tags/VUE3/"/>
    
  </entry>
  
  <entry>
    <title>Vue3 的新特性(一):ref()、reactive()、toRef() 和 toRefs()</title>
    <link href="https://yingliyu.github.io/2021/01/12/vue3-01/"/>
    <id>https://yingliyu.github.io/2021/01/12/vue3-01/</id>
    <published>2021-01-12T15:28:58.000Z</published>
    <updated>2021-10-17T06:57:20.261Z</updated>
    
    <content type="html"><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>vue3 更好的支持了 <code>Typescript</code>，新增了 <code>CompositionAPI</code>，而且在性能方面有很大提升</p><ol><li>打包大小减少 41%</li><li>初次渲染快 55%，更新快 133%</li><li>内存使用减少 54%</li></ol><p>这篇文章主要来学习以下 vue3 的以下新特性：<code>ref()</code>、<code>reactive()</code>、<code>toRef()</code>、<code>toRefs()</code></p><h5 id="版本要求"><a href="#版本要求" class="headerlink" title="版本要求"></a>版本要求</h5><p>对于 Vue3，node 版本 10+、Vue Cli v4.5+的版本可用。已经安装过<code>@vue/cli</code>需更新至最新版本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn <span class="built_in">global</span> add @vue/cli</span><br><span class="line">#or</span><br><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><h5 id="配置-Vue3-开发环境"><a href="#配置-Vue3-开发环境" class="headerlink" title="配置 Vue3 开发环境"></a>配置 Vue3 开发环境</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create [project-name]</span><br></pre></td></tr></table></figure><span id="more"></span><p><code>？Please pick a preset: </code><br>Manually select feature(手动选择一些特性)<br>然后，是一系列可插拔的支持，囊括各种功能，充分体现了渐进式的特点<br><code>？Check the feature needed for your project:</code><br>Choose vue version<br>Babel<br>Typescript<br>Linter/Formatter(代码格式检查工具)<br><code>？Choose a version of vue.js that you want to start the project with: </code><br>3.X(Preview)<br><code>? Use class-style component snytax?</code>（类类型的组件）<br>No<br><code>？Use Babel alongSide Typescript？</code><br>No<br><code>？Pick a linter / formatter config:</code><br>Eslint with error prevention only<br><code>? Pick additional lint features:</code><br>Lint on save<br><code>? Where do you prefer placing config for Babel,Eslint ,etc.?</code><br>In dedicated config files<br><code>? Save this as a preset for future projects?</code><br>No(根据自己的需要选择)</p><p>OR 使用 UI 界面：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure><p>进入图文界面进行选择配置</p><h5 id="vue2-与-vue3-的响应式实现"><a href="#vue2-与-vue3-的响应式实现" class="headerlink" title="vue2 与 vue3 的响应式实现"></a>vue2 与 vue3 的响应式实现</h5><p>我们知道，vue2 中的 data 返回的是一个响应式对象，其原理是通过 <code>Object.defineProperty()</code>实现的，但是会有一些弊端，比如它对于对象上新增的属性无能为力；对于数组则需要拦截它的原型方法来实现响应式。<br>那么，vue3 踏着五彩祥云就来了。vue3 是使用 ES6 中的新特性 Proxy 来实现响应式。先来对 <code>Proxy</code> 进行一下预热，<br><code>Proxy</code> 对象用于定义基本操作的自定义行为（如：属性查找、赋值、枚举、函数调用等）。<br><code>Proxy</code> 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。<br>更多内容可以参考 <a href="https://es6.ruanyifeng.com/#docs/proxy">ES6 Proxy</a></p><h5 id="ref-和-reactive"><a href="#ref-和-reactive" class="headerlink" title="ref() 和 reactive()"></a>ref() 和 reactive()</h5><blockquote><p><code>ref()</code> 函数接收一个基本数据类型的参数同时返回一个基于该值的响应性对象，该对象内部有且仅有一个属性 value，该对象中的值一旦被改变和访问就会被跟踪到，通过修改 <code>refData.value</code> 的值，可以触发模版的重新的渲染，显示最新的值。<code>reactive</code> 则是修改 <code>state.reactiveField</code> 的值。</p></blockquote><blockquote><p><code>reactive()</code> 函数接收一个复杂数据类型的数据（对象或数组）作为参数，并返回一个响应式代理对象。（响应式数据即当数据发生变化时 UI 也会自动更新）</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; temp &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; user.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; user.age &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increase&quot;</span>&gt;</span>click me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> temp = ref(<span class="number">0</span>)</span><br><span class="line">    temp.value = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> user = reactive(&#123; <span class="attr">name</span>: <span class="string">&#x27;lemon&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(temp)</span><br><span class="line">    <span class="built_in">console</span>.log(temp.value) <span class="comment">// hello</span></span><br><span class="line">    <span class="built_in">console</span>.log(user) <span class="comment">// Proxy &#123;name:&#x27;lemon&#x27;,age:20&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> increase = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      user.age++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123; temp, user, increase &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>reactive()</code> 函数可以代理一个复杂数据类型比如：对象、数组，但不能代理基本类型值，例如字符串、数字、boolean 等，这是 js 语言的限制，因此我们需要使用 <code>ref()</code> 函数来间接对基本类型值进行处理。<code>ref</code>的本质还是<code>reactive</code>系统会自动根据<code>ref()</code>函数的入参将其转换成<code>ref(x)</code>即<code>reactive(&#123;value:x&#125;)</code></p><blockquote><p>综上，<code>ref(user.name)</code> 就相当于 <code>ref(&#39;lemon&#39;)</code> 也相当于 <code>reactive(&#123;value:&#39;lemon&#39;&#125;)</code></p></blockquote><p><code>注意：</code></p><ol><li>在 vue 模板中使用 <code>ref</code> 的值不需要通过 <code>value</code> 属性获取（vue 会自动给 ref 的值加上.value）</li><li>在 js 中使用 <code>ref</code> 的值要通过<code>.value</code>获取</li></ol><h5 id="toRef-和-toRefs"><a href="#toRef-和-toRefs" class="headerlink" title="toRef() 和 toRefs()"></a>toRef() 和 toRefs()</h5><blockquote><p><code>toRef</code>是将个对象 A 中的某个属性 x 转换为响应式数据，其接收两个参数，第一个参数为对象 A，第二个参数为对象中的某个属性名 x。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; toRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">&#x27;lemon&#x27;</span>, <span class="attr">age</span>: <span class="number">3</span> &#125;</span><br><span class="line">    <span class="keyword">const</span> userRef = toRef(user, <span class="string">&#x27;age&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123; userRef &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里你应该会有一个疑问，<code>toRef()</code>和<code>ref()</code> 都是创建响应式数据的函数，它们之间有什么不同呢？我们来测试一下。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    响应式数值ref0：</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add0&quot;</span>&gt;</span>add &#123;&#123; state0 &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    响应式对象ref1：</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add1&quot;</span>&gt;</span>Add &#123;&#123; state1 &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    响应式对象toRef2：</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add2&quot;</span>&gt;</span>Add &#123;&#123; state2 &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, toRef &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> temp = &#123; <span class="attr">count</span>: <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">const</span> temp0 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> state0 = ref(temp0);</span><br><span class="line">    <span class="keyword">const</span> state1 = ref(temp.count);</span><br><span class="line">    <span class="keyword">const</span> state2 = toRef(temp, <span class="string">&quot;count&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> add0 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      state0.value++;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;原始值：&quot;</span>, temp0); <span class="comment">//原始值：1</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;响应式数据对象ref：&quot;</span>, state0.value); <span class="comment">//响应式数值ref：2</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> add1 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      state1.value++;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;原始值：&quot;</span>, temp); <span class="comment">//原始值：1</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;响应式数据对象ref：&quot;</span>, state1.value); <span class="comment">//响应式对象ref：2</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> add2 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      state2.value++;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;原始值：&quot;</span>, temp); <span class="comment">// 原始值：2</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;响应式数据对象toRef：&quot;</span>, state2.value); <span class="comment">//响应式对象toRef：2</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123; state0, state1, state2, add0, add1, add2 &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>综上，ref()和 refs()有以下区别：</p></blockquote><ol><li>参数不同：<code>ref()</code>接收一个 js 基本数据类型的参数；<code>toRef()</code>接收两个参数，第一个为对象，第二个为对象中的某个属性；</li><li>原理不同：<code>ref()</code>是对原数据的一个深拷贝，当其值改变时不会影响到原始值；<code>toRef()</code>是对原数据的一个引用，当值改变时会影响到原始值；</li><li>响应性不同：<code>ref()</code>创建的数据会触发 vue 模版更新；<code>toRef()</code>创建的响应式数据并不会触发 vue 模版更新，所以<code>toRef()</code>的本质是引用，与原始数据有关联。</li></ol><blockquote><p><code>toRefs()</code>接收一个对象作为参数，并遍历对象身上的所有属性，然后逐个调用<code>toRef()</code>执行。以此，将响应式对象转化为普通对象，便于在模版中可以直接使用属性。</p></blockquote><p>当我们希望对象的多个属性都变成响应式数据，并且要求响应式数据和原始数据相关联，并且更新响应式数据时不更新界面，这时候<code>toRefs()</code>就派上用场了，它用于批量设置多个响应式数据。</p><p>那么，到这里又有疑问了，通过上面的学习我们知道使用 reactive()创建的数据已经具有响应式了，为什么还要再 toRefs()呢？<br>往下看，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个响应式对象state</span></span><br><span class="line">    <span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">      <span class="attr">foo</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">bar</span>: <span class="number">2</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> stateAsRefs = toRefs(state) <span class="comment">// 将响应式的对象变为普通对象结构</span></span><br><span class="line">    <span class="comment">// The ref and the original property is &quot;linked&quot;</span></span><br><span class="line">    state.foo++</span><br><span class="line">    <span class="built_in">console</span>.log(stateAsRefs.foo.value) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">    stateAsRefs.foo.value++</span><br><span class="line">    <span class="built_in">console</span>.log(state.foo) <span class="comment">// 3</span></span><br><span class="line">    <span class="keyword">return</span> &#123; temp, userRefs, ...stateAsRefs, add &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于以上代码，toRefs()将响应式的对象 state 变为普通对象 stateAsRefs 后，return 时使用 ES6 的扩展运算符，在模版中可以直接使用其内部属性，且仍具有响应性（ 对响应式对象 state 使用扩展运算符后，其内部属性就失去了响应性 ）</p><p>官方案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useFeatureX</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">bar</span>: <span class="number">2</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// logic operating on state</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// convert to refs when returning（返回时转为refs）</span></span><br><span class="line">  <span class="keyword">return</span> toRefs(state)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// can destructure without losing reactivity（可以解构而不失去其响应性）</span></span><br><span class="line">    <span class="keyword">const</span> &#123; foo, bar &#125; = useFeatureX()</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      foo,</span><br><span class="line">      bar</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对响应式对象进行 toRefs 后，可以对其进行解构方便 vue 模版使用，但是不会使其失去响应性。</p></blockquote><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>参考：<a href="https://es6.ruanyifeng.com/#docs/proxy">ES6</a> 、 <a href="https://v3.vuejs.org/api/refs-api.html#torefs">Vue3</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">vue3</summary>
    
    
    
    <category term="VUE" scheme="https://yingliyu.github.io/categories/VUE/"/>
    
    <category term="VUE3" scheme="https://yingliyu.github.io/categories/VUE/VUE3/"/>
    
    <category term="新特性" scheme="https://yingliyu.github.io/categories/VUE/VUE3/%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
    <category term="VUE" scheme="https://yingliyu.github.io/tags/VUE/"/>
    
    <category term="VUE3" scheme="https://yingliyu.github.io/tags/VUE3/"/>
    
  </entry>
  
  <entry>
    <title>React-ts-d3 项目实践</title>
    <link href="https://yingliyu.github.io/2020/11/18/react-ts-d3/"/>
    <id>https://yingliyu.github.io/2020/11/18/react-ts-d3/</id>
    <published>2020-11-18T14:33:38.000Z</published>
    <updated>2021-10-17T06:57:20.257Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>自从涉足了知识图谱项目便一发不可收拾，本次项目中也是涉及到一些可视化和知识图谱的元素，对我来说虽不是新的技术领域但是这次改用了 <code>ts</code>，所以还是踩了不少的坑呢，主要集中在 <code>d3</code> 和 <code>ts</code> 结合部分。</p><p>其次在项目评审期间，前端主要问题还有自适应方面的问题，最终敲定使用断点媒体查询的方式实现。</p><p>近期 <code>bug</code> 修复进入尾声，时隔数日还是复盘一下，毕竟我的脑瓜子还是一如既往的健忘，刚刚被问及一个项目是不是我做的，我记得是我做的，但是具体内容什么的我已经无力想起了，不过看到我还是认识的。言归正传，下面就来回顾一下踩坑流水帐。</p><h3 id="1-Echarts-Graph"><a href="#1-Echarts-Graph" class="headerlink" title="1. Echarts Graph"></a>1. Echarts Graph</h3><p>如果使用过 <code>echart</code> 系列图表，那么 <code>graph</code> 关系图还是相对比较容易上手的，毕竟是高度可定制化套路一样同类型属性名也一样。</p><span id="more"></span><p>但是使用过程中我还是踩到了坑：由于数据返回节点的 <code>name</code> 字符比较长，为了美观前端显示的时候要做个性化样式设计包括换行超出字符省略等等，我天真又粗暴的直接在 <code>name</code> 上动刀了，虽然我知道 <code>name</code> 不能有重复，但我还是撞了南墙，因为部分 <code>name</code> 做个性化处理之后显示的剩余那部分字符相同，所以触碰了 <code>name</code> 不能重复的红线。<br>解决：<code>name</code> 拿来原封不动，在 <code>label</code> 上做 <code>formatter</code> 处理。</p><blockquote><p>注意：每一个节点的 <code>name</code> 要唯一，如果有重复的 <code>name</code> 就会报如下错，类似于遍历时的 <code>key</code> 值是唯一的。</p></blockquote><p><img src="/2020/11/18/react-ts-d3/pic1.png" alt="image1"></p><h3 id="2-词云-echarts-wordcloud"><a href="#2-词云-echarts-wordcloud" class="headerlink" title="2. 词云 echarts-wordcloud"></a>2. 词云 echarts-wordcloud</h3><p>这是一个基于 <code>echarts</code> 封装的第三方库，使用中没有踩到值得一提的坑。<br>部分代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">interface IWordCloud &#123;</span><br><span class="line">    <span class="attr">list</span>: ICommonProps[];</span><br><span class="line">    width: number;</span><br><span class="line">    height: number;</span><br><span class="line">    fontSizeRange: number[];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> WordCloud: React.FC&lt;IWordCloud&gt; = <span class="function">(<span class="params">props: IWordCloud</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; list, width, height, fontSizeRange &#125; = props;</span><br><span class="line"></span><br><span class="line">    useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        drawWordCloud();</span><br><span class="line">    &#125;, [list]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> drawWordCloud = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> wordElement = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;wordCloud&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> chart = echarts.init(wordElement <span class="keyword">as</span> HTMLDivElement);</span><br><span class="line">        <span class="keyword">let</span> data = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">in</span> list) &#123;</span><br><span class="line">            data.push(&#123;</span><br><span class="line">                <span class="attr">name</span>: list[index].name,</span><br><span class="line">                <span class="attr">value</span>: <span class="built_in">Math</span>.sqrt(list[index].value)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> maskImage = <span class="keyword">new</span> Image();</span><br><span class="line">        maskImage.src = bg;</span><br><span class="line">        <span class="keyword">let</span> option = &#123;</span><br><span class="line">            <span class="attr">series</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&#x27;wordCloud&#x27;</span>,</span><br><span class="line">                    <span class="attr">left</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">                    <span class="attr">top</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">                    <span class="attr">width</span>: <span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line">                    <span class="attr">height</span>: <span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line">                    <span class="attr">right</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="attr">bottom</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="attr">sizeRange</span>: fontSizeRange, <span class="comment">// 字号</span></span><br><span class="line">                    <span class="attr">rotationRange</span>: [-<span class="number">90</span>, <span class="number">90</span>],</span><br><span class="line">                    <span class="attr">rotationStep</span>: <span class="number">90</span>,</span><br><span class="line">                    <span class="attr">gridSize</span>: fontSizeRange[<span class="number">0</span>] - <span class="number">2</span>,</span><br><span class="line">                    <span class="attr">shape</span>: <span class="string">&#x27;circle&#x27;</span>, <span class="comment">// diamond/triangle/circle/pentagon/star</span></span><br><span class="line">                    <span class="comment">// maskImage: maskImage,</span></span><br><span class="line">                    <span class="attr">textStyle</span>: &#123;</span><br><span class="line">                        <span class="attr">normal</span>: &#123;</span><br><span class="line">                            <span class="comment">// fontFamily: &#x27;微软雅黑&#x27;,</span></span><br><span class="line">                            <span class="comment">// fontWeight: &#x27;normal&#x27;,</span></span><br><span class="line">                            <span class="comment">// Color can be a callback function or a color string</span></span><br><span class="line">                            <span class="attr">color</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                                <span class="comment">// Random color</span></span><br><span class="line">                                <span class="keyword">return</span> WORD_CLOUD_COLORS[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">3</span>)];</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">emphasis</span>: &#123;</span><br><span class="line">                            <span class="attr">shadowBlur</span>: <span class="number">2</span>,</span><br><span class="line">                            <span class="attr">shadowColor</span>: <span class="string">&#x27;#1890ff&#x27;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">data</span>: data</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;;</span><br><span class="line">        chart.setOption(option);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;wordCloud&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">height:</span> <span class="attr">height</span>, <span class="attr">width:</span> <span class="attr">width</span> &#125;&#125; /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>效果图如下：<br><img src="/2020/11/18/react-ts-d3/pic2.png" alt="image"></p><h3 id="3-echarts-legend-个性化细节"><a href="#3-echarts-legend-个性化细节" class="headerlink" title="3.echarts legend 个性化细节"></a>3.echarts legend 个性化细节</h3><p>可能对别人来说是小儿科，只是它是我初次发现的比较符合我项目中需求的点。</p><p>1.<code>legend</code> 图例标记的图形除了定制的哪几种形状还可以设置宽高 <code>itemWidth</code>、<code>itemHeight</code>。 2.<code>legend</code> 文字块的宽定制这样可以是 <code>value</code> 左对齐。 3.<code>legend</code> 也有 <code>tooltip</code>。<br>如下图：<br><img src="/2020/11/18/react-ts-d3/pic3.png" alt="image3"></p><h3 id="4-d3-力导向图——-force"><a href="#4-d3-力导向图——-force" class="headerlink" title="4. d3 力导向图—— force"></a>4. d3 力导向图—— force</h3><p>使用 <code>ts</code> 时部分第三方库的定义的各种类型定位起来还是有点烧脑的。<br>我在使用过程中 drag 函数的范型大概折磨了我一周左右最后在庄哥的帮助下终于解决了。<br><img src="/2020/11/18/react-ts-d3/pic4.png" alt="img4"></p><p>部分代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create a force simulation</span></span><br><span class="line">    <span class="keyword">const</span> initForceSimulation = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> linkForce = d3</span><br><span class="line">                .forceLink&lt;INode, ILink&gt;(linksData)</span><br><span class="line">                .id(<span class="function">(<span class="params">data: INode</span>) =&gt;</span> data.id)</span><br><span class="line">                .distance(<span class="number">200</span>);</span><br><span class="line">            <span class="keyword">const</span> nodeCollision = d3</span><br><span class="line">                .forceCollide()</span><br><span class="line">                .radius(<span class="number">80</span>)</span><br><span class="line">                .iterations(<span class="number">0.5</span>)</span><br><span class="line">                .strength(<span class="number">0.5</span>);</span><br><span class="line">            <span class="keyword">const</span> nodeCharge = d3.forceManyBody().strength(-<span class="number">300</span>).theta(<span class="number">0.01</span>);</span><br><span class="line">            simulationRef.current = d3</span><br><span class="line">                .forceSimulation&lt;INode, ILink&gt;(nodesData)</span><br><span class="line">                .alpha(<span class="number">0.3</span>) <span class="comment">// 活力，渲染之后再自动动多久到达目标位置</span></span><br><span class="line">                .force(<span class="string">&#x27;link&#x27;</span>, linkForce) <span class="comment">// 映射id &amp; 线的长度</span></span><br><span class="line">                .force(<span class="string">&#x27;x&#x27;</span>, d3.forceX())</span><br><span class="line">                .force(<span class="string">&#x27;y&#x27;</span>, d3.forceY())</span><br><span class="line">                .force(<span class="string">&#x27;center&#x27;</span>, d3.forceCenter(svgWidth / <span class="number">2</span>, svgHeight / <span class="number">2</span>))</span><br><span class="line">                .force(<span class="string">&#x27;collision&#x27;</span>, nodeCollision)<span class="comment">// 避免节点相互覆盖</span></span><br><span class="line">                .force(<span class="string">&#x27;charge&#x27;</span>, nodeCharge);<span class="comment">// 节点间相互排斥的电磁力</span></span><br><span class="line"></span><br><span class="line">            simulationRef.current.nodes(nodesData).on(<span class="string">&#x27;tick&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                edges</span><br><span class="line">                    .attr(<span class="string">&#x27;x1&#x27;</span>, <span class="function">(<span class="params">&#123; source &#125;</span>) =&gt;</span> (source <span class="keyword">as</span> INode).x || <span class="number">0</span>)</span><br><span class="line">                    .attr(<span class="string">&#x27;y1&#x27;</span>, <span class="function">(<span class="params">&#123; source &#125;</span>) =&gt;</span> (source <span class="keyword">as</span> INode).y || <span class="number">0</span>)</span><br><span class="line">                    .attr(<span class="string">&#x27;x2&#x27;</span>, <span class="function">(<span class="params">&#123; target &#125;</span>) =&gt;</span> (target <span class="keyword">as</span> INode).x || <span class="number">0</span>)</span><br><span class="line">                    .attr(<span class="string">&#x27;y2&#x27;</span>, <span class="function">(<span class="params">&#123; target &#125;</span>) =&gt;</span> (target <span class="keyword">as</span> INode).y || <span class="number">0</span>);</span><br><span class="line">                nodes.attr(<span class="string">&#x27;transform&#x27;</span>, <span class="function">(<span class="params">data: any</span>) =&gt;</span> <span class="string">`translate(<span class="subst">$&#123;data.x&#125;</span>, <span class="subst">$&#123;data.y&#125;</span>)`</span>);</span><br><span class="line">                edgepaths.attr(</span><br><span class="line">                    <span class="string">&#x27;d&#x27;</span>,</span><br><span class="line">                    <span class="function">(<span class="params">&#123; target, source &#125;</span>) =&gt;</span></span><br><span class="line">                        <span class="string">&#x27;M &#x27;</span> +</span><br><span class="line">                        (source <span class="keyword">as</span> INode).x +</span><br><span class="line">                        <span class="string">&#x27; &#x27;</span> +</span><br><span class="line">                        (source <span class="keyword">as</span> INode).y +</span><br><span class="line">                        <span class="string">&#x27; L &#x27;</span> +</span><br><span class="line">                        (target <span class="keyword">as</span> INode).x +</span><br><span class="line">                        <span class="string">&#x27; &#x27;</span> +</span><br><span class="line">                        (target <span class="keyword">as</span> INode).y</span><br><span class="line">                );</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">const</span> edges = drewLines(); <span class="comment">// draw lines</span></span><br><span class="line">            <span class="keyword">const</span> nodes = drawNodes(); <span class="comment">// draw nodes</span></span><br><span class="line">            <span class="keyword">const</span> edgepaths = drawEdgeLabel(); <span class="comment">// draw relation label</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(error);</span><br><span class="line">            message.error(<span class="string">&#x27;内部错误，&#x27;</span> + <span class="built_in">JSON</span>.stringify(error));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>最后，推荐一个切换全屏库： screenfull。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">react-ts-d3</summary>
    
    
    
    <category term="React" scheme="https://yingliyu.github.io/categories/React/"/>
    
    <category term="Typescript" scheme="https://yingliyu.github.io/categories/React/Typescript/"/>
    
    
    <category term="react" scheme="https://yingliyu.github.io/tags/react/"/>
    
    <category term="typescript" scheme="https://yingliyu.github.io/tags/typescript/"/>
    
    <category term="d3" scheme="https://yingliyu.github.io/tags/d3/"/>
    
  </entry>
  
  <entry>
    <title>React+AntD+Redux 的项目实战总结</title>
    <link href="https://yingliyu.github.io/2020/07/18/react-share-bike/"/>
    <id>https://yingliyu.github.io/2020/07/18/react-share-bike/</id>
    <published>2020-07-18T15:46:43.000Z</published>
    <updated>2021-10-17T06:57:20.257Z</updated>
    
    <content type="html"><![CDATA[<!-- ![1.jepg](1.jpeg) --><h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>最近用 <code>React Hook</code> 实战了一个 React 项目。今天来总结一下，因为都是拼凑的时间所以项目历时半个多月之久，通过本次学习进一步的熟悉了 <code>AntD</code> 常用组件的使用，业务功能（增删改查）的开发及百度地图 API、富文本组件的使用、权限设置模块，最重要的是把学习的 <code>React Hook</code> 落实到了项目中。</p><span id="more"></span><h5 id="1-百度地图的使用"><a href="#1-百度地图的使用" class="headerlink" title="1.百度地图的使用"></a>1.百度地图的使用</h5><p>前提：先注册成为百度地图开放平台的用户，然后获取密钥 ak。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script</span><br><span class="line">    <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span></span><br><span class="line">    src=<span class="string">&quot;https://api.map.baidu.com/api?v=1.0&amp;type=webgl&amp;ak=xxxxxxxxxx&quot;</span></span><br><span class="line">  &gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./index.module.less&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Card &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="built_in">Map</span> <span class="keyword">from</span> <span class="string">&#x27;./data.json&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">OrderManage</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [total, setTotal] = useState(<span class="number">0</span>)</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    initData()</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> initData = <span class="keyword">async</span> (params) =&gt; &#123;</span><br><span class="line">    setTotal(<span class="built_in">Map</span>.data.total)</span><br><span class="line">    renderMap(<span class="built_in">Map</span>.data)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> renderMap = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> list = data.route_list</span><br><span class="line">    <span class="comment">// 初始化地图</span></span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Map(<span class="string">&#x27;container&#x27;</span>, &#123; <span class="attr">enableMapClick</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    <span class="keyword">const</span> gps2 = list[list.length - <span class="number">1</span>].split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> endPoint = <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Point(gps2[<span class="number">0</span>], gps2[<span class="number">1</span>])</span><br><span class="line">    map.centerAndZoom(<span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Point(endPoint.lng, endPoint.lat), <span class="number">11</span>)</span><br><span class="line">    addMapContrl(map)</span><br><span class="line">    addBikeRoutes(map, list)</span><br><span class="line">    renderMapService(map, data.service_list)</span><br><span class="line">    addBikeIcon(map, data.bike_list)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 添加自行车图标</span></span><br><span class="line">  <span class="keyword">const</span> addBikeIcon = <span class="function">(<span class="params">map, list</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> bikeIcon = <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Icon(</span><br><span class="line">      <span class="built_in">require</span>(<span class="string">&#x27;./imgs/bike.jpg&#x27;</span>),</span><br><span class="line">      <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Size(<span class="number">30</span>, <span class="number">35</span>),</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">imageSize</span>: <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Size(<span class="number">30</span>, <span class="number">35</span>),</span><br><span class="line">        <span class="attr">anchor</span>: <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Size(<span class="number">15</span>, <span class="number">42</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    list.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> p = item.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">      <span class="keyword">let</span> point = <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Point(p[<span class="number">0</span>], p[<span class="number">1</span>])</span><br><span class="line">      <span class="keyword">let</span> marker = <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Marker(point, &#123; <span class="attr">icon</span>: bikeIcon &#125;)</span><br><span class="line">      map.addOverlay(marker)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 绘制服务区</span></span><br><span class="line">  <span class="keyword">const</span> renderMapService = <span class="function">(<span class="params">map, list</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> servicesList = []</span><br><span class="line">    list.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      servicesList.push(<span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Point(item.lon, item.lat))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> polygon = <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Polyline(servicesList, &#123;</span><br><span class="line">      <span class="attr">strokeColor</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">      <span class="attr">strokeWidth</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="attr">strokeOpacity</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">fillColor</span>: <span class="string">&#x27;orange&#x27;</span>,</span><br><span class="line">      <span class="attr">fillOpacity</span>: <span class="number">0.4</span></span><br><span class="line">    &#125;)</span><br><span class="line">    map.addOverlay(polygon)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加地图起始图标及骑行路线</span></span><br><span class="line">  <span class="keyword">const</span> addBikeRoutes = <span class="function">(<span class="params">map, list</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> gps1 = list[<span class="number">0</span>].split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> gps2 = list[list.length - <span class="number">1</span>].split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> startPoint = <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Point(gps1[<span class="number">0</span>], gps1[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">const</span> endPoint = <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Point(gps2[<span class="number">0</span>], gps2[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">let</span> startPointIcon = <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Icon(</span><br><span class="line">      <span class="built_in">require</span>(<span class="string">&#x27;./imgs/start_point.png&#x27;</span>),</span><br><span class="line">      <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Size(<span class="number">36</span>, <span class="number">42</span>),</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">imageSize</span>: <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Size(<span class="number">36</span>, <span class="number">42</span>),</span><br><span class="line">        <span class="attr">anchor</span>: <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Size(<span class="number">18</span>, <span class="number">42</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 创建标注对象并添加到地图</span></span><br><span class="line">    <span class="keyword">let</span> startMarker = <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Marker(startPoint, &#123; <span class="attr">icon</span>: startPointIcon &#125;)</span><br><span class="line">    map.addOverlay(startMarker)</span><br><span class="line">    <span class="keyword">let</span> endPointIcon = <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Icon(</span><br><span class="line">      <span class="built_in">require</span>(<span class="string">&#x27;./imgs/end_point.png&#x27;</span>),</span><br><span class="line">      <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Size(<span class="number">36</span>, <span class="number">42</span>),</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">imageSize</span>: <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Size(<span class="number">36</span>, <span class="number">42</span>),</span><br><span class="line">        <span class="attr">anchor</span>: <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Size(<span class="number">18</span>, <span class="number">42</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 创建标注对象并添加到地图</span></span><br><span class="line">    <span class="keyword">let</span> endMarker = <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Marker(endPoint, &#123; <span class="attr">icon</span>: endPointIcon &#125;)</span><br><span class="line">    map.addOverlay(endMarker)</span><br><span class="line">    <span class="comment">// 绘制行车路线</span></span><br><span class="line">    <span class="keyword">let</span> routesList = []</span><br><span class="line">    list.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> p = item.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">      routesList.push(<span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Point(p[<span class="number">0</span>], p[<span class="number">1</span>]))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> polyline = <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Polyline(routesList, &#123;</span><br><span class="line">      <span class="attr">strokeColor</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">      <span class="attr">strokeWidth</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="attr">strokeOpacity</span>: <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">    map.addOverlay(polyline)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 添加地图控件</span></span><br><span class="line">  <span class="keyword">const</span> addMapContrl = <span class="function">(<span class="params">map</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// map.enableScrollWheelZoom(true) // 开启鼠标滚轮缩放</span></span><br><span class="line">    <span class="keyword">let</span> scaleCtrl = <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.ScaleControl(&#123; <span class="attr">anchor</span>: <span class="built_in">window</span>.BMAP_ANCHOR_BOTTOM_LEFT &#125;) <span class="comment">// 添加比例尺控件</span></span><br><span class="line">    map.addControl(scaleCtrl)</span><br><span class="line">    <span class="keyword">let</span> zoomCtrl = <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.ZoomControl(&#123; <span class="attr">anchor</span>: <span class="built_in">window</span>.BMAP_ANCHOR_TOP_RIGHT &#125;) <span class="comment">// 添加缩放控件</span></span><br><span class="line">    map.addControl(zoomCtrl)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles[</span>&#x27;<span class="attr">order-manage-wrapper</span>&#x27;]&#125;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Card</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">QueryForm</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">submitHandle</span>=<span class="string">&#123;handleSearchSubmit&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">formList</span>=<span class="string">&#123;formList&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">initialValues</span>=<span class="string">&#123;searchFormDefaultValues&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Card</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>共搜询到&#123;total&#125;个<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">width:</span> &#x27;<span class="attr">100</span>%&#x27;, <span class="attr">height:</span> <span class="attr">600</span> &#125;&#125; /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题：添加地图覆盖物的时候给多边形加填充色无效暂未解决。</p><h5 id="2-富文本组件使用"><a href="#2-富文本组件使用" class="headerlink" title="2.富文本组件使用"></a>2.富文本组件使用</h5><p>使用组件 <code>braft-editor</code><br>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install braft-editor</span><br><span class="line">// or</span><br><span class="line">yarn add braft-editor</span><br></pre></td></tr></table></figure><p>基本用法：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Card, Button, Space, Modal &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span></span><br><span class="line"><span class="keyword">import</span> BraftEditor <span class="keyword">from</span> <span class="string">&#x27;braft-editor&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;braft-editor/dist/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./index.module.less&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">RichText</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [editorState, setEditorState] = useState(BraftEditor.createEditorState(<span class="literal">null</span>))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> getBraftContent = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 将editorState数据转换成html字符串</span></span><br><span class="line">    Modal.info(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;富文本内容&#x27;</span>,</span><br><span class="line">      <span class="attr">content</span>: editorState.toHTML()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> handleBraftChange = <span class="function">(<span class="params">editorState</span>) =&gt;</span> &#123;</span><br><span class="line">    setEditorState(editorState)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> submitContent = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 在编辑器获得焦点时按下ctrl+s会执行此方法</span></span><br><span class="line">    <span class="comment">// 编辑器内容提交到服务端之前，可直接调用editorState.toHTML()来获取HTML格式的内容</span></span><br><span class="line">    <span class="keyword">const</span> htmlContent = editorState.toHTML()</span><br><span class="line">    <span class="built_in">console</span>.log(htmlContent)</span><br><span class="line">    <span class="comment">// const result = await saveEditorContent(htmlContent)</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles[</span>&#x27;<span class="attr">rich-text-wrapper</span>&#x27;]&#125;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Card</span> <span class="attr">title</span>=<span class="string">&quot;富文本——braft-editor&quot;</span> <span class="attr">className</span>=<span class="string">&#123;styles[</span>&#x27;<span class="attr">rich-text-inner</span>&#x27;]&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Space</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;getBraftContent&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">              获取富文本内容</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">Space</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">BraftEditor</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">className</span>=<span class="string">&#123;styles[</span>&#x27;<span class="attr">braft-editor</span>&#x27;]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">value</span>=<span class="string">&#123;editorState&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">contentStyle</span>=<span class="string">&#123;&#123;</span> <span class="attr">height:</span> <span class="attr">400</span>, <span class="attr">boxShadow:</span> &#x27;<span class="attr">inset</span> <span class="attr">0</span> <span class="attr">1px</span> <span class="attr">3px</span> <span class="attr">rgba</span>(<span class="attr">0</span>,<span class="attr">0</span>,<span class="attr">0</span>,<span class="attr">.1</span>)&#x27; &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">onChange</span>=<span class="string">&#123;handleBraftChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">onSave</span>=<span class="string">&#123;submitContent&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>项目中踩到的坑：<br>最开始使用的富文本组件是<code>react-draft-wysiwyg</code>,它依赖于<code>draft-js</code>，所以要安装这个，整个使用过程是完全没有问题的。就在使用第二种富文本组件<code>braft-editor</code>的时候入坑了，一直获取不到富文本的内容，使用<code>toHTML()</code>的时候报错，这个组件本来就是中国人写的文档也很详细自己觉得使用起来应该毫无障碍的，但就是堵到这里进行不下去，删除<code>node_modules</code>重新安装也还是不行，最后的最后发现<code>draft-js</code>是罪魁祸首啊啊啊。原来它与<code>draft-js</code>水火不容，我之前安装过<code>draft-js</code>，所以使用<code>braft-editor</code>的时候有问题，把它卸掉之后就解决了。不过不用担心卸掉之后也不影响<code>react-draft-wysiwyg</code>组件的使用，猜想应该是<code>braft-editor</code>内部集成<code>draft-js</code>了吧，总之能用才是王道，不过大部分情况使用一种就够了。</p><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>参考：</p><ol><li><a href="https://jpuri.github.io/react-draft-wysiwyg/#/">https://jpuri.github.io/react-draft-wysiwyg/#/</a></li><li><a href="https://braft.margox.cn/demos/basic">https://braft.margox.cn/demos/basic</a></li></ol><blockquote><p>不积跬步无以至千里，不积小流无以成江海，默默努力，然后悄悄拔尖。</p></blockquote><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">react</summary>
    
    
    
    <category term="React" scheme="https://yingliyu.github.io/categories/React/"/>
    
    
    <category term="react" scheme="https://yingliyu.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react-hook入门手册</title>
    <link href="https://yingliyu.github.io/2020/06/28/react-hook/"/>
    <id>https://yingliyu.github.io/2020/06/28/react-hook/</id>
    <published>2020-06-28T15:49:02.000Z</published>
    <updated>2021-10-17T06:57:20.257Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>React Hooks 是 React 16.12 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。</p><h3 id="1-useState"><a href="#1-useState" class="headerlink" title="1.useState"></a>1.useState</h3><blockquote><p>调用<code>useState</code>方法时做了什么？</p></blockquote><p>定义一个 state 变量，这是一种在函数调用时保存变量的方式——<code>useState</code>是一种新方法，它与<code>class</code>里的<code>this.state</code>提供的功能完全相同。一般来说，在函数退出后变量就会“消失”，而<code>state</code>中的变量会被<code>react</code>保留。</p><span id="more"></span><blockquote><p><code>useState</code>函数需要那些参数？</p></blockquote><p>唯一的参数就是初始<code>state</code>。不同于<code>class</code>，我们可以按照需要使用数字或者字符串对其进行赋值，而不一定是对象。如果想要在<code>state</code>中存储两个不同的变量，只需要调用<code>useState()</code>两次即可。</p><blockquote><p><code>useState</code>方法的返回值是什么?</p></blockquote><p>返回值为：当前<code>state</code>和更新<code>state</code>的函数。这与<code>class</code>里的<code>this.state.count</code>和<code>this.setState</code>类似，唯一的区别就是你需要成对的获取他们。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入React中的useState Hook。它让我们在函数组件中存储内部state。</span></span><br><span class="line"><span class="keyword">import</span> React,&#123;useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> Example = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 声明一个叫‘count’的state变量，初始值为0</span></span><br><span class="line"><span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">         // 当用户点击按钮后，传递一个新的值给setCount。react会重新渲染Example组件，并把最新的count传给它。</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="xml">         Click me</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-useEffect"><a href="#2-useEffect" class="headerlink" title="2.useEffect"></a>2.useEffect</h3><blockquote><p>Effect Hook 可以让你在函数组件中执行副作用操作(DOM 操作、数据请求、组件更新)。可以把它看作 componentDidMount、componentDidUpdate 和 componentWillUnmount 这三个函数的组合。</p></blockquote><p>useEffect 可以在组件渲染后实现各种不同的副作用。有些副作用可能需要清除，有些不需要，所以就分为不需要清除的 effect 和需要清除的 effect。</p><h5 id="不需要清除的-effect"><a href="#不需要清除的-effect" class="headerlink" title="不需要清除的 effect"></a>不需要清除的 effect</h5><blockquote><p><code>useEffect</code>做了什么？</p></blockquote><p>通过使用这个<code>hook</code>，可以告诉<code>React</code>组件需要在渲染后执行某些操作。<code>React</code>会保存你传递的函数（我们将它称之为<code>“effect”</code>），并且在执行 DOM 更新后调用它。在这个<code>effect</code>中，我们设置了<code>document</code>的<code>title</code>属性，不过我们也可以执行数据获取或调用其他命令式的 API。</p><blockquote><p>为什么在组件内部调用<code>useEffect</code>?</p></blockquote><p>将<code>useEffect</code>放在组件内部让我们可以在<code>effect</code>中直接访问<code>count state</code>变量或其他<code>props</code>。我们不需要特殊的 api 来读取他，他已经保存在函数作用域中。<code>Hook</code>是使用了<code>Javascript</code>的闭包机制，而不是在 js 已经提供了解决方案的情况下，还引入特定的 React API。</p><blockquote><p><code>useEffect</code>会在每次渲染后都执行吗？</p></blockquote><p>是的，默认情况下，它在第一次渲染之后和每次更次呢之后都会执行。React 保证了每次运行<code>effect</code>的同时，DOM 都已经更新完毕。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Similar to componentDidMount and componentDidUpdate:</span></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// update the document title using the browser API</span></span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times!`</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次更新 DOM 后 useEffect 都会执行，这个过程每次渲染时都会发生，包括首次渲染。<br>与 componentDidMount 或 componentDidUpdate 不同使用 useEffect 调度的 effect 不会阻塞浏览器更新屏幕，这让你的应用看起来响应更快。大多数情况下，effect 不需要同步执行。在个别情况下有单独的 useLayoutEffect Hook 供你使用，其 api 与 useEffect 相同。</p><h5 id="需要清除的-effect"><a href="#需要清除的-effect" class="headerlink" title="需要清除的 effect"></a>需要清除的 effect</h5><blockquote><p>为什么要在 effect 中返回一个函数？</p></blockquote><p>这是 effect 可选的清除机制。每个 effect 都可以返回一个清除函数，如此可以将添加和医护订阅的逻辑放在一起。他们都属于 effect 的一部分。</p><blockquote><p>React 何时清楚 effect？</p></blockquote><p>React 会在组件卸载的时候执行清除操作。正如之前学到的，effect 在每次执行渲染的时候都会执行。这就是为什么 React 会在执行当前 effect 之前对上一个 effect 进行清除。</p><p>注意：并不是必须为 effect 中返回的函数命名。这里我们将其命名为 cleanup 是为了表明函数的目的，但其实也可以返回一个箭头函数或者给起一个别的名字。</p><h3 id="3-useReducer"><a href="#3-useReducer" class="headerlink" title="3.useReducer"></a>3.useReducer</h3><p>useState 的替代方案：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useReducer &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> initialState = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;increment&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.count + <span class="number">1</span> &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;decrement&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.count - <span class="number">1</span> &#125;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = useReducer(reducer, initialState)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Similar to componentDidMount and componentDidUpdate:</span></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// update the document title using the browser API</span></span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;state.count&#125;</span> times!`</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>You clicked &#123;state.count&#125; times<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &#x27;increment&#x27; &#125;)&#125;&gt;Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &#x27;decrement&#x27; &#125;)&#125;&gt;Decrement<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-useRef"><a href="#4-useRef" class="headerlink" title="4.useRef"></a>4.useRef</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> refContainer = userRef(initialValue)</span><br></pre></td></tr></table></figure><p>返回一个可变的 ref 对象，其.current 属性被初始化未传入的参数 initiaValue。返回的 red 对象在组件的整个生命周期内保持不变。<br>一个常见的用例便是命令式的访问子组件：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TextInputWithFocusButton</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> inputEl = useRef(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> onButtonClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// `current` 指向已挂载到 DOM 上的文本输入元素</span></span><br><span class="line">    <span class="built_in">console</span>.log(inputEl.current.value()</span><br><span class="line">    inputEl.current.focus();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;inputEl&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onButtonClick&#125;</span>&gt;</span>Focus the input<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当 ref 对象内容发生变化时，useRef 并不会通知你。变更.current 属性不会引发组件重新渲染。如果想要在 React 绑定或者解绑 DOM 节点的 ref 时运行某些代码，则需要使用回调 ref 来实现。</p></blockquote><h3 id="5-Hook-的规则"><a href="#5-Hook-的规则" class="headerlink" title="5.Hook 的规则"></a>5.Hook 的规则</h3><p>Hook 本质就是 js 函数但是在使用它时需要遵循两条规则。可以使用 linter 插件来强制执行这些规则。</p><blockquote><p>1.只在最顶层使用 Hook</p></blockquote><p>确保总是在你的 React 函数的最顶层调用他们，不要再条件判断或循环中调用。</p><blockquote><p>2.只在 React 函数中调用 Hook</p></blockquote><p>不要在普通的 js 函数中调用 Hook，可以：<br>在 React 的函数组件中调用 Hook<br>在自定义 Hook 中调用其他 Hook</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>1.参考<a href="https://react.docschina.org/docs/hooks-intro.html">官方文档</a></p><p>2.实战项目：<a href="https://github.com/yingliyu/react-hook-todo-list">github/react-hook-todo-list</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">react-hook</summary>
    
    
    
    <category term="React" scheme="https://yingliyu.github.io/categories/React/"/>
    
    
    <category term="react-hook" scheme="https://yingliyu.github.io/tags/react-hook/"/>
    
  </entry>
  
  <entry>
    <title>vue中v-for和v-if不能同时使用解决方案</title>
    <link href="https://yingliyu.github.io/2020/06/16/vue-if-for/"/>
    <id>https://yingliyu.github.io/2020/06/16/vue-if-for/</id>
    <published>2020-06-16T09:44:21.000Z</published>
    <updated>2021-10-17T06:57:20.261Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>为什么不可以呢？我们 <code>JS</code> 的使用习惯在遍历时使用条件判断是很常见的， <code>vue</code> 模版中当然也是可以使用的，但是<code>v-for</code>和<code>v-if</code>不可以出现在同一个元素上。<br>因为在 <code>vue</code> 中会优先执行 <code>v-for</code>,如果每一次都遍历整个数组，将会影响速度，尤其是当之需要渲染很小一部分的时候。</p></blockquote><h3 id="使用情景"><a href="#使用情景" class="headerlink" title="使用情景"></a>使用情景</h3><blockquote><p><code>v-for</code> 和 <code>v-if</code> 同时使用有 3 种情景：</p><ol><li> 部分遍历（内/外部条件）：一个 <code>list</code> 中某个属性值符合条件的遍历出来；</li><li> 全部遍历（外部条件）：某外部条件符合条件时遍历全部。</li><li> 全部遍历（内部条件）：根据某内部条件渲染出不同的内容。</li></ol></blockquote><p>注：内部条件指被遍历数据内部属性值或条件；外部条件指与独立于被遍历数据以外的数据。</p><span id="more"></span><h3 id="1-使用计算属性（内-外部条件）"><a href="#1-使用计算属性（内-外部条件）" class="headerlink" title="1.使用计算属性（内/外部条件）"></a>1.使用计算属性（内/外部条件）</h3><blockquote><p>在计算属性中先用内/外部条件处理数据，再遍历处理后的数据</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 遍历list，条件是值小于100 方案：使用计算属性activeList首先筛选出符合条件的值再直接遍历 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in activeList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">list</span>: [<span class="number">78</span>, <span class="number">90</span>, <span class="number">20</span>, <span class="number">45</span>, <span class="number">66</span>, <span class="number">120</span>, <span class="number">136</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">activeList</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.list.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> item &lt; <span class="number">100</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-条件放于父级元素（外部条件）"><a href="#2-条件放于父级元素（外部条件）" class="headerlink" title="2.条件放于父级元素（外部条件）"></a>2.条件放于父级元素（外部条件）</h3><blockquote><p>解决方案：外部条件放到遍历的父级元素上，没有父级可以使用<code>&lt;template&gt;&lt;/template&gt;</code>。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-if</span>=<span class="string">&quot;isActive&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- or --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;isActive&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello,My name is Lillian!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">isActive</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">list</span>: [<span class="number">78</span>, <span class="number">90</span>, <span class="number">20</span>, <span class="number">45</span>, <span class="number">66</span>, <span class="number">120</span>, <span class="number">136</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-遍历-template（内部条件）"><a href="#3-遍历-template（内部条件）" class="headerlink" title="3.遍历 template（内部条件）"></a>3.遍历 <code>template</code>（内部条件）</h3><blockquote><p>根据某内部条件，显示不同内容。注意 <code>key</code> 不能放 <code>template</code> 标签上。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;item.type===0&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span>文字+图标<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;item.type===1&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span>文字+文字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span>其他<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>vue</code> 中会优先执行 <code>v-for</code>, 当 <code>v-for</code> 把所有内容全部遍历之后 , <code>v-if</code> 再对已经遍历的元素进行删除 , 造成了加载的浪费 , 所以应该尽量在执行 <code>v-for</code> 之前优先执行 <code>v-if</code> , 可以减少加载的压力。</p><p>参考：<a href="https://cn.vuejs.org/v2/style-guide/#%E9%81%BF%E5%85%8D-v-if-%E5%92%8C-v-for-%E7%94%A8%E5%9C%A8%E4%B8%80%E8%B5%B7%E5%BF%85%E8%A6%81">https://cn.vuejs.org/v2/style-guide</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">vue中v-for和v-if不能同时使用解决方案</summary>
    
    
    
    <category term="VUE" scheme="https://yingliyu.github.io/categories/VUE/"/>
    
    
    <category term="v-for与v-if" scheme="https://yingliyu.github.io/tags/v-for%E4%B8%8Ev-if/"/>
    
  </entry>
  
  <entry>
    <title>css文字超出显示省略号</title>
    <link href="https://yingliyu.github.io/2020/06/09/text-ellipsis/"/>
    <id>https://yingliyu.github.io/2020/06/09/text-ellipsis/</id>
    <published>2020-06-09T11:11:17.000Z</published>
    <updated>2021-10-17T06:57:20.261Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一-单行文本超出省略"><a href="#一-单行文本超出省略" class="headerlink" title="一.单行文本超出省略"></a>一.单行文本超出省略</h5><blockquote><p>关键属性：<code>text-overflow:ellipsis|clip</code> 。<br><code>clip</code> : 　不显示省略标记（…），而是简单的裁切掉溢出的文本<br><code>ellipsis</code> : 　当对象内文本溢出时显示省略标记（…）<br><code>string</code>: 使用指定字符串来代表被修剪的文本<br>兼容性：所有主流浏览器都兼容, IE6+</p></blockquote><p>1.css 实现：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.css+html 实现：</p><blockquote><p>使用<code>&lt;nobr&gt;</code>不换行标签（行内标签）此标签与 css <code>white-space</code> 功能相同。<br>详情参考<a href="http://www.divcss5.com/html/h533.shtml">http://www.divcss5.com/html/h533.shtml</a> 。<br><code>&lt;nobr&gt;</code>兼容性：IE11+</p></blockquote><span id="more"></span><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nobr &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">nobr</span>&gt;</span></span><br><span class="line">    我是禁止换行标签。我是禁止换行标签。 我是禁止换行标签。我是禁止换行标签。</span><br><span class="line">    我是禁止换行标签。我是禁止换行标签。</span><br><span class="line">  <span class="tag">&lt;/<span class="name">nobr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="二-多行文本超出省略"><a href="#二-多行文本超出省略" class="headerlink" title="二.多行文本超出省略"></a>二.多行文本超出省略</h5><blockquote><p><code>-webkit-line-clamp</code>:限制在一个块元素显示的文本的行数。是一个不规范的属性，未出现在 css 规范草案中。<br>为了实现该效果，它必须要结合其他的属性 ：<br><code>display: -webkit-box;</code> 必须结合的属性 ，将对象作为弹性伸缩盒子模型显示 。<br><code>-webkit-box-orient</code> 必须结合的属性 ，设置或检索伸缩盒对象的子元素的排列方式 。<br>兼容性：适用于 webkit 浏览器或移动端，详情：<a href="https://www.caniuse.com/#search=-webkit-line-clamp">https://www.caniuse.com/#search=-webkit-line-clamp</a></p></blockquote><p>以超出 3 行内容省略为例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  -webkit-line-clamp: <span class="number">3</span>;</span><br><span class="line">  -webkit-box-orient: vertical;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跨浏览器兼容方案：(IE9+)<br>注意：<code>hight</code> 是 <code>line-height</code> 的 3 倍</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.p</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.p</span>:after &#123;</span><br><span class="line">  content: <span class="string">&#x27;...&#x27;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">1</span>) <span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">css文字超出显示...</summary>
    
    
    
    <category term="CSS" scheme="https://yingliyu.github.io/categories/CSS/"/>
    
    
    <category term="text-ellipsis" scheme="https://yingliyu.github.io/tags/text-ellipsis/"/>
    
    <category term="-webkit-line-clamp" scheme="https://yingliyu.github.io/tags/webkit-line-clamp/"/>
    
  </entry>
  
  <entry>
    <title>ie浏览器踩坑系列</title>
    <link href="https://yingliyu.github.io/2020/06/09/ie-bug/"/>
    <id>https://yingliyu.github.io/2020/06/09/ie-bug/</id>
    <published>2020-06-09T11:08:48.000Z</published>
    <updated>2021-10-17T06:57:20.257Z</updated>
    
    <content type="html"><![CDATA[<h6 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新…"></a>持续更新…</h6><p>1.使用 antv ，当有两种渲染方式：canvas 和 svg，最好选择 canvas 方式，因为 svg 在 IE 浏览器下有很多 bug。</p><span id="more"></span><blockquote><p>本文有不到之处欢迎交流指正~</p></blockquote><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">ie浏览器踩坑系列</summary>
    
    
    
    <category term="IE" scheme="https://yingliyu.github.io/categories/IE/"/>
    
    
    <category term="ie" scheme="https://yingliyu.github.io/tags/ie/"/>
    
  </entry>
  
  <entry>
    <title>vue动态绑定class与style</title>
    <link href="https://yingliyu.github.io/2020/06/09/vue-class/"/>
    <id>https://yingliyu.github.io/2020/06/09/vue-class/</id>
    <published>2020-06-09T10:19:29.000Z</published>
    <updated>2021-10-17T06:57:20.261Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>基于 vue 开发的项目中有的交互需要修改元素的样式，就会用到 class 或 style 的动态绑定。当样式的属性值是变量时一般使用 style，其他情况最好使用 class，个人觉得这样模版代码更好维护一点。</p></blockquote><h5 id="1-绑定-class-方式"><a href="#1-绑定-class-方式" class="headerlink" title="1.绑定 class 方式"></a>1.绑定 class 方式</h5><p>js 代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">isActive</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">isCenter</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">class2</span>: <span class="string">&#x27;align-center&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h6 id="（1）对象形式"><a href="#（1）对象形式" class="headerlink" title="（1）对象形式"></a>（1）对象形式</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; &#x27;active&#x27;: isActive, &#x27;align-center&#x27;: !isCenter &#125;&quot;</span>&gt;</span>全部<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="（2）数组形式"><a href="#（2）数组形式" class="headerlink" title="（2）数组形式"></a>（2）数组形式</h6><p>数组结合三目运算符</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">&quot;[isActive ? &#x27;icon-arrow-up&#x27; : &#x27;icon-arrow-down&#x27;, class2]&quot;</span>&gt;</span>全部 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-绑定-style-方式"><a href="#2-绑定-style-方式" class="headerlink" title="2.绑定 style 方式"></a>2.绑定 style 方式</h5><blockquote><p>注意：短横线连接的属性名转换为驼峰命名格式，例如：font-size =&gt; fontSize</p></blockquote><p>js 代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">activeColor</span>:<span class="string">&#x27;red&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h6 id="（1）对象形式-1"><a href="#（1）对象形式-1" class="headerlink" title="（1）对象形式"></a>（1）对象形式</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; color: activeColor, fontSize: &#x27;12px&#x27; &#125;&quot;</span>&gt;</span>全部<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="（2）数组形式-1"><a href="#（2）数组形式-1" class="headerlink" title="（2）数组形式"></a>（2）数组形式</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">:style</span>=<span class="string">&quot;[&#123;color:activeColor&#125;,&#123;fontSize:&#x27;12px&#x27;&#125;]&quot;</span>&gt;</span>全部<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="（3）其他形式"><a href="#（3）其他形式" class="headerlink" title="（3）其他形式"></a>（3）其他形式</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;display:[&#x27;-webkit-box&#x27;, &#x27;-o-flexbox&#x27;,&#x27;flex&#x27;]&#125;&quot;</span>&gt;</span>全部<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">vue动态绑定class与style</summary>
    
    
    
    <category term="VUE" scheme="https://yingliyu.github.io/categories/VUE/"/>
    
    
    <category term="vue" scheme="https://yingliyu.github.io/tags/vue/"/>
    
  </entry>
  
</feed>
