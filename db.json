{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1574844985911},{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1574844985911},{"_id":"themes/yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1574844985911},{"_id":"themes/yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1574844985912},{"_id":"themes/yilia/.gitattributes","hash":"758cfbecfa7919e99abddf3297f37cde7e3d8d4e","modified":1574844985912},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1574844985913},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1574844985913},{"_id":"themes/yilia/_config.yml","hash":"714ce7cbdd4538e1a3d6af0a13062f8fbc5d997c","modified":1574927797887},{"_id":"themes/yilia/package.json","hash":"ee6aa61f1cb89fd549e3e087c0232207a9c9ee30","modified":1574844985927},{"_id":"themes/yilia/webpack.config.js","hash":"da7657347109ddb4ab8602b219778117254677fe","modified":1574844985954},{"_id":"source/_posts/hello-world.md","hash":"95a85d4781ad5a7e14d98018b52f9c1df2f6867b","modified":1574925161398},{"_id":"themes/yilia/.git/FETCH_HEAD","hash":"1efc9d034adf6456e816fcbb20023807ca64bbd0","modified":1574906374901},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1574844985891},{"_id":"themes/yilia/.git/ORIG_HEAD","hash":"4ed77da1a2617db0e77c3e3e190a1c79c16dfb9a","modified":1574906374948},{"_id":"themes/yilia/.git/config","hash":"316bc92d9936dc739c39161838a28fb4641cbea2","modified":1574844985896},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1574844020993},{"_id":"themes/yilia/.git/index","hash":"50e7bd2470496b3037731db05341fec8b1b5f309","modified":1574906477135},{"_id":"themes/yilia/.git/packed-refs","hash":"76b1aa9479dd3de329935b6d94a6624c5f716d23","modified":1574844985886},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1574844985914},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1574844985914},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1574844985914},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1574844985915},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1574844985915},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1574844985915},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1574844985916},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1574844985926},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1574844985926},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1574844985926},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1574844985926},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1574844985926},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1574844985927},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1574844985927},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1574844985951},{"_id":"themes/yilia/source/slider.e37972.js","hash":"ce5eac88301fe4f2fce0fb6203adfd58eb8313ac","modified":1574844985954},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1574844985928},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1574844985947},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1574844985925},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"283ae27ea37ac3e0e45b2e05c2482a4c594b9c25","modified":1574844985952},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"1801ef448909ea23c0a48e9d63b80d0cfd5534ce","modified":1574844985953},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1574844020998},{"_id":"themes/yilia/.git/logs/HEAD","hash":"ae7f8e7b44c3d727c132034d2471e6eb21f87cf1","modified":1574844985893},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1574844020994},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1574844020994},{"_id":"themes/yilia/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1574844020995},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1574844020995},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1574844020995},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1574844020996},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1574844020996},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1574844020997},{"_id":"themes/yilia/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1574844020997},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1574844020997},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1574844020998},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"c70f367f54064a441e574c913f5e0ea121d0f899","modified":1574844985916},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1574844985917},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1574844985917},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"8dea8f5f93a60185439b330b0f1d1649a6ab4bd0","modified":1574844985917},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"751e5deab5365348be5243688b419c82d337ab9a","modified":1574844985918},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1574844985918},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1574844985918},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1574844985919},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1574844985919},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1574844985919},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1574844985920},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"fb1b8457b9eb15b55da1bf7b133e12c375dd26f8","modified":1574844985920},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1574844985920},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1574844985920},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"0ffcb251b79e8a920c9b4cb6bb7a96a808816165","modified":1574844985925},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1574844985926},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1574844985947},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1574844985948},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1574844985948},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1574844985949},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1574844985949},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1574844985950},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1574844985950},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1574844985951},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1574844985951},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1574844985928},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1574844985928},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"d6a7dd88404b383b5b94e4c7ec675a410c41f3cc","modified":1574844985930},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"f7388f5c11370ef462f7cb913d8f72edf24ecaf9","modified":1574844985930},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1574844985930},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"8f82fe898ba1c1bd00c24a7d8270feddc7eba3bc","modified":1574844985931},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1574844985931},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"07244c188f58ecfb90bb7c047b8cde977f1dc4b4","modified":1574844985931},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"b85f344f2c66d43d7094746e0a9ccb21d0534201","modified":1574844985931},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"96d7eb1d42c06fdcccb8ef969f6ecd30c3194903","modified":1574844985933},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1574844985936},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1574844985936},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1574844985936},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1574844985936},{"_id":"themes/yilia/source-src/css/left.scss","hash":"80dac621e43581a254d0152d5df901e4d0b01c09","modified":1574844985938},{"_id":"themes/yilia/source-src/css/main.scss","hash":"9eba1fcf4805256697528fcf3b767cf6dd8d0591","modified":1574844985938},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1574844985938},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"d995dcd483a250fe61b426158afb61bf8923a927","modified":1574844985939},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1574844985940},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1574844985940},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1574844985939},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1574844985940},{"_id":"themes/yilia/source-src/css/social.scss","hash":"a10a038a1dac8953cb4ffc7e04272eff9fac54e4","modified":1574844985941},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1574844985941},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1574844985941},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"2924fb6f77c4a9973cd928c2c7db0acb848ed483","modified":1574844985942},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1574844985942},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1574844985943},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1574844985943},{"_id":"themes/yilia/source-src/js/aside.js","hash":"5e4c3c3d61f1e1ce2f09688d3aff25fadc851fff","modified":1574844985943},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1574844985944},{"_id":"themes/yilia/source-src/js/fix.js","hash":"67b8819abb886c9d066fb3b0624ca15e06f63fe0","modified":1574844985944},{"_id":"themes/yilia/source-src/js/main.js","hash":"fe98bf90ce61658fe16ae057f8b6a512a845af3b","modified":1574844985944},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1574844985945},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1574844985945},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1574844985945},{"_id":"themes/yilia/source-src/js/slider.js","hash":"0beaa112657ad57c723d9e773d5b79de60c1dd74","modified":1574844985946},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1574844985946},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"c699cf3c89409ec8f044258e0715a470861b5d5d","modified":1574844985946},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"e98ec0b3b56f14d1d79af99ceb42727719a584f3","modified":1574844985925},{"_id":"themes/yilia/.git/objects/pack/pack-e42e87c2a2f0d246503f6ea6a83658b9b11f5e00.idx","hash":"5ec08d395932b893fd3c99951845ba38544dd32e","modified":1574844985790},{"_id":"themes/yilia/.git/refs/heads/master","hash":"4ed77da1a2617db0e77c3e3e190a1c79c16dfb9a","modified":1574844985893},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"e777cbf959b11c4dfda649c562799899b90ab4a3","modified":1574844985921},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"086c8a88fd3bcae7ec13258df58e25d6354af2fa","modified":1574844985921},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1574844985922},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"25655016773aa5d0774c56115ae1736a9fc9ea1f","modified":1574844985922},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1574844985922},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1574844985922},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"345b262e3c3b75c0cd9a93d9ecabcf06e33e54ff","modified":1574844985923},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1574844985923},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1574844985924},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"fb022502c741b4a26bad6b2ad37245c10ede3f1a","modified":1574844985924},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1574844985935},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1574844985935},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1574844985936},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1574844985936},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1574844985931},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1574844985932},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1574844985932},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1574844985933},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1574844985937},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1574844985937},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1574844985937},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1574844985932},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"ae7f8e7b44c3d727c132034d2471e6eb21f87cf1","modified":1574844985894},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1574844985890},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"ae7f8e7b44c3d727c132034d2471e6eb21f87cf1","modified":1574844985890},{"_id":"themes/yilia/.git/objects/pack/pack-e42e87c2a2f0d246503f6ea6a83658b9b11f5e00.pack","hash":"be8e25c1a3f9af5367e496298d48c90a34b732fd","modified":1574844985789},{"_id":"public/2019/11/27/hello-world/index.html","hash":"ef0377d316a4730f9df11aedbc2458be7e0e6b17","modified":1574906623158},{"_id":"public/archives/index.html","hash":"a360ad5de9b6677eed451039dcbf1fd748417d54","modified":1574929941887},{"_id":"public/archives/2019/index.html","hash":"49890c7d675545dbe1b6163072325816a7bf8ce4","modified":1574929941887},{"_id":"public/archives/2019/11/index.html","hash":"e9e2bca2ee6f21450a96f6d6e6ebb39c2ae4c649","modified":1574929941887},{"_id":"public/index.html","hash":"196f30662500569516de03e12f096e19ced230d2","modified":1574929941887},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1574929941887},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1574929941887},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1574929941887},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1574929941887},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1574929941887},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1574929941887},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1574929941887},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1574929941887},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1574929941887},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1574929941887},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1574929941887},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1574929941887},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1574929941887},{"_id":"themes/yilia/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1574925320061},{"_id":"source/_posts/d3-force.md","hash":"c0aa85bfb4b27209d36318583fa47191fbf4be97","modified":1574927875435},{"_id":"public/2019/11/28/hello-world/index.html","hash":"65f76101eda6d99c83245d9dcf068b3c19792a01","modified":1574929941887},{"_id":"public/2019/11/28/d3-force/index.html","hash":"110c7dcbff071705507cc8e2e8075ec1b9570437","modified":1574929941887}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World ylyu test","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World ylyu test\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2019-11-28T08:30:39.452Z","updated":"2019-11-28T07:12:41.398Z","_id":"ck3i2qodl0000wcv82khu1i8o","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"d3-force","date":"2019-11-28T07:57:09.000Z","_content":"\n\n#### d3.forceSimulation( [nodes] ) \n使用指定的节点数据和无强度力创建一个新的模拟。若未指定nodes，默认为空数组。该模拟是自启动的；在该模拟运行时使用 [simulation.on](\nhttps://github.com/d3/d3-force/blob/v1.2.1/README.md#simulation_on) 监听每个瞬间（呼吸）事件。如果你想要手动运行模拟，调用 [simulation.stop](\nhttps://github.com/d3/d3-force/blob/v1.2.1/README.md#simulation_stop), 然后需要调用  [simulation.tick](\nhttps://github.com/d3/d3-force/blob/v1.2.1/README.md#simulation_tick) .\n\n\n#### simulation.nodes（[nodes]）\n每个node必须是一个对象模型，下面几个属性将会被仿真系统添加：\nindex-节点在nodes数组中的索引\n\n* x-节点当前的x坐标\n* y-节点当前的y-坐标\n* vx-节点当前的x方向速度\n* vy-节点当前的y方向速度\n\n固定给定节点的位置，你需要两个特定的额外的属性：\n\n* fx - 节点的固定 x-位置\n* fy - 节点的固定 y-位置\n\n#### force(）\nforce()是一个用以修改节点位置和速度的函数；在这种情况下，force 可以用来模拟电荷或重力之类的经典物理力学，也可以用来解决几何约束，例如将节点保持在边界框内或者保持节点之间的相对距离。\n#### link froce(弹簧模型)\n可以根据 link distance 将有关联的两个节点拉近或者推远。力的强度与被链接两个节点的距离成比例，类似弹簧力。\n#### d3.forceManyBody()\n\n创建一个使用默认参数的电荷力模型。\nmanyBody.strength([strength]) 如果指定了 strength 则将强度访问器设置为指定的数值或者方法，重新评估每个节点的强度访问器并返回此电荷力。若强度为正值则表示节点之间相互吸引，负值表示节点之间相互排斥。\n\n####  simulation.alphaTarget([target]) \n如果指定了 target 则将当前的目标 alpha 设置为指定的值，需要在 [0, 1] 之间。如果没有指定 target 则返回当前默认的目标 alpha 值, 默认为 0.\n#### simulation.force(name[, force])\n如果指定了 force 则表示为仿真添加指定 name 的 force(力学模型) 并返回仿真。如果没有指定 force 则返回当前仿真的对应 name 的力模型，如果没有对应的 name 则返回 undefined. (默认情况下仿真没有任何力学模型，需要手动添加). \n#### enter( )\n操作的意义在于通过此函数返回一个集合，这个集合里面包含的就是没有被可视化的数据；\n#### simulation.on(typenames, [listener])\n***\n### Forces\nforces是一个简单的改变节点位置和速度的函数；在这个模拟环境中，一个forces能施加一个典型的物理力，比如电荷力或重力，或者它可以解决一个几何约束， 例如将节点保持在边界框内或将链接节点保持在固定距离之外。\n举个例子，一个简单的朝着原点（0，0）移动节点的定位力可能实现为：\n\n```javascript\nfunction force(alpha) {\n  for (var i = 0, n = nodes.length, node, k = alpha * 0.1; i < n; ++i) {\n    node = nodes[i];\n    node.vx -= node.x * k;\n    node.vy -= node.y * k;\n  }\n}\n```\n力模拟通常读取节点当前的位置坐标，然后增加/减去这个节点的速度<vx, vy>,\n然而，力模拟也可以’偷看‘预期的节点下一个位置<x+vx, y+vy>;这对于通过 通过迭代松弛解决几何约束力是很有必要的。力模拟也可以改变位置方向，这有时可以避免增加模拟的能量，比如在视口模拟重入的时候。\n\n模拟通常要组合多个力，这个模块提供几个供您享用：\n\n1. Centering 定心力\n2. Collision 碰撞力\n3. Links 链接力\n4. Many-body 多体力（电荷）\n5. Positioning 定位力\n\n\n#### Centering定心力\n\n定心力一致的调动节点以至于所有节点(如果多有节点的质量相等则为质心)都是在给定的位置<x,y>。\n每一个施加了这个力的节点的位置会被改变；但是它的速度不变，这样做通常会导致节点超出目标中心并且围着这个中心震荡。这个力帮助节点保持在视口的中心，不像定位力，会扭曲它们的相对位置。\n\n**1.  d3.forceCenter([x, y])**\n\n使用指定的x和y坐标创建新的定心力。如果x和y是未指定,默认<0, 0>\n\n**2.  center.x([x])**\n\n如果指定了x，则将定心位置的x坐标设置为指定的数值并返回此力。如果没有指定x，则返回当前x坐标，该坐标默认为0。\n\n**3.  center.y([y])**\n\n如果指定了y，则将定心位置的y坐标设置为指定的数值并返回此力。如果没有指定y，则返回当前y坐标，默认为0。\n```javascript\nvar simulation = d3.forceSimulation(nodes)\n    .force(\"charge\", d3.forceManyBody())\n    .force(\"link\", d3.forceLink(links))\n    .force(\"center\", d3.forceCenter().x().y())\n```\n#### Collision碰撞力\n\n碰撞力将节点视为具有给定半径的圆，而不是点，并且阻止节点重叠。通常情况下，两个节点a和b是分开的所以a和b之间的距离至少是两个节点的半径之和。为了减少抖动，这是一个默认的软约束，具有可配置的强度和迭代次数。\n\n**1. d3.forceCollide([radius])**\n\n以一个特定的半径创建一个新的圆形碰撞力。如果这个半径没有设置，所有的节点都默认为常数1。\n\n**2. collide.radius([radius])**\n\n如果给定了半径，将半径访问器设为一个特定的数字或者函数，重新评估每一个节点的半径访问器，并且返回这个模拟。如果没有给定半径，返回当前的半径访问器，默认如下：\n```javascript\nfunction radius() {\n  return 1;\n}\n```\n\n\n这个半径访问器会被这个模拟中的每一个节点调用，传递节点及其从零开始的索引。然后，结果数被存储在内部，这样每个节点的半径只在初始化力或使用新的半径调用此方法时重新计算，而不是在力的每个应用程序上。\n\n**3. collide.strength([strength])**\n\n如果指定了强度，设置这个力强度为[0, 1]之间的数字，并返回这个模拟。如果未指定强度，返回当前的强度，默认是0.7。\n\n通过迭代松弛来解决重叠节点。对于每个节点来说，在下个确定的呼吸事件决定的预计（使用预期的位置<x+vx, y+vy>）将会重叠它的其他节点，z这个节点的速度会改变，推着这个节点超出另一个将会重叠的节点。 速度的变化被力的强度减弱，这样同时重叠的分辨率可以混合在一起来找到一个稳定的解决方案。\n\n**4. collide.iterations([iterations])**\n\n如果指定了迭代次数，给每一个应用设置迭代次数的值为一个特定的数字并且返回这个模拟。如果未指定迭代次数，返回当前的迭代次数，默认值为1。增加迭代次数大大增加了约束的钢度并且避免节点的部分重合，但是也增加了计算力的运行时成本。\n#### Links链接力\n根据想要的链接距离，链接力将链接在一起的节点推到一起或分开。这个力的强度与链接节点和目标节点的距离差成比例，类似于弹簧力。\n\n**1. d3.forceLink([links])**\n\n创建一个新的链接力，传一个特定的links和默认参数。如果links未指定，它将默认是一个空数组。\n\n**2. link.links([links])**\n\n如果links未指定，设置与此力关联的链接数组，重新计算每一个链接参数的距离和强度，并返回这个模拟。如果links未指定，返回默认值是空数组的当前的链接数组。\n\n每个链接是一个拥有如下属性的对象：\n\n* source - 这个链接的源头节点\n* target - 这个链接的目标节点\n* index -  将从零开始的索引转换成链接，通过这种方法分配\n\n\n为了方便，一个链接的源头和目标接节点的属性可以用除对象引用外的数值或字符串字符初始化；看link.id。当这个链接力被初始化（或当节点或链接改变的时候重新初始化），任意link.source或link.target的那个非对象属性将会被对应给定目标标识符的对象引用替换。\n\n如果指定的链接数组被改变，例如当链接增加或从模拟中删除的时候，必须用新的数组重新调用这个方法，以通知更改的力度。这个力不会去创建特定数组的防御副本。\n\n**3.  link.id([id])**\n\n如果指定了id，以特定的函数设置这个节点的id访问器并返回这个模拟。如果未指定，然会当前的节点id访问器，默认数值类型的节点索引：\n```javascript\nfunction id(d) {\n  return d.index;\n}\n```\n默认id访问器允许每一个链接的源或者目标的值指定为节点数组从零开始的索引。例如：\n```javascript\nvar nodes = [\n  {\"id\": \"Alice\"},\n  {\"id\": \"Bob\"},\n  {\"id\": \"Carol\"}\n];\n\nvar links = [\n  {\"source\": 0, \"target\": 1}, // Alice → Bob\n  {\"source\": 1, \"target\": 2} // Bob → Carol\n];\n```\n现在考虑一个不同的id访问器，它返回一个字符串：\n```javascript\nfunction id(d) {\n  return d.id;\n}\n```\n有了这个访问器，你可以使用命名的源和目标：\n```javascript\nvar nodes = [\n  {\"id\": \"Alice\"},\n  {\"id\": \"Bob\"},\n  {\"id\": \"Carol\"}\n];\n\nvar links = [\n  {\"source\": \"Alice\", \"target\": \"Bob\"},\n  {\"source\": \"Bob\", \"target\": \"Carol\"}\n];\n```\n当用一个JSON数据展现图谱/图形时，这是一个极其有用的例子。参考[这个例子](https://bl.ocks.org/mbostock/f584aa36df54c451c94a9d0798caed35)。\n当这个模拟初始化的时候，id访问器被每一个节点调用，同时当节点或者链接改变的时候，传递节点及其从零开始的索引。\n\n**4.  link.distance([distance])**\n\n如果指定了距离，将距离访问器设置未特定的数字或函数，重新计算每个链接的距离访问器，并且返回这个模拟。如果未指定距离，返回当前的距离访问器，默认如下：\n```javascript\nfunction distance() {\n  return 30;\n}\n```\n\n这个距离访问器被每个链接调用，传递链接及其从零开始的索引。这个数值的结果将会被存储在内部，当这个模拟初始化或者用一个新的距离调用这个方法的时候会重新计算每一个链接之间的距离，而不是这个模拟的每个应用程序上。\n\n**5. link.strength([strength])**\n\n如果指定了强度，将强度访问器者设置为特定的数字或这个函数，重新计算每个链接的强度访问器，并返回这个强度。如果未指定，返回当前的强度访问器，默认如下：\n```javascript\nfunction strength(link) {\n  return 1 / Math.min(count(link.source), count(link.target));\n}\n```\n其中count(node)是一个函数，它返回给定节点作为源或目标的链接数。之所以选择此默认值，是因为它会自动降低连接到紧密连接节点的链接的强度，从而提高稳定性。\n\n为每个链接调用强度访问器，传递链接及其从零开始的索引。然后，结果数被存储在内部，这样，只有在初始化force或使用新强度调用此方法时，才会重新计算每个链接的强度，而不是在force的每个应用程序上。\n\n**6. link.iterations([iterations])**\n\n如果指定了迭代，则将每个应用程序的迭代次数设置为指定的次数并返回该强制。如果没有指定迭代，则返回默认为1的当前迭代计数。迭代次数的增加极大地增加了约束的刚度，对于复杂的结构如网格是有用的，但也增加了评估力的运行时成本。\n#### Many-Body多体力\n多体力在多有节点之间相互作用。如果强度时正数，它相当于引力（吸引），如果强度是负数，它相当于静电电荷斥力。该实现使用四叉树和Barnes-Hut近似来极大地提高性能;  他的精确性可以用theta参数定制。\n\n不像链接力，它仅仅受两个链接的节点影响，这个电荷斥力是全局的；每个节点会影响每个其他的节点，即使他们不是相互连接的子图。\n\n**1. d3.forceManyBody()**\n\n用默认的参数创建一个新的多体力。\n\n**2. manyBody.strength([strength])**\n\n如果指定强度，将强度访问器设为一个特定的数字或函数，重新计算每个节点的强度访问器，并返回这个强度。正数使节点相互吸引，负数使节点相互排斥。如果未指定，返回当前的强度访问器，默认为：\n```javascript\nfunction strength() {\n  return -30;\n}\n```\n在模拟中，每个节点都会调用强度访问器传递节点及从零开始的索引。这个返回的结果会保存在本地，所以当这个模拟初始化或用一个新的强度调用这个方法的时候，每一个节点的强度重新计算，而不是在模拟的每个应用程序上。\n\n**3. manyBody.theta([theta])**\n\n如果指定theta，将 Barnes–Hut近似准则设置为特定的数值，并发返回这个模拟。如果未指定，返回默认值：0.9。\n\n为了加速计算，模拟执行 在每个应用程序中使用O(n log n)得出的Barnes-Hut近似值，n是节点数量。对于每个应用程序，使用四叉树存储当前节点的位置。对于每个节点。结合所有给定计算出的所有其他节点的力。对于一个很远的节点集群，电荷力可以近似于用一个独立的、大的节点。这个theta的参数值决定了这个近似值的精确度： 如果四叉树单元的宽度w / l与从节点到单元质心的距离l之比小于theta，则给定单元中的所有节点都视为单个节点，而不是单独处理。\n\n**4. manyBody.distanceMin([distance])**\n\n如果指定距离，将它设置为节点之间的最小距离。如果未指定，返回默认值1. 最小的距离建立了相邻节点的力强度的上线，从而避免不稳定。特别是避免了两个节点完全重合时无限强的力。在这种情况下，力的方向时随机的。\n\n**5. manyBody.distanceMax([distance])**\n\n如果指定距离，将它设置为两个节点间的最大距离。如果未指定，返回默认值无穷大。指定一个有限大的最大距离提高了性能并且生成更加本地化的布局。\n#### Positioning定位力\nx和y的定位力以可配置的强度将节点推向给定的尺寸预期的位置。径向力是相似的，除了它时将节点推向给定圆的最近点。这个力的强度是跟节点的位置和目标位置的一维距离成正例。虽然这些力可以作用于单个节点，但是它主要作用于所有节点的全局力。\n\n**1. d3.forceX([x]) **\n\n沿着x轴给定位置x创建一个新的定位力。如果x未指定，默认未0.\n\n**2. x.strength([strength])**\n\n如果指定了strength，将它设置为特定的数值或者函数，重新计算每个节点的强度访问器。并且返回这个强度。强度决定了节点的x方向速度增加多少。例如，强度的值是0.1就表示节点应该从当前的x位置到目标位置要移动1/10的距离。较高的值可以更快的将节点移动到目标位置，这通常是以其他力或约束为代价的。超出0~1的值是不推荐的。\n如果强度未指定，返回默认值：\n```javascript\nfunction strength() {\n  return 0.1;\n}\n```\n\n模拟中的每个节点都会调用这个强度访问器，传递节点和从零开始的索引。返回的结果会存储在本地，这样，只有在初始化force或使用新x调用此方法时，才会重新计算每个节点的目标x坐标，而不是在force的每个应用程序上。\n\n**3. x.x([x])**\n\n如果指定了x，将其设置为特定数值址或函数，重新计算每个节点的x访问器，并返回这个模拟。如果未指定，返回默认值：\n```javascript\nfunction x() {\n  return 0;\n}\n```\n这个模拟中的每个节点都会调用这个x访问器，传递节点和从零开始的索引。结果会存储在本地，这样只有模拟初始化或者用新的x调用这个方法的时候会重新计算每个节点的目标x坐标。\n\n**4. d3.forceY([y])**\n\n**5. y.strength([strength])**\n\n**6. y.y([y])**\n\n**7. d3.forceRadial(radius[, x][, y])**\n\n创建一个新的定位力沿着特定圆心和半径的圆。如果x和y未指定，默认值<0,0>。\n\n**8. radial.strength([strength])**\n\n如果指定强度，将其设置未特定的数值或函数，重新计算每个节点的强度计算器，并返回这个模拟。强度决定了节点的x和y轴方向的速度增加多少。例如：对于每个应用来说，值为0.1表示节点从当前位置到这个圆的最近的点要移动1/10的距离。比较高的值表示节点到目标位置的速度更快，通常是以其他力或约束为代价的。超出0~1的值是不推荐的。\n如果未指定，返回默认值：\n\n```javascript\nfunction strength() {\n  return 0.1;\n}\n```\n为模拟中的每个节点调用强度访问器，传递节点及其从零开始的索引。然后，结果数被存储在内部，这样，只有在初始化force或使用新强度调用此方法时，才会重新计算每个节点的强度，而不是在force的每个应用程序上。\n\n**9. radial.radius([radius])**\n\n如果指定了半径，将其设置为特定的值或函数，重新计算每个节点的半径访问器，并返回这个模拟。如果未指定返回当前的半径访问器。\n为模拟中的每个节点调用radius访问器，传递节点及其从零开始的索引。然后，结果数被存储在内部，以便仅在初始化force或使用新半径调用此方法时重新计算每个节点的目标半径，而不是在force的每个应用程序上。\n\n**10. radial.x([x])**\n\n如果指定了x，则将圆心的x坐标设置为指定的数值并返回此力。如果没有指定x，则返回中心的当前x坐标，默认为0。\n\n**11. radial.y([y])**\n\n如果指定了y，则将圆心的y坐标设置为指定的数值并返回此力。如果没有指定y，则返回中心的当前y坐标，默认为0。\n","source":"_posts/d3-force.md","raw":"---\ntitle: d3-force\ndate: 2019-11-28 15:57:09\ntags:\n---\n\n\n#### d3.forceSimulation( [nodes] ) \n使用指定的节点数据和无强度力创建一个新的模拟。若未指定nodes，默认为空数组。该模拟是自启动的；在该模拟运行时使用 [simulation.on](\nhttps://github.com/d3/d3-force/blob/v1.2.1/README.md#simulation_on) 监听每个瞬间（呼吸）事件。如果你想要手动运行模拟，调用 [simulation.stop](\nhttps://github.com/d3/d3-force/blob/v1.2.1/README.md#simulation_stop), 然后需要调用  [simulation.tick](\nhttps://github.com/d3/d3-force/blob/v1.2.1/README.md#simulation_tick) .\n\n\n#### simulation.nodes（[nodes]）\n每个node必须是一个对象模型，下面几个属性将会被仿真系统添加：\nindex-节点在nodes数组中的索引\n\n* x-节点当前的x坐标\n* y-节点当前的y-坐标\n* vx-节点当前的x方向速度\n* vy-节点当前的y方向速度\n\n固定给定节点的位置，你需要两个特定的额外的属性：\n\n* fx - 节点的固定 x-位置\n* fy - 节点的固定 y-位置\n\n#### force(）\nforce()是一个用以修改节点位置和速度的函数；在这种情况下，force 可以用来模拟电荷或重力之类的经典物理力学，也可以用来解决几何约束，例如将节点保持在边界框内或者保持节点之间的相对距离。\n#### link froce(弹簧模型)\n可以根据 link distance 将有关联的两个节点拉近或者推远。力的强度与被链接两个节点的距离成比例，类似弹簧力。\n#### d3.forceManyBody()\n\n创建一个使用默认参数的电荷力模型。\nmanyBody.strength([strength]) 如果指定了 strength 则将强度访问器设置为指定的数值或者方法，重新评估每个节点的强度访问器并返回此电荷力。若强度为正值则表示节点之间相互吸引，负值表示节点之间相互排斥。\n\n####  simulation.alphaTarget([target]) \n如果指定了 target 则将当前的目标 alpha 设置为指定的值，需要在 [0, 1] 之间。如果没有指定 target 则返回当前默认的目标 alpha 值, 默认为 0.\n#### simulation.force(name[, force])\n如果指定了 force 则表示为仿真添加指定 name 的 force(力学模型) 并返回仿真。如果没有指定 force 则返回当前仿真的对应 name 的力模型，如果没有对应的 name 则返回 undefined. (默认情况下仿真没有任何力学模型，需要手动添加). \n#### enter( )\n操作的意义在于通过此函数返回一个集合，这个集合里面包含的就是没有被可视化的数据；\n#### simulation.on(typenames, [listener])\n***\n### Forces\nforces是一个简单的改变节点位置和速度的函数；在这个模拟环境中，一个forces能施加一个典型的物理力，比如电荷力或重力，或者它可以解决一个几何约束， 例如将节点保持在边界框内或将链接节点保持在固定距离之外。\n举个例子，一个简单的朝着原点（0，0）移动节点的定位力可能实现为：\n\n```javascript\nfunction force(alpha) {\n  for (var i = 0, n = nodes.length, node, k = alpha * 0.1; i < n; ++i) {\n    node = nodes[i];\n    node.vx -= node.x * k;\n    node.vy -= node.y * k;\n  }\n}\n```\n力模拟通常读取节点当前的位置坐标，然后增加/减去这个节点的速度<vx, vy>,\n然而，力模拟也可以’偷看‘预期的节点下一个位置<x+vx, y+vy>;这对于通过 通过迭代松弛解决几何约束力是很有必要的。力模拟也可以改变位置方向，这有时可以避免增加模拟的能量，比如在视口模拟重入的时候。\n\n模拟通常要组合多个力，这个模块提供几个供您享用：\n\n1. Centering 定心力\n2. Collision 碰撞力\n3. Links 链接力\n4. Many-body 多体力（电荷）\n5. Positioning 定位力\n\n\n#### Centering定心力\n\n定心力一致的调动节点以至于所有节点(如果多有节点的质量相等则为质心)都是在给定的位置<x,y>。\n每一个施加了这个力的节点的位置会被改变；但是它的速度不变，这样做通常会导致节点超出目标中心并且围着这个中心震荡。这个力帮助节点保持在视口的中心，不像定位力，会扭曲它们的相对位置。\n\n**1.  d3.forceCenter([x, y])**\n\n使用指定的x和y坐标创建新的定心力。如果x和y是未指定,默认<0, 0>\n\n**2.  center.x([x])**\n\n如果指定了x，则将定心位置的x坐标设置为指定的数值并返回此力。如果没有指定x，则返回当前x坐标，该坐标默认为0。\n\n**3.  center.y([y])**\n\n如果指定了y，则将定心位置的y坐标设置为指定的数值并返回此力。如果没有指定y，则返回当前y坐标，默认为0。\n```javascript\nvar simulation = d3.forceSimulation(nodes)\n    .force(\"charge\", d3.forceManyBody())\n    .force(\"link\", d3.forceLink(links))\n    .force(\"center\", d3.forceCenter().x().y())\n```\n#### Collision碰撞力\n\n碰撞力将节点视为具有给定半径的圆，而不是点，并且阻止节点重叠。通常情况下，两个节点a和b是分开的所以a和b之间的距离至少是两个节点的半径之和。为了减少抖动，这是一个默认的软约束，具有可配置的强度和迭代次数。\n\n**1. d3.forceCollide([radius])**\n\n以一个特定的半径创建一个新的圆形碰撞力。如果这个半径没有设置，所有的节点都默认为常数1。\n\n**2. collide.radius([radius])**\n\n如果给定了半径，将半径访问器设为一个特定的数字或者函数，重新评估每一个节点的半径访问器，并且返回这个模拟。如果没有给定半径，返回当前的半径访问器，默认如下：\n```javascript\nfunction radius() {\n  return 1;\n}\n```\n\n\n这个半径访问器会被这个模拟中的每一个节点调用，传递节点及其从零开始的索引。然后，结果数被存储在内部，这样每个节点的半径只在初始化力或使用新的半径调用此方法时重新计算，而不是在力的每个应用程序上。\n\n**3. collide.strength([strength])**\n\n如果指定了强度，设置这个力强度为[0, 1]之间的数字，并返回这个模拟。如果未指定强度，返回当前的强度，默认是0.7。\n\n通过迭代松弛来解决重叠节点。对于每个节点来说，在下个确定的呼吸事件决定的预计（使用预期的位置<x+vx, y+vy>）将会重叠它的其他节点，z这个节点的速度会改变，推着这个节点超出另一个将会重叠的节点。 速度的变化被力的强度减弱，这样同时重叠的分辨率可以混合在一起来找到一个稳定的解决方案。\n\n**4. collide.iterations([iterations])**\n\n如果指定了迭代次数，给每一个应用设置迭代次数的值为一个特定的数字并且返回这个模拟。如果未指定迭代次数，返回当前的迭代次数，默认值为1。增加迭代次数大大增加了约束的钢度并且避免节点的部分重合，但是也增加了计算力的运行时成本。\n#### Links链接力\n根据想要的链接距离，链接力将链接在一起的节点推到一起或分开。这个力的强度与链接节点和目标节点的距离差成比例，类似于弹簧力。\n\n**1. d3.forceLink([links])**\n\n创建一个新的链接力，传一个特定的links和默认参数。如果links未指定，它将默认是一个空数组。\n\n**2. link.links([links])**\n\n如果links未指定，设置与此力关联的链接数组，重新计算每一个链接参数的距离和强度，并返回这个模拟。如果links未指定，返回默认值是空数组的当前的链接数组。\n\n每个链接是一个拥有如下属性的对象：\n\n* source - 这个链接的源头节点\n* target - 这个链接的目标节点\n* index -  将从零开始的索引转换成链接，通过这种方法分配\n\n\n为了方便，一个链接的源头和目标接节点的属性可以用除对象引用外的数值或字符串字符初始化；看link.id。当这个链接力被初始化（或当节点或链接改变的时候重新初始化），任意link.source或link.target的那个非对象属性将会被对应给定目标标识符的对象引用替换。\n\n如果指定的链接数组被改变，例如当链接增加或从模拟中删除的时候，必须用新的数组重新调用这个方法，以通知更改的力度。这个力不会去创建特定数组的防御副本。\n\n**3.  link.id([id])**\n\n如果指定了id，以特定的函数设置这个节点的id访问器并返回这个模拟。如果未指定，然会当前的节点id访问器，默认数值类型的节点索引：\n```javascript\nfunction id(d) {\n  return d.index;\n}\n```\n默认id访问器允许每一个链接的源或者目标的值指定为节点数组从零开始的索引。例如：\n```javascript\nvar nodes = [\n  {\"id\": \"Alice\"},\n  {\"id\": \"Bob\"},\n  {\"id\": \"Carol\"}\n];\n\nvar links = [\n  {\"source\": 0, \"target\": 1}, // Alice → Bob\n  {\"source\": 1, \"target\": 2} // Bob → Carol\n];\n```\n现在考虑一个不同的id访问器，它返回一个字符串：\n```javascript\nfunction id(d) {\n  return d.id;\n}\n```\n有了这个访问器，你可以使用命名的源和目标：\n```javascript\nvar nodes = [\n  {\"id\": \"Alice\"},\n  {\"id\": \"Bob\"},\n  {\"id\": \"Carol\"}\n];\n\nvar links = [\n  {\"source\": \"Alice\", \"target\": \"Bob\"},\n  {\"source\": \"Bob\", \"target\": \"Carol\"}\n];\n```\n当用一个JSON数据展现图谱/图形时，这是一个极其有用的例子。参考[这个例子](https://bl.ocks.org/mbostock/f584aa36df54c451c94a9d0798caed35)。\n当这个模拟初始化的时候，id访问器被每一个节点调用，同时当节点或者链接改变的时候，传递节点及其从零开始的索引。\n\n**4.  link.distance([distance])**\n\n如果指定了距离，将距离访问器设置未特定的数字或函数，重新计算每个链接的距离访问器，并且返回这个模拟。如果未指定距离，返回当前的距离访问器，默认如下：\n```javascript\nfunction distance() {\n  return 30;\n}\n```\n\n这个距离访问器被每个链接调用，传递链接及其从零开始的索引。这个数值的结果将会被存储在内部，当这个模拟初始化或者用一个新的距离调用这个方法的时候会重新计算每一个链接之间的距离，而不是这个模拟的每个应用程序上。\n\n**5. link.strength([strength])**\n\n如果指定了强度，将强度访问器者设置为特定的数字或这个函数，重新计算每个链接的强度访问器，并返回这个强度。如果未指定，返回当前的强度访问器，默认如下：\n```javascript\nfunction strength(link) {\n  return 1 / Math.min(count(link.source), count(link.target));\n}\n```\n其中count(node)是一个函数，它返回给定节点作为源或目标的链接数。之所以选择此默认值，是因为它会自动降低连接到紧密连接节点的链接的强度，从而提高稳定性。\n\n为每个链接调用强度访问器，传递链接及其从零开始的索引。然后，结果数被存储在内部，这样，只有在初始化force或使用新强度调用此方法时，才会重新计算每个链接的强度，而不是在force的每个应用程序上。\n\n**6. link.iterations([iterations])**\n\n如果指定了迭代，则将每个应用程序的迭代次数设置为指定的次数并返回该强制。如果没有指定迭代，则返回默认为1的当前迭代计数。迭代次数的增加极大地增加了约束的刚度，对于复杂的结构如网格是有用的，但也增加了评估力的运行时成本。\n#### Many-Body多体力\n多体力在多有节点之间相互作用。如果强度时正数，它相当于引力（吸引），如果强度是负数，它相当于静电电荷斥力。该实现使用四叉树和Barnes-Hut近似来极大地提高性能;  他的精确性可以用theta参数定制。\n\n不像链接力，它仅仅受两个链接的节点影响，这个电荷斥力是全局的；每个节点会影响每个其他的节点，即使他们不是相互连接的子图。\n\n**1. d3.forceManyBody()**\n\n用默认的参数创建一个新的多体力。\n\n**2. manyBody.strength([strength])**\n\n如果指定强度，将强度访问器设为一个特定的数字或函数，重新计算每个节点的强度访问器，并返回这个强度。正数使节点相互吸引，负数使节点相互排斥。如果未指定，返回当前的强度访问器，默认为：\n```javascript\nfunction strength() {\n  return -30;\n}\n```\n在模拟中，每个节点都会调用强度访问器传递节点及从零开始的索引。这个返回的结果会保存在本地，所以当这个模拟初始化或用一个新的强度调用这个方法的时候，每一个节点的强度重新计算，而不是在模拟的每个应用程序上。\n\n**3. manyBody.theta([theta])**\n\n如果指定theta，将 Barnes–Hut近似准则设置为特定的数值，并发返回这个模拟。如果未指定，返回默认值：0.9。\n\n为了加速计算，模拟执行 在每个应用程序中使用O(n log n)得出的Barnes-Hut近似值，n是节点数量。对于每个应用程序，使用四叉树存储当前节点的位置。对于每个节点。结合所有给定计算出的所有其他节点的力。对于一个很远的节点集群，电荷力可以近似于用一个独立的、大的节点。这个theta的参数值决定了这个近似值的精确度： 如果四叉树单元的宽度w / l与从节点到单元质心的距离l之比小于theta，则给定单元中的所有节点都视为单个节点，而不是单独处理。\n\n**4. manyBody.distanceMin([distance])**\n\n如果指定距离，将它设置为节点之间的最小距离。如果未指定，返回默认值1. 最小的距离建立了相邻节点的力强度的上线，从而避免不稳定。特别是避免了两个节点完全重合时无限强的力。在这种情况下，力的方向时随机的。\n\n**5. manyBody.distanceMax([distance])**\n\n如果指定距离，将它设置为两个节点间的最大距离。如果未指定，返回默认值无穷大。指定一个有限大的最大距离提高了性能并且生成更加本地化的布局。\n#### Positioning定位力\nx和y的定位力以可配置的强度将节点推向给定的尺寸预期的位置。径向力是相似的，除了它时将节点推向给定圆的最近点。这个力的强度是跟节点的位置和目标位置的一维距离成正例。虽然这些力可以作用于单个节点，但是它主要作用于所有节点的全局力。\n\n**1. d3.forceX([x]) **\n\n沿着x轴给定位置x创建一个新的定位力。如果x未指定，默认未0.\n\n**2. x.strength([strength])**\n\n如果指定了strength，将它设置为特定的数值或者函数，重新计算每个节点的强度访问器。并且返回这个强度。强度决定了节点的x方向速度增加多少。例如，强度的值是0.1就表示节点应该从当前的x位置到目标位置要移动1/10的距离。较高的值可以更快的将节点移动到目标位置，这通常是以其他力或约束为代价的。超出0~1的值是不推荐的。\n如果强度未指定，返回默认值：\n```javascript\nfunction strength() {\n  return 0.1;\n}\n```\n\n模拟中的每个节点都会调用这个强度访问器，传递节点和从零开始的索引。返回的结果会存储在本地，这样，只有在初始化force或使用新x调用此方法时，才会重新计算每个节点的目标x坐标，而不是在force的每个应用程序上。\n\n**3. x.x([x])**\n\n如果指定了x，将其设置为特定数值址或函数，重新计算每个节点的x访问器，并返回这个模拟。如果未指定，返回默认值：\n```javascript\nfunction x() {\n  return 0;\n}\n```\n这个模拟中的每个节点都会调用这个x访问器，传递节点和从零开始的索引。结果会存储在本地，这样只有模拟初始化或者用新的x调用这个方法的时候会重新计算每个节点的目标x坐标。\n\n**4. d3.forceY([y])**\n\n**5. y.strength([strength])**\n\n**6. y.y([y])**\n\n**7. d3.forceRadial(radius[, x][, y])**\n\n创建一个新的定位力沿着特定圆心和半径的圆。如果x和y未指定，默认值<0,0>。\n\n**8. radial.strength([strength])**\n\n如果指定强度，将其设置未特定的数值或函数，重新计算每个节点的强度计算器，并返回这个模拟。强度决定了节点的x和y轴方向的速度增加多少。例如：对于每个应用来说，值为0.1表示节点从当前位置到这个圆的最近的点要移动1/10的距离。比较高的值表示节点到目标位置的速度更快，通常是以其他力或约束为代价的。超出0~1的值是不推荐的。\n如果未指定，返回默认值：\n\n```javascript\nfunction strength() {\n  return 0.1;\n}\n```\n为模拟中的每个节点调用强度访问器，传递节点及其从零开始的索引。然后，结果数被存储在内部，这样，只有在初始化force或使用新强度调用此方法时，才会重新计算每个节点的强度，而不是在force的每个应用程序上。\n\n**9. radial.radius([radius])**\n\n如果指定了半径，将其设置为特定的值或函数，重新计算每个节点的半径访问器，并返回这个模拟。如果未指定返回当前的半径访问器。\n为模拟中的每个节点调用radius访问器，传递节点及其从零开始的索引。然后，结果数被存储在内部，以便仅在初始化force或使用新半径调用此方法时重新计算每个节点的目标半径，而不是在force的每个应用程序上。\n\n**10. radial.x([x])**\n\n如果指定了x，则将圆心的x坐标设置为指定的数值并返回此力。如果没有指定x，则返回中心的当前x坐标，默认为0。\n\n**11. radial.y([y])**\n\n如果指定了y，则将圆心的y坐标设置为指定的数值并返回此力。如果没有指定y，则返回中心的当前y坐标，默认为0。\n","slug":"d3-force","published":1,"updated":"2019-11-28T07:57:55.435Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3igmgyz00007ov826olhgze","content":"<h4 id=\"d3-forceSimulation-nodes\"><a href=\"#d3-forceSimulation-nodes\" class=\"headerlink\" title=\"d3.forceSimulation( [nodes] )\"></a>d3.forceSimulation( [nodes] )</h4><p>使用指定的节点数据和无强度力创建一个新的模拟。若未指定nodes，默认为空数组。该模拟是自启动的；在该模拟运行时使用 <a href=\"https://github.com/d3/d3-force/blob/v1.2.1/README.md#simulation_on\" target=\"_blank\" rel=\"noopener\">simulation.on</a> 监听每个瞬间（呼吸）事件。如果你想要手动运行模拟，调用 <a href=\"https://github.com/d3/d3-force/blob/v1.2.1/README.md#simulation_stop\" target=\"_blank\" rel=\"noopener\">simulation.stop</a>, 然后需要调用  <a href=\"https://github.com/d3/d3-force/blob/v1.2.1/README.md#simulation_tick\" target=\"_blank\" rel=\"noopener\">simulation.tick</a> .</p>\n<h4 id=\"simulation-nodes（-nodes-）\"><a href=\"#simulation-nodes（-nodes-）\" class=\"headerlink\" title=\"simulation.nodes（[nodes]）\"></a>simulation.nodes（[nodes]）</h4><p>每个node必须是一个对象模型，下面几个属性将会被仿真系统添加：<br>index-节点在nodes数组中的索引</p>\n<ul>\n<li>x-节点当前的x坐标</li>\n<li>y-节点当前的y-坐标</li>\n<li>vx-节点当前的x方向速度</li>\n<li>vy-节点当前的y方向速度</li>\n</ul>\n<p>固定给定节点的位置，你需要两个特定的额外的属性：</p>\n<ul>\n<li>fx - 节点的固定 x-位置</li>\n<li>fy - 节点的固定 y-位置</li>\n</ul>\n<h4 id=\"force-）\"><a href=\"#force-）\" class=\"headerlink\" title=\"force(）\"></a>force(）</h4><p>force()是一个用以修改节点位置和速度的函数；在这种情况下，force 可以用来模拟电荷或重力之类的经典物理力学，也可以用来解决几何约束，例如将节点保持在边界框内或者保持节点之间的相对距离。</p>\n<h4 id=\"link-froce-弹簧模型\"><a href=\"#link-froce-弹簧模型\" class=\"headerlink\" title=\"link froce(弹簧模型)\"></a>link froce(弹簧模型)</h4><p>可以根据 link distance 将有关联的两个节点拉近或者推远。力的强度与被链接两个节点的距离成比例，类似弹簧力。</p>\n<h4 id=\"d3-forceManyBody\"><a href=\"#d3-forceManyBody\" class=\"headerlink\" title=\"d3.forceManyBody()\"></a>d3.forceManyBody()</h4><p>创建一个使用默认参数的电荷力模型。<br>manyBody.strength([strength]) 如果指定了 strength 则将强度访问器设置为指定的数值或者方法，重新评估每个节点的强度访问器并返回此电荷力。若强度为正值则表示节点之间相互吸引，负值表示节点之间相互排斥。</p>\n<h4 id=\"simulation-alphaTarget-target\"><a href=\"#simulation-alphaTarget-target\" class=\"headerlink\" title=\"simulation.alphaTarget([target])\"></a>simulation.alphaTarget([target])</h4><p>如果指定了 target 则将当前的目标 alpha 设置为指定的值，需要在 [0, 1] 之间。如果没有指定 target 则返回当前默认的目标 alpha 值, 默认为 0.</p>\n<h4 id=\"simulation-force-name-force\"><a href=\"#simulation-force-name-force\" class=\"headerlink\" title=\"simulation.force(name[, force])\"></a>simulation.force(name[, force])</h4><p>如果指定了 force 则表示为仿真添加指定 name 的 force(力学模型) 并返回仿真。如果没有指定 force 则返回当前仿真的对应 name 的力模型，如果没有对应的 name 则返回 undefined. (默认情况下仿真没有任何力学模型，需要手动添加). </p>\n<h4 id=\"enter\"><a href=\"#enter\" class=\"headerlink\" title=\"enter( )\"></a>enter( )</h4><p>操作的意义在于通过此函数返回一个集合，这个集合里面包含的就是没有被可视化的数据；</p>\n<h4 id=\"simulation-on-typenames-listener\"><a href=\"#simulation-on-typenames-listener\" class=\"headerlink\" title=\"simulation.on(typenames, [listener])\"></a>simulation.on(typenames, [listener])</h4><hr>\n<h3 id=\"Forces\"><a href=\"#Forces\" class=\"headerlink\" title=\"Forces\"></a>Forces</h3><p>forces是一个简单的改变节点位置和速度的函数；在这个模拟环境中，一个forces能施加一个典型的物理力，比如电荷力或重力，或者它可以解决一个几何约束， 例如将节点保持在边界框内或将链接节点保持在固定距离之外。<br>举个例子，一个简单的朝着原点（0，0）移动节点的定位力可能实现为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">force</span>(<span class=\"params\">alpha</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, n = nodes.length, node, k = alpha * <span class=\"number\">0.1</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">    node = nodes[i];</span><br><span class=\"line\">    node.vx -= node.x * k;</span><br><span class=\"line\">    node.vy -= node.y * k;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>力模拟通常读取节点当前的位置坐标，然后增加/减去这个节点的速度&lt;vx, vy&gt;,<br>然而，力模拟也可以’偷看‘预期的节点下一个位置&lt;x+vx, y+vy&gt;;这对于通过 通过迭代松弛解决几何约束力是很有必要的。力模拟也可以改变位置方向，这有时可以避免增加模拟的能量，比如在视口模拟重入的时候。</p>\n<p>模拟通常要组合多个力，这个模块提供几个供您享用：</p>\n<ol>\n<li>Centering 定心力</li>\n<li>Collision 碰撞力</li>\n<li>Links 链接力</li>\n<li>Many-body 多体力（电荷）</li>\n<li>Positioning 定位力</li>\n</ol>\n<h4 id=\"Centering定心力\"><a href=\"#Centering定心力\" class=\"headerlink\" title=\"Centering定心力\"></a>Centering定心力</h4><p>定心力一致的调动节点以至于所有节点(如果多有节点的质量相等则为质心)都是在给定的位置&lt;x,y&gt;。<br>每一个施加了这个力的节点的位置会被改变；但是它的速度不变，这样做通常会导致节点超出目标中心并且围着这个中心震荡。这个力帮助节点保持在视口的中心，不像定位力，会扭曲它们的相对位置。</p>\n<p><strong>1.  d3.forceCenter([x, y])</strong></p>\n<p>使用指定的x和y坐标创建新的定心力。如果x和y是未指定,默认&lt;0, 0&gt;</p>\n<p><strong>2.  center.x([x])</strong></p>\n<p>如果指定了x，则将定心位置的x坐标设置为指定的数值并返回此力。如果没有指定x，则返回当前x坐标，该坐标默认为0。</p>\n<p><strong>3.  center.y([y])</strong></p>\n<p>如果指定了y，则将定心位置的y坐标设置为指定的数值并返回此力。如果没有指定y，则返回当前y坐标，默认为0。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> simulation = d3.forceSimulation(nodes)</span><br><span class=\"line\">    .force(<span class=\"string\">\"charge\"</span>, d3.forceManyBody())</span><br><span class=\"line\">    .force(<span class=\"string\">\"link\"</span>, d3.forceLink(links))</span><br><span class=\"line\">    .force(<span class=\"string\">\"center\"</span>, d3.forceCenter().x().y())</span><br></pre></td></tr></table></figure>\n<h4 id=\"Collision碰撞力\"><a href=\"#Collision碰撞力\" class=\"headerlink\" title=\"Collision碰撞力\"></a>Collision碰撞力</h4><p>碰撞力将节点视为具有给定半径的圆，而不是点，并且阻止节点重叠。通常情况下，两个节点a和b是分开的所以a和b之间的距离至少是两个节点的半径之和。为了减少抖动，这是一个默认的软约束，具有可配置的强度和迭代次数。</p>\n<p><strong>1. d3.forceCollide([radius])</strong></p>\n<p>以一个特定的半径创建一个新的圆形碰撞力。如果这个半径没有设置，所有的节点都默认为常数1。</p>\n<p><strong>2. collide.radius([radius])</strong></p>\n<p>如果给定了半径，将半径访问器设为一个特定的数字或者函数，重新评估每一个节点的半径访问器，并且返回这个模拟。如果没有给定半径，返回当前的半径访问器，默认如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">radius</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>这个半径访问器会被这个模拟中的每一个节点调用，传递节点及其从零开始的索引。然后，结果数被存储在内部，这样每个节点的半径只在初始化力或使用新的半径调用此方法时重新计算，而不是在力的每个应用程序上。</p>\n<p><strong>3. collide.strength([strength])</strong></p>\n<p>如果指定了强度，设置这个力强度为[0, 1]之间的数字，并返回这个模拟。如果未指定强度，返回当前的强度，默认是0.7。</p>\n<p>通过迭代松弛来解决重叠节点。对于每个节点来说，在下个确定的呼吸事件决定的预计（使用预期的位置&lt;x+vx, y+vy&gt;）将会重叠它的其他节点，z这个节点的速度会改变，推着这个节点超出另一个将会重叠的节点。 速度的变化被力的强度减弱，这样同时重叠的分辨率可以混合在一起来找到一个稳定的解决方案。</p>\n<p><strong>4. collide.iterations([iterations])</strong></p>\n<p>如果指定了迭代次数，给每一个应用设置迭代次数的值为一个特定的数字并且返回这个模拟。如果未指定迭代次数，返回当前的迭代次数，默认值为1。增加迭代次数大大增加了约束的钢度并且避免节点的部分重合，但是也增加了计算力的运行时成本。</p>\n<h4 id=\"Links链接力\"><a href=\"#Links链接力\" class=\"headerlink\" title=\"Links链接力\"></a>Links链接力</h4><p>根据想要的链接距离，链接力将链接在一起的节点推到一起或分开。这个力的强度与链接节点和目标节点的距离差成比例，类似于弹簧力。</p>\n<p><strong>1. d3.forceLink([links])</strong></p>\n<p>创建一个新的链接力，传一个特定的links和默认参数。如果links未指定，它将默认是一个空数组。</p>\n<p><strong>2. link.links([links])</strong></p>\n<p>如果links未指定，设置与此力关联的链接数组，重新计算每一个链接参数的距离和强度，并返回这个模拟。如果links未指定，返回默认值是空数组的当前的链接数组。</p>\n<p>每个链接是一个拥有如下属性的对象：</p>\n<ul>\n<li>source - 这个链接的源头节点</li>\n<li>target - 这个链接的目标节点</li>\n<li>index -  将从零开始的索引转换成链接，通过这种方法分配</li>\n</ul>\n<p>为了方便，一个链接的源头和目标接节点的属性可以用除对象引用外的数值或字符串字符初始化；看link.id。当这个链接力被初始化（或当节点或链接改变的时候重新初始化），任意link.source或link.target的那个非对象属性将会被对应给定目标标识符的对象引用替换。</p>\n<p>如果指定的链接数组被改变，例如当链接增加或从模拟中删除的时候，必须用新的数组重新调用这个方法，以通知更改的力度。这个力不会去创建特定数组的防御副本。</p>\n<p><strong>3.  link.id([id])</strong></p>\n<p>如果指定了id，以特定的函数设置这个节点的id访问器并返回这个模拟。如果未指定，然会当前的节点id访问器，默认数值类型的节点索引：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">id</span>(<span class=\"params\">d</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> d.index;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>默认id访问器允许每一个链接的源或者目标的值指定为节点数组从零开始的索引。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> nodes = [</span><br><span class=\"line\">  &#123;<span class=\"string\">\"id\"</span>: <span class=\"string\">\"Alice\"</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"string\">\"id\"</span>: <span class=\"string\">\"Bob\"</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"string\">\"id\"</span>: <span class=\"string\">\"Carol\"</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> links = [</span><br><span class=\"line\">  &#123;<span class=\"string\">\"source\"</span>: <span class=\"number\">0</span>, <span class=\"string\">\"target\"</span>: <span class=\"number\">1</span>&#125;, <span class=\"comment\">// Alice → Bob</span></span><br><span class=\"line\">  &#123;<span class=\"string\">\"source\"</span>: <span class=\"number\">1</span>, <span class=\"string\">\"target\"</span>: <span class=\"number\">2</span>&#125; <span class=\"comment\">// Bob → Carol</span></span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>现在考虑一个不同的id访问器，它返回一个字符串：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">id</span>(<span class=\"params\">d</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> d.id;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有了这个访问器，你可以使用命名的源和目标：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> nodes = [</span><br><span class=\"line\">  &#123;<span class=\"string\">\"id\"</span>: <span class=\"string\">\"Alice\"</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"string\">\"id\"</span>: <span class=\"string\">\"Bob\"</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"string\">\"id\"</span>: <span class=\"string\">\"Carol\"</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> links = [</span><br><span class=\"line\">  &#123;<span class=\"string\">\"source\"</span>: <span class=\"string\">\"Alice\"</span>, <span class=\"string\">\"target\"</span>: <span class=\"string\">\"Bob\"</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"string\">\"source\"</span>: <span class=\"string\">\"Bob\"</span>, <span class=\"string\">\"target\"</span>: <span class=\"string\">\"Carol\"</span>&#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>当用一个JSON数据展现图谱/图形时，这是一个极其有用的例子。参考<a href=\"https://bl.ocks.org/mbostock/f584aa36df54c451c94a9d0798caed35\" target=\"_blank\" rel=\"noopener\">这个例子</a>。<br>当这个模拟初始化的时候，id访问器被每一个节点调用，同时当节点或者链接改变的时候，传递节点及其从零开始的索引。</p>\n<p><strong>4.  link.distance([distance])</strong></p>\n<p>如果指定了距离，将距离访问器设置未特定的数字或函数，重新计算每个链接的距离访问器，并且返回这个模拟。如果未指定距离，返回当前的距离访问器，默认如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">distance</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">30</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个距离访问器被每个链接调用，传递链接及其从零开始的索引。这个数值的结果将会被存储在内部，当这个模拟初始化或者用一个新的距离调用这个方法的时候会重新计算每一个链接之间的距离，而不是这个模拟的每个应用程序上。</p>\n<p><strong>5. link.strength([strength])</strong></p>\n<p>如果指定了强度，将强度访问器者设置为特定的数字或这个函数，重新计算每个链接的强度访问器，并返回这个强度。如果未指定，返回当前的强度访问器，默认如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">strength</span>(<span class=\"params\">link</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span> / <span class=\"built_in\">Math</span>.min(count(link.source), count(link.target));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中count(node)是一个函数，它返回给定节点作为源或目标的链接数。之所以选择此默认值，是因为它会自动降低连接到紧密连接节点的链接的强度，从而提高稳定性。</p>\n<p>为每个链接调用强度访问器，传递链接及其从零开始的索引。然后，结果数被存储在内部，这样，只有在初始化force或使用新强度调用此方法时，才会重新计算每个链接的强度，而不是在force的每个应用程序上。</p>\n<p><strong>6. link.iterations([iterations])</strong></p>\n<p>如果指定了迭代，则将每个应用程序的迭代次数设置为指定的次数并返回该强制。如果没有指定迭代，则返回默认为1的当前迭代计数。迭代次数的增加极大地增加了约束的刚度，对于复杂的结构如网格是有用的，但也增加了评估力的运行时成本。</p>\n<h4 id=\"Many-Body多体力\"><a href=\"#Many-Body多体力\" class=\"headerlink\" title=\"Many-Body多体力\"></a>Many-Body多体力</h4><p>多体力在多有节点之间相互作用。如果强度时正数，它相当于引力（吸引），如果强度是负数，它相当于静电电荷斥力。该实现使用四叉树和Barnes-Hut近似来极大地提高性能;  他的精确性可以用theta参数定制。</p>\n<p>不像链接力，它仅仅受两个链接的节点影响，这个电荷斥力是全局的；每个节点会影响每个其他的节点，即使他们不是相互连接的子图。</p>\n<p><strong>1. d3.forceManyBody()</strong></p>\n<p>用默认的参数创建一个新的多体力。</p>\n<p><strong>2. manyBody.strength([strength])</strong></p>\n<p>如果指定强度，将强度访问器设为一个特定的数字或函数，重新计算每个节点的强度访问器，并返回这个强度。正数使节点相互吸引，负数使节点相互排斥。如果未指定，返回当前的强度访问器，默认为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">strength</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">-30</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在模拟中，每个节点都会调用强度访问器传递节点及从零开始的索引。这个返回的结果会保存在本地，所以当这个模拟初始化或用一个新的强度调用这个方法的时候，每一个节点的强度重新计算，而不是在模拟的每个应用程序上。</p>\n<p><strong>3. manyBody.theta([theta])</strong></p>\n<p>如果指定theta，将 Barnes–Hut近似准则设置为特定的数值，并发返回这个模拟。如果未指定，返回默认值：0.9。</p>\n<p>为了加速计算，模拟执行 在每个应用程序中使用O(n log n)得出的Barnes-Hut近似值，n是节点数量。对于每个应用程序，使用四叉树存储当前节点的位置。对于每个节点。结合所有给定计算出的所有其他节点的力。对于一个很远的节点集群，电荷力可以近似于用一个独立的、大的节点。这个theta的参数值决定了这个近似值的精确度： 如果四叉树单元的宽度w / l与从节点到单元质心的距离l之比小于theta，则给定单元中的所有节点都视为单个节点，而不是单独处理。</p>\n<p><strong>4. manyBody.distanceMin([distance])</strong></p>\n<p>如果指定距离，将它设置为节点之间的最小距离。如果未指定，返回默认值1. 最小的距离建立了相邻节点的力强度的上线，从而避免不稳定。特别是避免了两个节点完全重合时无限强的力。在这种情况下，力的方向时随机的。</p>\n<p><strong>5. manyBody.distanceMax([distance])</strong></p>\n<p>如果指定距离，将它设置为两个节点间的最大距离。如果未指定，返回默认值无穷大。指定一个有限大的最大距离提高了性能并且生成更加本地化的布局。</p>\n<h4 id=\"Positioning定位力\"><a href=\"#Positioning定位力\" class=\"headerlink\" title=\"Positioning定位力\"></a>Positioning定位力</h4><p>x和y的定位力以可配置的强度将节点推向给定的尺寸预期的位置。径向力是相似的，除了它时将节点推向给定圆的最近点。这个力的强度是跟节点的位置和目标位置的一维距离成正例。虽然这些力可以作用于单个节点，但是它主要作用于所有节点的全局力。</p>\n<p>*<em>1. d3.forceX([x]) *</em></p>\n<p>沿着x轴给定位置x创建一个新的定位力。如果x未指定，默认未0.</p>\n<p><strong>2. x.strength([strength])</strong></p>\n<p>如果指定了strength，将它设置为特定的数值或者函数，重新计算每个节点的强度访问器。并且返回这个强度。强度决定了节点的x方向速度增加多少。例如，强度的值是0.1就表示节点应该从当前的x位置到目标位置要移动1/10的距离。较高的值可以更快的将节点移动到目标位置，这通常是以其他力或约束为代价的。超出0~1的值是不推荐的。<br>如果强度未指定，返回默认值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">strength</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0.1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>模拟中的每个节点都会调用这个强度访问器，传递节点和从零开始的索引。返回的结果会存储在本地，这样，只有在初始化force或使用新x调用此方法时，才会重新计算每个节点的目标x坐标，而不是在force的每个应用程序上。</p>\n<p><strong>3. x.x([x])</strong></p>\n<p>如果指定了x，将其设置为特定数值址或函数，重新计算每个节点的x访问器，并返回这个模拟。如果未指定，返回默认值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">x</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个模拟中的每个节点都会调用这个x访问器，传递节点和从零开始的索引。结果会存储在本地，这样只有模拟初始化或者用新的x调用这个方法的时候会重新计算每个节点的目标x坐标。</p>\n<p><strong>4. d3.forceY([y])</strong></p>\n<p><strong>5. y.strength([strength])</strong></p>\n<p><strong>6. y.y([y])</strong></p>\n<p><strong>7. d3.forceRadial(radius[, x][, y])</strong></p>\n<p>创建一个新的定位力沿着特定圆心和半径的圆。如果x和y未指定，默认值&lt;0,0&gt;。</p>\n<p><strong>8. radial.strength([strength])</strong></p>\n<p>如果指定强度，将其设置未特定的数值或函数，重新计算每个节点的强度计算器，并返回这个模拟。强度决定了节点的x和y轴方向的速度增加多少。例如：对于每个应用来说，值为0.1表示节点从当前位置到这个圆的最近的点要移动1/10的距离。比较高的值表示节点到目标位置的速度更快，通常是以其他力或约束为代价的。超出0~1的值是不推荐的。<br>如果未指定，返回默认值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">strength</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0.1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为模拟中的每个节点调用强度访问器，传递节点及其从零开始的索引。然后，结果数被存储在内部，这样，只有在初始化force或使用新强度调用此方法时，才会重新计算每个节点的强度，而不是在force的每个应用程序上。</p>\n<p><strong>9. radial.radius([radius])</strong></p>\n<p>如果指定了半径，将其设置为特定的值或函数，重新计算每个节点的半径访问器，并返回这个模拟。如果未指定返回当前的半径访问器。<br>为模拟中的每个节点调用radius访问器，传递节点及其从零开始的索引。然后，结果数被存储在内部，以便仅在初始化force或使用新半径调用此方法时重新计算每个节点的目标半径，而不是在force的每个应用程序上。</p>\n<p><strong>10. radial.x([x])</strong></p>\n<p>如果指定了x，则将圆心的x坐标设置为指定的数值并返回此力。如果没有指定x，则返回中心的当前x坐标，默认为0。</p>\n<p><strong>11. radial.y([y])</strong></p>\n<p>如果指定了y，则将圆心的y坐标设置为指定的数值并返回此力。如果没有指定y，则返回中心的当前y坐标，默认为0。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"d3-forceSimulation-nodes\"><a href=\"#d3-forceSimulation-nodes\" class=\"headerlink\" title=\"d3.forceSimulation( [nodes] )\"></a>d3.forceSimulation( [nodes] )</h4><p>使用指定的节点数据和无强度力创建一个新的模拟。若未指定nodes，默认为空数组。该模拟是自启动的；在该模拟运行时使用 <a href=\"https://github.com/d3/d3-force/blob/v1.2.1/README.md#simulation_on\" target=\"_blank\" rel=\"noopener\">simulation.on</a> 监听每个瞬间（呼吸）事件。如果你想要手动运行模拟，调用 <a href=\"https://github.com/d3/d3-force/blob/v1.2.1/README.md#simulation_stop\" target=\"_blank\" rel=\"noopener\">simulation.stop</a>, 然后需要调用  <a href=\"https://github.com/d3/d3-force/blob/v1.2.1/README.md#simulation_tick\" target=\"_blank\" rel=\"noopener\">simulation.tick</a> .</p>\n<h4 id=\"simulation-nodes（-nodes-）\"><a href=\"#simulation-nodes（-nodes-）\" class=\"headerlink\" title=\"simulation.nodes（[nodes]）\"></a>simulation.nodes（[nodes]）</h4><p>每个node必须是一个对象模型，下面几个属性将会被仿真系统添加：<br>index-节点在nodes数组中的索引</p>\n<ul>\n<li>x-节点当前的x坐标</li>\n<li>y-节点当前的y-坐标</li>\n<li>vx-节点当前的x方向速度</li>\n<li>vy-节点当前的y方向速度</li>\n</ul>\n<p>固定给定节点的位置，你需要两个特定的额外的属性：</p>\n<ul>\n<li>fx - 节点的固定 x-位置</li>\n<li>fy - 节点的固定 y-位置</li>\n</ul>\n<h4 id=\"force-）\"><a href=\"#force-）\" class=\"headerlink\" title=\"force(）\"></a>force(）</h4><p>force()是一个用以修改节点位置和速度的函数；在这种情况下，force 可以用来模拟电荷或重力之类的经典物理力学，也可以用来解决几何约束，例如将节点保持在边界框内或者保持节点之间的相对距离。</p>\n<h4 id=\"link-froce-弹簧模型\"><a href=\"#link-froce-弹簧模型\" class=\"headerlink\" title=\"link froce(弹簧模型)\"></a>link froce(弹簧模型)</h4><p>可以根据 link distance 将有关联的两个节点拉近或者推远。力的强度与被链接两个节点的距离成比例，类似弹簧力。</p>\n<h4 id=\"d3-forceManyBody\"><a href=\"#d3-forceManyBody\" class=\"headerlink\" title=\"d3.forceManyBody()\"></a>d3.forceManyBody()</h4><p>创建一个使用默认参数的电荷力模型。<br>manyBody.strength([strength]) 如果指定了 strength 则将强度访问器设置为指定的数值或者方法，重新评估每个节点的强度访问器并返回此电荷力。若强度为正值则表示节点之间相互吸引，负值表示节点之间相互排斥。</p>\n<h4 id=\"simulation-alphaTarget-target\"><a href=\"#simulation-alphaTarget-target\" class=\"headerlink\" title=\"simulation.alphaTarget([target])\"></a>simulation.alphaTarget([target])</h4><p>如果指定了 target 则将当前的目标 alpha 设置为指定的值，需要在 [0, 1] 之间。如果没有指定 target 则返回当前默认的目标 alpha 值, 默认为 0.</p>\n<h4 id=\"simulation-force-name-force\"><a href=\"#simulation-force-name-force\" class=\"headerlink\" title=\"simulation.force(name[, force])\"></a>simulation.force(name[, force])</h4><p>如果指定了 force 则表示为仿真添加指定 name 的 force(力学模型) 并返回仿真。如果没有指定 force 则返回当前仿真的对应 name 的力模型，如果没有对应的 name 则返回 undefined. (默认情况下仿真没有任何力学模型，需要手动添加). </p>\n<h4 id=\"enter\"><a href=\"#enter\" class=\"headerlink\" title=\"enter( )\"></a>enter( )</h4><p>操作的意义在于通过此函数返回一个集合，这个集合里面包含的就是没有被可视化的数据；</p>\n<h4 id=\"simulation-on-typenames-listener\"><a href=\"#simulation-on-typenames-listener\" class=\"headerlink\" title=\"simulation.on(typenames, [listener])\"></a>simulation.on(typenames, [listener])</h4><hr>\n<h3 id=\"Forces\"><a href=\"#Forces\" class=\"headerlink\" title=\"Forces\"></a>Forces</h3><p>forces是一个简单的改变节点位置和速度的函数；在这个模拟环境中，一个forces能施加一个典型的物理力，比如电荷力或重力，或者它可以解决一个几何约束， 例如将节点保持在边界框内或将链接节点保持在固定距离之外。<br>举个例子，一个简单的朝着原点（0，0）移动节点的定位力可能实现为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">force</span>(<span class=\"params\">alpha</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, n = nodes.length, node, k = alpha * <span class=\"number\">0.1</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">    node = nodes[i];</span><br><span class=\"line\">    node.vx -= node.x * k;</span><br><span class=\"line\">    node.vy -= node.y * k;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>力模拟通常读取节点当前的位置坐标，然后增加/减去这个节点的速度&lt;vx, vy&gt;,<br>然而，力模拟也可以’偷看‘预期的节点下一个位置&lt;x+vx, y+vy&gt;;这对于通过 通过迭代松弛解决几何约束力是很有必要的。力模拟也可以改变位置方向，这有时可以避免增加模拟的能量，比如在视口模拟重入的时候。</p>\n<p>模拟通常要组合多个力，这个模块提供几个供您享用：</p>\n<ol>\n<li>Centering 定心力</li>\n<li>Collision 碰撞力</li>\n<li>Links 链接力</li>\n<li>Many-body 多体力（电荷）</li>\n<li>Positioning 定位力</li>\n</ol>\n<h4 id=\"Centering定心力\"><a href=\"#Centering定心力\" class=\"headerlink\" title=\"Centering定心力\"></a>Centering定心力</h4><p>定心力一致的调动节点以至于所有节点(如果多有节点的质量相等则为质心)都是在给定的位置&lt;x,y&gt;。<br>每一个施加了这个力的节点的位置会被改变；但是它的速度不变，这样做通常会导致节点超出目标中心并且围着这个中心震荡。这个力帮助节点保持在视口的中心，不像定位力，会扭曲它们的相对位置。</p>\n<p><strong>1.  d3.forceCenter([x, y])</strong></p>\n<p>使用指定的x和y坐标创建新的定心力。如果x和y是未指定,默认&lt;0, 0&gt;</p>\n<p><strong>2.  center.x([x])</strong></p>\n<p>如果指定了x，则将定心位置的x坐标设置为指定的数值并返回此力。如果没有指定x，则返回当前x坐标，该坐标默认为0。</p>\n<p><strong>3.  center.y([y])</strong></p>\n<p>如果指定了y，则将定心位置的y坐标设置为指定的数值并返回此力。如果没有指定y，则返回当前y坐标，默认为0。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> simulation = d3.forceSimulation(nodes)</span><br><span class=\"line\">    .force(<span class=\"string\">\"charge\"</span>, d3.forceManyBody())</span><br><span class=\"line\">    .force(<span class=\"string\">\"link\"</span>, d3.forceLink(links))</span><br><span class=\"line\">    .force(<span class=\"string\">\"center\"</span>, d3.forceCenter().x().y())</span><br></pre></td></tr></table></figure>\n<h4 id=\"Collision碰撞力\"><a href=\"#Collision碰撞力\" class=\"headerlink\" title=\"Collision碰撞力\"></a>Collision碰撞力</h4><p>碰撞力将节点视为具有给定半径的圆，而不是点，并且阻止节点重叠。通常情况下，两个节点a和b是分开的所以a和b之间的距离至少是两个节点的半径之和。为了减少抖动，这是一个默认的软约束，具有可配置的强度和迭代次数。</p>\n<p><strong>1. d3.forceCollide([radius])</strong></p>\n<p>以一个特定的半径创建一个新的圆形碰撞力。如果这个半径没有设置，所有的节点都默认为常数1。</p>\n<p><strong>2. collide.radius([radius])</strong></p>\n<p>如果给定了半径，将半径访问器设为一个特定的数字或者函数，重新评估每一个节点的半径访问器，并且返回这个模拟。如果没有给定半径，返回当前的半径访问器，默认如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">radius</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>这个半径访问器会被这个模拟中的每一个节点调用，传递节点及其从零开始的索引。然后，结果数被存储在内部，这样每个节点的半径只在初始化力或使用新的半径调用此方法时重新计算，而不是在力的每个应用程序上。</p>\n<p><strong>3. collide.strength([strength])</strong></p>\n<p>如果指定了强度，设置这个力强度为[0, 1]之间的数字，并返回这个模拟。如果未指定强度，返回当前的强度，默认是0.7。</p>\n<p>通过迭代松弛来解决重叠节点。对于每个节点来说，在下个确定的呼吸事件决定的预计（使用预期的位置&lt;x+vx, y+vy&gt;）将会重叠它的其他节点，z这个节点的速度会改变，推着这个节点超出另一个将会重叠的节点。 速度的变化被力的强度减弱，这样同时重叠的分辨率可以混合在一起来找到一个稳定的解决方案。</p>\n<p><strong>4. collide.iterations([iterations])</strong></p>\n<p>如果指定了迭代次数，给每一个应用设置迭代次数的值为一个特定的数字并且返回这个模拟。如果未指定迭代次数，返回当前的迭代次数，默认值为1。增加迭代次数大大增加了约束的钢度并且避免节点的部分重合，但是也增加了计算力的运行时成本。</p>\n<h4 id=\"Links链接力\"><a href=\"#Links链接力\" class=\"headerlink\" title=\"Links链接力\"></a>Links链接力</h4><p>根据想要的链接距离，链接力将链接在一起的节点推到一起或分开。这个力的强度与链接节点和目标节点的距离差成比例，类似于弹簧力。</p>\n<p><strong>1. d3.forceLink([links])</strong></p>\n<p>创建一个新的链接力，传一个特定的links和默认参数。如果links未指定，它将默认是一个空数组。</p>\n<p><strong>2. link.links([links])</strong></p>\n<p>如果links未指定，设置与此力关联的链接数组，重新计算每一个链接参数的距离和强度，并返回这个模拟。如果links未指定，返回默认值是空数组的当前的链接数组。</p>\n<p>每个链接是一个拥有如下属性的对象：</p>\n<ul>\n<li>source - 这个链接的源头节点</li>\n<li>target - 这个链接的目标节点</li>\n<li>index -  将从零开始的索引转换成链接，通过这种方法分配</li>\n</ul>\n<p>为了方便，一个链接的源头和目标接节点的属性可以用除对象引用外的数值或字符串字符初始化；看link.id。当这个链接力被初始化（或当节点或链接改变的时候重新初始化），任意link.source或link.target的那个非对象属性将会被对应给定目标标识符的对象引用替换。</p>\n<p>如果指定的链接数组被改变，例如当链接增加或从模拟中删除的时候，必须用新的数组重新调用这个方法，以通知更改的力度。这个力不会去创建特定数组的防御副本。</p>\n<p><strong>3.  link.id([id])</strong></p>\n<p>如果指定了id，以特定的函数设置这个节点的id访问器并返回这个模拟。如果未指定，然会当前的节点id访问器，默认数值类型的节点索引：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">id</span>(<span class=\"params\">d</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> d.index;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>默认id访问器允许每一个链接的源或者目标的值指定为节点数组从零开始的索引。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> nodes = [</span><br><span class=\"line\">  &#123;<span class=\"string\">\"id\"</span>: <span class=\"string\">\"Alice\"</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"string\">\"id\"</span>: <span class=\"string\">\"Bob\"</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"string\">\"id\"</span>: <span class=\"string\">\"Carol\"</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> links = [</span><br><span class=\"line\">  &#123;<span class=\"string\">\"source\"</span>: <span class=\"number\">0</span>, <span class=\"string\">\"target\"</span>: <span class=\"number\">1</span>&#125;, <span class=\"comment\">// Alice → Bob</span></span><br><span class=\"line\">  &#123;<span class=\"string\">\"source\"</span>: <span class=\"number\">1</span>, <span class=\"string\">\"target\"</span>: <span class=\"number\">2</span>&#125; <span class=\"comment\">// Bob → Carol</span></span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>现在考虑一个不同的id访问器，它返回一个字符串：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">id</span>(<span class=\"params\">d</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> d.id;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有了这个访问器，你可以使用命名的源和目标：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> nodes = [</span><br><span class=\"line\">  &#123;<span class=\"string\">\"id\"</span>: <span class=\"string\">\"Alice\"</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"string\">\"id\"</span>: <span class=\"string\">\"Bob\"</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"string\">\"id\"</span>: <span class=\"string\">\"Carol\"</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> links = [</span><br><span class=\"line\">  &#123;<span class=\"string\">\"source\"</span>: <span class=\"string\">\"Alice\"</span>, <span class=\"string\">\"target\"</span>: <span class=\"string\">\"Bob\"</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"string\">\"source\"</span>: <span class=\"string\">\"Bob\"</span>, <span class=\"string\">\"target\"</span>: <span class=\"string\">\"Carol\"</span>&#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>当用一个JSON数据展现图谱/图形时，这是一个极其有用的例子。参考<a href=\"https://bl.ocks.org/mbostock/f584aa36df54c451c94a9d0798caed35\" target=\"_blank\" rel=\"noopener\">这个例子</a>。<br>当这个模拟初始化的时候，id访问器被每一个节点调用，同时当节点或者链接改变的时候，传递节点及其从零开始的索引。</p>\n<p><strong>4.  link.distance([distance])</strong></p>\n<p>如果指定了距离，将距离访问器设置未特定的数字或函数，重新计算每个链接的距离访问器，并且返回这个模拟。如果未指定距离，返回当前的距离访问器，默认如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">distance</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">30</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个距离访问器被每个链接调用，传递链接及其从零开始的索引。这个数值的结果将会被存储在内部，当这个模拟初始化或者用一个新的距离调用这个方法的时候会重新计算每一个链接之间的距离，而不是这个模拟的每个应用程序上。</p>\n<p><strong>5. link.strength([strength])</strong></p>\n<p>如果指定了强度，将强度访问器者设置为特定的数字或这个函数，重新计算每个链接的强度访问器，并返回这个强度。如果未指定，返回当前的强度访问器，默认如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">strength</span>(<span class=\"params\">link</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span> / <span class=\"built_in\">Math</span>.min(count(link.source), count(link.target));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中count(node)是一个函数，它返回给定节点作为源或目标的链接数。之所以选择此默认值，是因为它会自动降低连接到紧密连接节点的链接的强度，从而提高稳定性。</p>\n<p>为每个链接调用强度访问器，传递链接及其从零开始的索引。然后，结果数被存储在内部，这样，只有在初始化force或使用新强度调用此方法时，才会重新计算每个链接的强度，而不是在force的每个应用程序上。</p>\n<p><strong>6. link.iterations([iterations])</strong></p>\n<p>如果指定了迭代，则将每个应用程序的迭代次数设置为指定的次数并返回该强制。如果没有指定迭代，则返回默认为1的当前迭代计数。迭代次数的增加极大地增加了约束的刚度，对于复杂的结构如网格是有用的，但也增加了评估力的运行时成本。</p>\n<h4 id=\"Many-Body多体力\"><a href=\"#Many-Body多体力\" class=\"headerlink\" title=\"Many-Body多体力\"></a>Many-Body多体力</h4><p>多体力在多有节点之间相互作用。如果强度时正数，它相当于引力（吸引），如果强度是负数，它相当于静电电荷斥力。该实现使用四叉树和Barnes-Hut近似来极大地提高性能;  他的精确性可以用theta参数定制。</p>\n<p>不像链接力，它仅仅受两个链接的节点影响，这个电荷斥力是全局的；每个节点会影响每个其他的节点，即使他们不是相互连接的子图。</p>\n<p><strong>1. d3.forceManyBody()</strong></p>\n<p>用默认的参数创建一个新的多体力。</p>\n<p><strong>2. manyBody.strength([strength])</strong></p>\n<p>如果指定强度，将强度访问器设为一个特定的数字或函数，重新计算每个节点的强度访问器，并返回这个强度。正数使节点相互吸引，负数使节点相互排斥。如果未指定，返回当前的强度访问器，默认为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">strength</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">-30</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在模拟中，每个节点都会调用强度访问器传递节点及从零开始的索引。这个返回的结果会保存在本地，所以当这个模拟初始化或用一个新的强度调用这个方法的时候，每一个节点的强度重新计算，而不是在模拟的每个应用程序上。</p>\n<p><strong>3. manyBody.theta([theta])</strong></p>\n<p>如果指定theta，将 Barnes–Hut近似准则设置为特定的数值，并发返回这个模拟。如果未指定，返回默认值：0.9。</p>\n<p>为了加速计算，模拟执行 在每个应用程序中使用O(n log n)得出的Barnes-Hut近似值，n是节点数量。对于每个应用程序，使用四叉树存储当前节点的位置。对于每个节点。结合所有给定计算出的所有其他节点的力。对于一个很远的节点集群，电荷力可以近似于用一个独立的、大的节点。这个theta的参数值决定了这个近似值的精确度： 如果四叉树单元的宽度w / l与从节点到单元质心的距离l之比小于theta，则给定单元中的所有节点都视为单个节点，而不是单独处理。</p>\n<p><strong>4. manyBody.distanceMin([distance])</strong></p>\n<p>如果指定距离，将它设置为节点之间的最小距离。如果未指定，返回默认值1. 最小的距离建立了相邻节点的力强度的上线，从而避免不稳定。特别是避免了两个节点完全重合时无限强的力。在这种情况下，力的方向时随机的。</p>\n<p><strong>5. manyBody.distanceMax([distance])</strong></p>\n<p>如果指定距离，将它设置为两个节点间的最大距离。如果未指定，返回默认值无穷大。指定一个有限大的最大距离提高了性能并且生成更加本地化的布局。</p>\n<h4 id=\"Positioning定位力\"><a href=\"#Positioning定位力\" class=\"headerlink\" title=\"Positioning定位力\"></a>Positioning定位力</h4><p>x和y的定位力以可配置的强度将节点推向给定的尺寸预期的位置。径向力是相似的，除了它时将节点推向给定圆的最近点。这个力的强度是跟节点的位置和目标位置的一维距离成正例。虽然这些力可以作用于单个节点，但是它主要作用于所有节点的全局力。</p>\n<p>*<em>1. d3.forceX([x]) *</em></p>\n<p>沿着x轴给定位置x创建一个新的定位力。如果x未指定，默认未0.</p>\n<p><strong>2. x.strength([strength])</strong></p>\n<p>如果指定了strength，将它设置为特定的数值或者函数，重新计算每个节点的强度访问器。并且返回这个强度。强度决定了节点的x方向速度增加多少。例如，强度的值是0.1就表示节点应该从当前的x位置到目标位置要移动1/10的距离。较高的值可以更快的将节点移动到目标位置，这通常是以其他力或约束为代价的。超出0~1的值是不推荐的。<br>如果强度未指定，返回默认值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">strength</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0.1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>模拟中的每个节点都会调用这个强度访问器，传递节点和从零开始的索引。返回的结果会存储在本地，这样，只有在初始化force或使用新x调用此方法时，才会重新计算每个节点的目标x坐标，而不是在force的每个应用程序上。</p>\n<p><strong>3. x.x([x])</strong></p>\n<p>如果指定了x，将其设置为特定数值址或函数，重新计算每个节点的x访问器，并返回这个模拟。如果未指定，返回默认值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">x</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个模拟中的每个节点都会调用这个x访问器，传递节点和从零开始的索引。结果会存储在本地，这样只有模拟初始化或者用新的x调用这个方法的时候会重新计算每个节点的目标x坐标。</p>\n<p><strong>4. d3.forceY([y])</strong></p>\n<p><strong>5. y.strength([strength])</strong></p>\n<p><strong>6. y.y([y])</strong></p>\n<p><strong>7. d3.forceRadial(radius[, x][, y])</strong></p>\n<p>创建一个新的定位力沿着特定圆心和半径的圆。如果x和y未指定，默认值&lt;0,0&gt;。</p>\n<p><strong>8. radial.strength([strength])</strong></p>\n<p>如果指定强度，将其设置未特定的数值或函数，重新计算每个节点的强度计算器，并返回这个模拟。强度决定了节点的x和y轴方向的速度增加多少。例如：对于每个应用来说，值为0.1表示节点从当前位置到这个圆的最近的点要移动1/10的距离。比较高的值表示节点到目标位置的速度更快，通常是以其他力或约束为代价的。超出0~1的值是不推荐的。<br>如果未指定，返回默认值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">strength</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0.1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为模拟中的每个节点调用强度访问器，传递节点及其从零开始的索引。然后，结果数被存储在内部，这样，只有在初始化force或使用新强度调用此方法时，才会重新计算每个节点的强度，而不是在force的每个应用程序上。</p>\n<p><strong>9. radial.radius([radius])</strong></p>\n<p>如果指定了半径，将其设置为特定的值或函数，重新计算每个节点的半径访问器，并返回这个模拟。如果未指定返回当前的半径访问器。<br>为模拟中的每个节点调用radius访问器，传递节点及其从零开始的索引。然后，结果数被存储在内部，以便仅在初始化force或使用新半径调用此方法时重新计算每个节点的目标半径，而不是在force的每个应用程序上。</p>\n<p><strong>10. radial.x([x])</strong></p>\n<p>如果指定了x，则将圆心的x坐标设置为指定的数值并返回此力。如果没有指定x，则返回中心的当前x坐标，默认为0。</p>\n<p><strong>11. radial.y([y])</strong></p>\n<p>如果指定了y，则将圆心的y坐标设置为指定的数值并返回此力。如果没有指定y，则返回中心的当前y坐标，默认为0。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}