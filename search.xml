<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>About Me</title>
    <url>/2019/10/01/about/</url>
    <content><![CDATA[<p>一介码农…</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>background-clip属性详解</title>
    <url>/2019/12/09/background-clip/</url>
    <content><![CDATA[<blockquote>
<p>对于每个前端开发者来说，CSS 中的 <strong>background</strong> 属性用起来该是游刃有余了。但是 CSS3 的 <strong>background-clip</strong> 属性可能不太了解，下面就来跟我一起学习这个属性吧。</p>
</blockquote>
<p><code>background-clip</code>，顾名思义肯定跟背景裁切有关。没错，它存在以下四个属性值</p>
<ul>
<li>border-box（默认值）</li>
<li>padding-box</li>
<li>content-box</li>
<li>text</li>
</ul>
<p>我在网上查了很多资源大部分都只写了前三个属性值，这也是这篇博客诞生的缘故之一。作为一个笔记，假如碰巧被你看到，再碰巧对你有所帮助那就再好不过啦~</p>
<p>下面我们通过具体 Demo 介绍一下每个属性值。</p>
<span id="more"></span>

<p>容器盒子详情如下：<br><img src="/2019/12/09/background-clip/box.jpg" alt="box"></p>
<h2 id="1-border-box（默认值）"><a href="#1-border-box（默认值）" class="headerlink" title="1.border-box（默认值）"></a>1.border-box（默认值）</h2><p><em>css 代码：</em></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">  <span class="selector-class">.clip-box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0px</span> auto;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">20px</span> dashed <span class="built_in">rgba</span>(<span class="number">204</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="attribute">background-color</span>: orange;</span><br><span class="line">    <span class="attribute">background-clip</span>:border-box; </span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>_html 代码_：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clip-box&quot;</span>&gt;</span>CSS3背景裁切属性详解 by YYL<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>页面效果图：（背景色从<code>border</code>的外边缘开始）<br><img src="/2019/12/09/background-clip/clip1.jpg" alt="clip1"></p>
<h2 id="2-padding-box"><a href="#2-padding-box" class="headerlink" title="2.padding-box"></a>2.padding-box</h2><p>css 代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clip-box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0px</span> auto;</span><br><span class="line">    <span class="attribute">background-clip</span>:padding-box; </span><br><span class="line">    <span class="attribute">background-color</span>: orange;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">20px</span> dashed <span class="built_in">rgba</span>(<span class="number">204</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>html 代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clip-box&quot;</span>&gt;</span>CSS3背景裁切属性详解 by YYL<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>页面效果图：（背景色从 padding 开始）<br><img src="/2019/12/09/background-clip/clip2.jpg" alt="clip2"></p>
<h2 id="3-content-box"><a href="#3-content-box" class="headerlink" title="3.content-box"></a>3.content-box</h2><p>css 代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clip-box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0px</span> auto;</span><br><span class="line">    <span class="attribute">background-clip</span>:content-box; </span><br><span class="line">    <span class="attribute">background-color</span>: orange;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">20px</span> dashed <span class="built_in">rgba</span>(<span class="number">204</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>html 代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clip-box&quot;</span>&gt;</span>CSS3背景裁切属性详解 by YYL<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>页面效果图：（背景色从内容 content 开始）<br><img src="/2019/12/09/background-clip/clip3.jpg" alt="clip3"></p>
<h2 id="4-text"><a href="#4-text" class="headerlink" title="4.text"></a>4.text</h2><p>css 代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clip-box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0px</span> auto;</span><br><span class="line">    <span class="attribute">background-clip</span>:text; </span><br><span class="line">    -webkit-<span class="attribute">background-clip</span>:text;</span><br><span class="line">    <span class="attribute">background-color</span>: orange;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">20px</span> dashed <span class="built_in">rgba</span>(<span class="number">204</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">color</span>: transparent;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>html 代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clip-box&quot;</span>&gt;</span>CSS3背景裁切属性详解 by YYL<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>页面效果图：<br><img src="/2019/12/09/background-clip/clip4.jpg" alt="clip4"></p>
<blockquote>
<p>你可能会说给文字加颜色直接用 color 属性岂不是更好更方便。是的，但如果我想加渐变背景色呢？加背景图呢？这时就是它大显神通的时候了。<br>应用如下：</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clip-box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">260px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0px</span> auto;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to bottom, orange,green);</span><br><span class="line">    <span class="attribute">background-clip</span>:text; </span><br><span class="line">    -webkit-<span class="attribute">background-clip</span>:text;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">20px</span> dashed <span class="built_in">rgba</span>(<span class="number">204</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">color</span>: transparent;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>html 代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clip-box&quot;</span>&gt;</span>CSS3背景裁切属性详解 by YYL<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2019/12/09/background-clip/clip-text.jpg" alt="clip-text"> <img src="/2019/12/09/background-clip/clip-img.jpg" alt="clip-img"></p>
<p>本文有不到之处欢迎交流指正，感谢~</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6之你不知道的Array.from()</title>
    <url>/2020/01/10/es6-array-from/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>先来了解几个概念：</p>
<blockquote>
<p>数组：是有序的元素序列，其索引是从 0 开始自然增长的整数，元素值可以是任何 JavaScript 值，并且包含一个名为 length 属性，该属性值表示数组元素的长度。</p>
</blockquote>
<blockquote>
<p>对象：JavaScript 中对象类型为一组无序的由键/值组成的数据集合，其元素的键名和值都可以自定义。</p>
</blockquote>
<blockquote>
<p>类数组对象：是一种类似数组的对象。最基本的要求就是具有 length 属性的对象。</p>
</blockquote>
<h3 id="三种使用方式"><a href="#三种使用方式" class="headerlink" title="三种使用方式"></a>三种使用方式</h3><p>根据传参的形式不同分为三种使用方式。</p>
<h5 id="1-Array-from-length-x-Fn"><a href="#1-Array-from-length-x-Fn" class="headerlink" title="1. Array.from({length: x}, Fn)"></a>1. Array.from({length: x}, Fn)</h5><p>第一个参数指定了第二个参数的执行次数，返回一个长度为 x 的数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(&#123; <span class="attr">length</span>: <span class="number">3</span> &#125;, <span class="function">() =&gt;</span> <span class="string">&#x27;lemon&#x27;</span>) <span class="comment">// [&quot;lemon&quot;, &quot;lemon&quot;, &quot;lemon&quot;]</span></span><br><span class="line"><span class="built_in">Array</span>.from(&#123; <span class="attr">length</span>: <span class="number">3</span> &#125;, <span class="function">(<span class="params">v, i</span>) =&gt;</span> i) <span class="comment">// 生成一个从0开始的的数组[0, 1, 2] 这里我暂时还有疑问参数v是什么？？？</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.from(&#123; <span class="attr">length</span>: <span class="number">3</span> &#125;, <span class="function">(<span class="params">v, i</span>) =&gt;</span> (item = &#123; <span class="attr">year</span>: i + <span class="number">2000</span> &#125;)) <span class="comment">// 生成一个年份对象数组[&#123;&#x27;year&#x27;: 2000, &#x27;year&#x27;: 2001, &#x27;year&#x27;: 2002&#125;]</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h5 id="2-Array-from-obj-mapFn"><a href="#2-Array-from-obj-mapFn" class="headerlink" title="2. Array.from(obj, mapFn)"></a>2. Array.from(obj, mapFn)</h5><p>obj 指数组，类数组对象或 set 对象，第二个参数 mapFn 作用类似于数组 map 方法，用来对每个元素进行处理，将处理后的值放入返回的数组中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将一个数组中布尔值为false的成员指为特定字符串lemon</span></span><br><span class="line"><span class="built_in">Array</span>.from([<span class="number">1</span>, , <span class="number">2</span>, <span class="number">3</span>], <span class="function">(<span class="params">i</span>) =&gt;</span> i || <span class="string">&#x27;lemon&#x27;</span>) <span class="comment">// [1, &quot;lemon&quot;, 2, 3]</span></span><br><span class="line"><span class="comment">// 将一个类似数组的对象转为一个数组，并在原来的基础上乘以2倍</span></span><br><span class="line"><span class="keyword">let</span> likeArray = &#123; <span class="number">0</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">1</span>: <span class="string">&#x27;3&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;5&#x27;</span>, <span class="attr">length</span>: <span class="number">3</span> &#125;</span><br><span class="line"><span class="built_in">Array</span>.from(likeArray, <span class="function">(<span class="params">i</span>) =&gt;</span> i * <span class="number">2</span>) <span class="comment">//[ 2, 6,10 ]</span></span><br><span class="line"><span class="comment">// 将一个set对象转为数组，并在原来的基础上加2</span></span><br><span class="line"><span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]), <span class="function">(<span class="params">i</span>) =&gt;</span> i + <span class="number">2</span>) <span class="comment">// [3,4,5]</span></span><br></pre></td></tr></table></figure>

<h5 id="3-Array-from-String"><a href="#3-Array-from-String" class="headerlink" title="3. Array.from(String)"></a>3. Array.from(String)</h5><p>参数是字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(<span class="string">&#x27;hello&#x27;</span>) <span class="comment">// [&#x27;h&#x27;,&#x27;e&#x27;,&#x27;l&#x27;,&#x27;l&#x27;,&#x27;o&#x27;]</span></span><br></pre></td></tr></table></figure>

<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><blockquote>
<p>我的应用：生成从 2020（本年）~ 1900 年的一个数组。</p>
</blockquote>
<p>当然有很多方法可以来实现，我就想说 ES6 中有没有快捷的新方法来学习一下，Array.from 用起来体验不错哦。</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">const len = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear() - <span class="number">1900</span> + <span class="number">1</span></span><br><span class="line"><span class="built_in">Array</span>.<span class="keyword">from</span>(&#123; length: len &#125;, <span class="function"><span class="params">(v, i)</span> =&gt;</span> i + <span class="number">1900</span> ).reverse()</span><br></pre></td></tr></table></figure>

<p>目前我的疑问，第二个参数里函数的两个参数 v, i 分别是什么，为什么不传 v 的时候数组每项就变成 undefined 或 NaN 了？</p>
<blockquote>
<p>本文有不到之处欢迎交流指正~</p>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>ES6</category>
        <category>Array</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>文件下载的三种方式</title>
    <url>/2021/09/23/file-down/</url>
    <content><![CDATA[<p>文件上传下载是项目中经常遇到的常规功能，本文针对下载功能总结了一共三种使用方式。</p>
<h5 id="一-无-API-浏览器直接下载（静态资源在前端）"><a href="#一-无-API-浏览器直接下载（静态资源在前端）" class="headerlink" title="一.无 API 浏览器直接下载（静态资源在前端）"></a>一.无 API 浏览器直接下载（静态资源在前端）</h5><p>将静态资源文件直接放于<code> public</code> 目录下，打包时 <code>public</code> 文件不会被编译。</p>
<blockquote>
<p>注意：静态资源的路径，在 public 文件夹下路径是<code>/文件名</code></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;download-file&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/file.xlsx&quot;</span> <span class="attr">download</span>=<span class="string">&quot;模板.xlsx&quot;</span>&gt;</span>下载模板文件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者使用非 a 标签的按钮下载：</p>
<span id="more"></span>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">@param &#123;string&#125; url  静态资源url</span></span><br><span class="line"><span class="comment">@param &#123;string&#125; filename  静态资源文件名(可选)</span></span><br><span class="line"><span class="comment">@param &#123;string&#125; target  </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fileUrlHandled = <span class="function">(<span class="params">&#123; url, filename, target &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> downloadElement = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  downloadElement.style.display = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">  downloadElement.href = url</span><br><span class="line">  <span class="keyword">if</span> (target) &#123;</span><br><span class="line">    downloadElement.target = <span class="string">&#x27;_blank&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  downloadElement.rel = <span class="string">&#x27;noopener noreferrer&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (filename) &#123;</span><br><span class="line">    downloadElement.download = filename</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(downloadElement)</span><br><span class="line">  downloadElement.click()</span><br><span class="line">  <span class="built_in">document</span>.body.removeChild(downloadElement)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>缺点：文件名不可控。</p>
<h5 id="二-后端-API-返回静态资源下载-url"><a href="#二-后端-API-返回静态资源下载-url" class="headerlink" title="二.后端 API 返回静态资源下载 url"></a>二.后端 API 返回静态资源下载 url</h5><p>原理：使用 ajax 下载</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取 blob</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;String&#125;</span> </span>url 目标文件地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Promise&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBlob</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"></span><br><span class="line">    xhr.open(<span class="string">&#x27;GET&#x27;</span>, url, <span class="literal">true</span>)</span><br><span class="line">    xhr.responseType = <span class="string">&#x27;blob&#x27;</span></span><br><span class="line">    xhr.onload = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">        resolve(xhr.response)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Message.error(xhr.statusText || <span class="string">&#x27;文件获取失败&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    xhr.send()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;Blob&#125;</span> <span class="variable">blob</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;String&#125;</span> </span>filename 想要保存的文件名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveAs</span>(<span class="params">blob, filename</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.navigator.msSaveOrOpenBlob) &#123;</span><br><span class="line">    navigator.msSaveBlob(blob, filename)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> body = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    link.href = <span class="built_in">window</span>.URL.createObjectURL(blob)</span><br><span class="line">    link.download = filename</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fix Firefox</span></span><br><span class="line">    link.style.display = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">    body.appendChild(link)</span><br><span class="line"></span><br><span class="line">    link.click()</span><br><span class="line">    body.removeChild(link)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.URL.revokeObjectURL(link.href)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;String&#125;</span> </span>url 目标文件地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;String&#125;</span> </span>filename 想要保存的文件名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">download</span>(<span class="params">url, filename</span>) </span>&#123;</span><br><span class="line">  getBlob(url).then(<span class="function">(<span class="params">blob</span>) =&gt;</span> &#123;</span><br><span class="line">    saveAs(blob, filename)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>缺点：存在跨域问题。<br>优点：文件名可控。</p>
</blockquote>
<h5 id="三-后端-API-返回文件流"><a href="#三-后端-API-返回文件流" class="headerlink" title="三.后端 API 返回文件流"></a>三.后端 API 返回文件流</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 二次封装axios POST请求方法下载</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">AppDownload</span>(<span class="params">url, data, baseURL</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    instance</span><br><span class="line">      .post(url, data, &#123;</span><br><span class="line">        baseURL,</span><br><span class="line">        <span class="attr">responseType</span>: <span class="string">&#x27;blob&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">      .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res &amp;&amp; res.status !== <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="comment">// reject(new Error(`下载失败`))</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> reader = <span class="keyword">new</span> FileReader()</span><br><span class="line">          reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> content = reader.result <span class="comment">// 内容就在这里</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="regexp">/&quot;ok&quot;:false/</span>.test(content)) &#123;</span><br><span class="line">              <span class="keyword">let</span> response = &#123;</span><br><span class="line">                <span class="attr">data</span>: <span class="built_in">JSON</span>.parse(content)</span><br><span class="line">              &#125;</span><br><span class="line">              responseFn(&#123; ...&#123; <span class="attr">res</span>: response &#125;, resolve, reject &#125;)</span><br><span class="line">              <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> url = <span class="built_in">window</span>.URL.createObjectURL(<span class="keyword">new</span> Blob([res.data]), &#123;</span><br><span class="line">              <span class="attr">type</span>: <span class="string">&#x27;multipary/form-data&#x27;</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">let</span> link = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">            link.style.display = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">            link.href = url</span><br><span class="line">            <span class="keyword">let</span> filename = data.filename || <span class="string">`<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>() - <span class="number">0</span>&#125;</span>.xlsx`</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (res.headers[<span class="string">&#x27;filename&#x27;</span>]) &#123;</span><br><span class="line">                filename = <span class="built_in">decodeURI</span>(res.headers[<span class="string">&#x27;filename&#x27;</span>]) || <span class="string">`<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>() - <span class="number">0</span>&#125;</span>.xlsx`</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">              <span class="built_in">console</span>.log(e)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            link.setAttribute(<span class="string">&#x27;download&#x27;</span>, filename)</span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(link)</span><br><span class="line">            link.click()</span><br><span class="line">            URL.revokeObjectURL(url.href)</span><br><span class="line">            <span class="built_in">document</span>.body.removeChild(link)</span><br><span class="line">            resolve()</span><br><span class="line">          &#125;</span><br><span class="line">          reader.readAsText(res.data)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error)</span><br><span class="line">        Message.error(&#123;</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&#x27;download failed&#x27;</span>,</span><br><span class="line">          <span class="attr">duration</span>: <span class="number">2000</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：后端需要将响应头中的 Access-Control-Expose-Headers，设置 Content-Disposition，否则前端取不到 Content-Disposition 的值。</p>
</blockquote>
<p>本文不到之处欢迎指正，感谢~</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>文件</category>
        <category>下载</category>
      </categories>
      <tags>
        <tag>上传/下载</tag>
      </tags>
  </entry>
  <entry>
    <title>git常用命令</title>
    <url>/2020/06/08/git-command/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>git 相关知识可以说是开发者的必备常识，虽然目前市面有很多方便的可视化操作工具，但是 git 的指令用起来不仅方便快捷而且显得更加有逼格，况且面试的时候有可能被问到，所以还是有必要学习并掌握的。</p>
</blockquote>
<h5 id="1-基础指令"><a href="#1-基础指令" class="headerlink" title="1.基础指令"></a>1.基础指令</h5><p>克隆远程仓库代码到本地</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">git clone 远程仓库地址</span><br></pre></td></tr></table></figure>

<p>添加变更到暂存区</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">git add . <span class="comment">//添加全部变更</span></span><br><span class="line">git add &lt;fileName&gt; <span class="comment">//添加指定文件的变更</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>提交变更</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;your description&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">git pull <span class="comment">// 拉仓库代码</span></span><br><span class="line">git push <span class="comment">// 提交到仓库</span></span><br><span class="line">git push --set-upstream origin &lt;branch name&gt; <span class="comment">// 将本地分支推送为远程分支</span></span><br></pre></td></tr></table></figure>

<h5 id="2-配置相关指令"><a href="#2-配置相关指令" class="headerlink" title="2.配置相关指令"></a>2.配置相关指令</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">git config --<span class="built_in">global</span> user.name <span class="string">&quot;xxx&quot;</span> <span class="comment">//配置用户名</span></span><br><span class="line">git config --<span class="built_in">global</span> user.email <span class="string">&quot;xxx@xxx.com&quot;</span> <span class="comment">//配置邮箱</span></span><br></pre></td></tr></table></figure>

<h5 id="3-分支相关指令"><a href="#3-分支相关指令" class="headerlink" title="3.分支相关指令"></a>3.分支相关指令</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">git branch <span class="comment">// 查看本地分支</span></span><br><span class="line">git branch -r <span class="comment">// 查看远程分支</span></span><br><span class="line">git branch -a <span class="comment">// 查看本地及远程所有分支</span></span><br><span class="line"><span class="comment">// git branch -m &lt;old name&gt; &lt;new name&gt; // 重命名分支</span></span><br><span class="line"></span><br><span class="line">git branch &lt;branch name&gt; <span class="comment">// 创建分支</span></span><br><span class="line">git merge &lt;branch name&gt; <span class="comment">// 合并某分支到当前分支</span></span><br><span class="line">git checkout -b &lt;branch name&gt; <span class="comment">// 创建并切换到分支名为branch name的分支</span></span><br><span class="line"></span><br><span class="line">git branch -d &lt;branch name&gt; <span class="comment">// 删除本地已合并分支（未合并提示删除失败）</span></span><br><span class="line">git branch -D &lt;branch name&gt; <span class="comment">// 强制删除本地未合并分支</span></span><br><span class="line">git push origin --<span class="keyword">delete</span> &lt;branch name&gt; <span class="comment">// 删除远程分支</span></span><br></pre></td></tr></table></figure>

<h5 id="4-回退相关指令"><a href="#4-回退相关指令" class="headerlink" title="4.回退相关指令"></a>4.回退相关指令</h5><p>git 中，HEAD 表示当前版本</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">git checkout &lt;file&gt; <span class="comment">// 恢复未提交的更改</span></span><br><span class="line">git reset HEAD &lt;file&gt; <span class="comment">// 取消之前git add 添加</span></span><br><span class="line"></span><br><span class="line">git reset --hard HEAD~ <span class="comment">// 回退至上一个版本</span></span><br><span class="line">git reset --hard &lt;commit id&gt; <span class="comment">// 回退至指定版本</span></span><br></pre></td></tr></table></figure>

<h5 id="5-标签指令"><a href="#5-标签指令" class="headerlink" title="5.标签指令"></a>5.标签指令</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">git tag <span class="comment">//查看标签</span></span><br><span class="line">git tag &lt;name&gt; <span class="comment">//创建标签</span></span><br><span class="line">git tag -a &lt;name&gt; <span class="comment">//创建一个带注解的标签</span></span><br><span class="line">git tag -d &lt;name&gt;  <span class="comment">//删除标签</span></span><br></pre></td></tr></table></figure>

<h5 id="6-其他指令"><a href="#6-其他指令" class="headerlink" title="6.其他指令"></a>6.其他指令</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">git status <span class="comment">// 查看代码状态</span></span><br><span class="line">git diff <span class="comment">// 查看add与commit改动</span></span><br><span class="line">git remote -v <span class="comment">// 查看远程仓库地址</span></span><br><span class="line">git log <span class="comment">// 查看提交历史</span></span><br><span class="line">git log -p <span class="comment">// 查看每次提交的内容差异</span></span><br><span class="line">git log -<span class="number">2</span> <span class="comment">// 查看最近两次提交</span></span><br><span class="line">git log --stat <span class="comment">// 查看每次提交的简略的统计信息</span></span><br><span class="line">git log --pretty=oneline <span class="comment">// 日志信息格式化为每次提交信息在一行显示</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>本文有不到之处欢迎交流指正~</p>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>WEB应用中的权限认证</title>
    <url>/2021/01/27/gwt-token/</url>
    <content><![CDATA[<h3 id="1-传统方案——基于-cookie-session-的解决方案"><a href="#1-传统方案——基于-cookie-session-的解决方案" class="headerlink" title="1.传统方案——基于 cookie/session 的解决方案"></a>1.传统方案——基于 cookie/session 的解决方案</h3><p>首先，浏览器端向服务端发送 login 请求，把用户名和密码都发送过去，服务器验证用户名密码正确，然后就会创建对应的 session 数据并保存在内存或者数据库中。然后，服务器返回一个 HTTP 200 OK 的 response，这个 response 会有个 header 叫 set-Cookie：sessionid=xxx，浏览器拿到这个 response 以后，因为有 set-Cookie 这个 header， 带上唯一的 id sessionid（set-Cookie：sessionid=xxx），它就会把 cookie 保存在浏览器中，下次我们再访问这个需要权限的接口，这时候会自动把 cookie 带上。服务器端就可以使用 cookie 中的信息 sessionid，查看服务器中是否存在这个 session 的数据，如果存在则返回对应的信息，否则返回 401 Not authorized。</p>
<p>基于 cookie 的身份验证是有状态的，意味着这个验证记录或者会话必须同时保存在服务器端和客户端，服务器要跟踪记录 session 并且存至内存或者数据库，同时前端在 cookie 也要保存这个 sessionid 作为 session 唯一的标识符。这种模式的问题在于扩展性不好。假如只有一台服务器当然没有问题，假如是一个服务器集群，这就要求 session 的数据共享，我们需要每台服务器都读取到这个 session，一种解决方案就是 session 的数据持久化，把数据写到持久层中去，各种服务收到请求以后都向持久层发送数据。这种方案优点是架构清晰，缺点是工程量比较大，另外，持久层如果挂了，那么就单点失败。<br><img width="600px" style="display:block;margin:20px auto;" src="/2021/01/27/gwt-token/1.jpeg"></p>
<span id="more"></span>

<!-- ![1](1.jpeg) -->

<h3 id="2-基于-Token-的解决方案：GWT"><a href="#2-基于-Token-的解决方案：GWT" class="headerlink" title="2.基于 Token 的解决方案：GWT"></a>2.基于 Token 的解决方案：GWT</h3><p>它不同于在服务器保存信息的特点，而是把所有的信息都保存在客户端，之后每次请求都将生成的信息发回到服务器，JWT（JSON WEB TOKEN）就是这种方案的一个代表。</p>
<p>流程：<br>浏览器向服务器发送登陆请求，把用户名和密码发送过去，服务器验证用户名和密码正确，服务端会使用 JWT 算法生成 token 签名，然后 response 返回 token 到客户端，然后浏览器会将 token 储存到客户端，常见方式 local Storage 或者 session Storage 中，之后每次请求将 token 在 HTTP 请求头中发送给服务器（也可以通过放在 cookie 中自动发送的方式，但是这样不能跨域），服务器拿到信息之后 JWT 反向验证对应的 token 是否正确，如果验证通过就返回 200 OK 并带上相应的信息，如果错误则返回 401 Not authorized。<br>如果用户退出登陆，token 在客户端销毁，和服务器无关。基于 token 的身份验证是没有状态的，服务器不需要记录哪些用户已经登陆或者哪些 JWT 已经处理，每个发送到服务器的请求都会带一个 token，服务器通过 token 检查确认请求的有效性。</p>
<p>token 是通过特定的加密算法将用户登陆后的一些信息储存在一个加密后的字符串中，服务器凭 token 认定用户的身份，即服务器是无状态的因此非常容易实现拓展。<br><img width="600px" style="display:block;margin:20px auto;" src="/2021/01/27/gwt-token/2.jpeg"></p>
<!-- ![1](2.jpeg) -->

<p>登陆之后，刷新浏览器登录状态丢失，持久化方案：</p>
<!-- ![3](3.jpeg) -->
<img width="600px" style="display:block;margin:20px auto;" src="/2021/01/27/gwt-token/3.jpeg">

<blockquote>
<p>权限逻辑流程：</p>
</blockquote>
 <img width="600px" style="display:block;margin:20px auto;" src="/2021/01/27/gwt-token/4.png">

<!-- ![4](4.jpeg) -->
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>单点登录</category>
        <category>GWT</category>
      </categories>
      <tags>
        <tag>GWT</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/11/28/hello-world/</url>
    <content><![CDATA[<p>2019-11-28</p>
<p>今天我集自动化部署于一身的博客终于问世了。</p>
<p>同步在 <a href="https://lemon1499.github.io/">github</a> 和 <a href="https://ylyu.coding.me/?_blank">coding</a>。</p>
<p>感谢老大庄哥——我踩坑路上的贵人，整个过程虽然入坑很多，但是它确实是一件有意思也很有成就感的事情。</p>
<p>感恩 感谢 希望以后能多思考多记录总结，不忘初心！</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo4.0搭建博客及自动部署</title>
    <url>/2019/12/04/hexo-blog-build/</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><blockquote>
<p>环境：GIT、 NODE<br>应用：Hexo4.0 + Github Pages + Github Actions 搭建博客并自动部署至 Github 和 Coding</p>
</blockquote>
<h5 id="搭建项目"><a href="#搭建项目" class="headerlink" title="搭建项目"></a>搭建项目</h5><p>一、 安装 hexo</p>
<p>1.创建一个文件夹 blog，cd blog 目录下。 2.执行 hexo 命令全局安装：**<em>npm i -g hexo</em>** 3.安装成功，查看版本 <strong><em>hexo -v</em></strong> 如下：</p>
<span id="more"></span>

<p><img src="/2019/12/04/hexo-blog-build/Image1.png" alt="image1"> 4.初始化项目 <strong><em>hexo init</em></strong> 生成如下文件：<br><img src="/2019/12/04/hexo-blog-build/Image2.png" alt="image2"></p>
<h5 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h5><ol>
<li>修改_config.yml 文件中的配置项如下：<br>（*注意：文中涉及到的 githubName 均为你的 github 名称）</li>
</ol>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  repo:</span> https:<span class="comment">//github.com/githubName/githubName.github.io.git</span></span><br><span class="line"><span class="symbol">  branch:</span> master</span><br></pre></td></tr></table></figure>

<p>然后依次执行如下命令：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo <span class="keyword">generate</span></span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>浏览器访问：<a href="http://localhost:4000/">http://localhost:4000</a></p>
<h5 id="托管代码到-github"><a href="#托管代码到-github" class="headerlink" title="托管代码到 github"></a>托管代码到 github</h5><ol>
<li>首先创建一个 repository，名称为 yourGithubName.github.io, 其中 yourGithubName 一定要是你的 github 名称。</li>
<li>生成 SSH 添加到 github。执行命令：<br>$ ssh-keygen -t rsa -b 4096 -C “<a href="mailto:&#x79;&#x6f;&#117;&#x72;&#x5f;&#x65;&#109;&#x61;&#105;&#108;&#64;&#101;&#x78;&#97;&#x6d;&#x70;&#108;&#101;&#46;&#99;&#111;&#109;">&#x79;&#x6f;&#117;&#x72;&#x5f;&#x65;&#109;&#x61;&#105;&#108;&#64;&#101;&#x78;&#97;&#x6d;&#x70;&#108;&#101;&#46;&#99;&#111;&#109;</a>“ 然后去本地 C/Users/you/.ssh/id_rsa 目录下找到 id_rsa.pub 文件并复制文件内容，去 github 的 settings/SSH and GPG keys 下 New SSH key 粘贴 Add SSH key 即可。</li>
<li>进入 blog 目录 clone 仓库。<br>执行 :</li>
</ol>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git <span class="builtin-name">add</span> .</span><br><span class="line">git commit -m <span class="string">&quot;hexo init&quot;</span></span><br><span class="line">git remote <span class="builtin-name">add</span> origin git@github.com:githubName/githubName.github.io.git</span><br><span class="line">git push -u origin gh-pages</span><br></pre></td></tr></table></figure>

<p>注：我是将项目源代码放到默认分支 gh-pages，后面使用 GitHub Actions 将 actions 里新建的.yml 文件 commit 至此分支（坑：如果将其 commit 到 master 分支部首次部署没问题，但是部署完成后就会被编译生成的文件覆盖掉，导致无法继续自动部署）；项目编译之后的文件必须放到 master 分支，这样才可以通过 githubName.github.io 直接访问博客首页。</p>
<p>执行命令：（用于部署项目）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>然后部署</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo <span class="keyword">generate</span></span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>浏览器访问：<a href="http://yourgithubname.github.io/">http://yourGithubName.github.io</a><br>注意: 如果 deploy 需要输入用户信息 配置一下即可，执行命令:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git config --<span class="built_in">global</span> user.name <span class="string">&quot;username&quot;</span></span><br><span class="line">git config --<span class="built_in">global</span> user.email <span class="string">&quot;your_email@xxx.com&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="使用-github-actions-实现自动部署"><a href="#使用-github-actions-实现自动部署" class="headerlink" title="使用 github actions 实现自动部署"></a>使用 github actions 实现自动部署</h5><p>Github Actions 是 github 的 <u><strong>持续集成</strong></u>（Continuous integration，简称 CI）服务。</p>
<p>脚本 demo：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">deployer</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">gh-pages</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build-and-deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@master</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Deploy</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">JamesIves/github-pages-deploy-action@master</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="attr">ACCESS_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">BASE_BRANCH:</span> <span class="string">gh-pages</span></span><br><span class="line">        <span class="attr">BRANCH:</span> <span class="string">master</span></span><br><span class="line">        <span class="attr">FOLDER:</span> <span class="string">public</span></span><br><span class="line">        <span class="attr">BUILD_SCRIPT:</span> <span class="string">npm</span> <span class="string">i</span> <span class="string">-g</span> <span class="string">hexo</span> <span class="string">&amp;&amp;</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">generate</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure>

<h5 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h5><blockquote>
<p>我的博客：<br><a href="https://lemon1499.github.io/">https://lemon1499.github.io</a> &gt;<a href="https://ylyu.coding.me/?_blank">https://ylyu.coding.me</a></p>
</blockquote>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html?_blank">http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html</a></p>
<p>本文有不到之处欢迎交流指正，感谢~</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客添加评论功能</title>
    <url>/2019/12/05/hexo-comment-func/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>最初使用的是来必力貌似是韩国的，搭好了发现加载慢，风格也不喜欢，然后就…<br>现在使用的是基于<a href="https://leancloud.cn/?_blank">LeanCloud</a> 的 <a href="https://valine.js.org/?_blank">Valine</a>评论系统，样式简约大方并且支持 Emoji，赞。</p>
</blockquote>
<h3 id="获取-APP-ID-和-APP-Key"><a href="#获取-APP-ID-和-APP-Key" class="headerlink" title="获取 APP ID 和 APP Key"></a>获取 APP ID 和 APP Key</h3><p>首先，先登录或注册  LeanCloud, 进入控制台后点击左上角创建应用：<br><img src="/2019/12/05/hexo-comment-func/3.jpg" alt="3"></p>
<span id="more"></span>

<p><img src="/2019/12/05/hexo-comment-func/1.jpg" alt="1"></p>
<p><img src="/2019/12/05/hexo-comment-func/2.jpg" alt="2"></p>
<p>这样我们就拿到了我们想要的 APP ID 和 APP Key，后面有用。</p>
<blockquote>
<p>然后设置一下安全域名：</p>
</blockquote>
<p><img src="/2019/12/05/hexo-comment-func/4.jpg" alt="4"></p>
<h3 id="在-Hexo-主题-hexo-theme-yilia-中使用"><a href="#在-Hexo-主题-hexo-theme-yilia-中使用" class="headerlink" title="在 Hexo 主题 hexo-theme-yilia 中使用"></a>在 Hexo 主题 hexo-theme-yilia 中使用</h3><blockquote>
<p>目前，已有部分 Hexo 主题内置了 Valine 评论系统，但是本博客所用主题 hexo-theme-yilia 还没有被覆盖，下面就来详细介绍一下如何使用。</p>
</blockquote>
<h5 id="修改-Yilia-主题内代码断"><a href="#修改-Yilia-主题内代码断" class="headerlink" title="修改 Yilia 主题内代码断"></a>修改 Yilia 主题内代码断</h5><blockquote>
<p>yilia/_config.yml 中添加如下配置：</p>
</blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#6、Valine https://valine.js.orgvaline:</span></span><br><span class="line"><span class="attr">appid:</span> <span class="comment">#Leancloud应用的appId</span></span><br><span class="line"><span class="attr">appkey:</span> <span class="comment">#Leancloud应用的appKey</span></span><br><span class="line"><span class="attr">verify:</span> <span class="literal">false</span> <span class="comment">#验证码</span></span><br><span class="line"><span class="attr">notify:</span> <span class="literal">false</span> <span class="comment">#评论回复提醒</span></span><br><span class="line"><span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment">#评论列表头像样式：&#x27;&#x27;/mm/identicon/monsterid/wavatar/retro/hide</span></span><br><span class="line"><span class="attr">placeholder:</span> <span class="string">Just</span> <span class="string">go</span> <span class="string">go</span> <span class="comment">#评论框占位符</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>layout/_partial/article.ejs<br>在&lt;% if (!index &amp;&amp; post.comments){ %&gt;下面一行添加：</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;% if (theme.valine &amp;&amp; theme.valine.appid &amp;&amp; theme.valine.appkey)&#123; %&gt;     </span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;comments&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin:10px;background:#fff;&quot;</span>&gt;</span></span><br><span class="line">      &lt;%- partial(&#x27;post/valine&#x27;, &#123;         key: post.slug,         title: post.title,</span><br><span class="line">          url: config.url+url_for(post.path)     &#125;) %&gt;   </span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>新建文件 layout/_partial/post/valine.ejs</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;vcomment&quot;</span> <span class="attr">class</span>=<span class="string">&quot;comment&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn1.lncld.net/static/js/3.0.4/av-min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//unpkg.com/valine/dist/Valine.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> notify = <span class="string">&#x27;&lt;%= theme.valine.notify %&gt;&#x27;</span> == <span class="literal">true</span> ? <span class="literal">true</span> : <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> verify = <span class="string">&#x27;&lt;%= theme.valine.verify %&gt;&#x27;</span> == <span class="literal">true</span> ? <span class="literal">true</span> : <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Valine(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">el</span>: <span class="string">&#x27;#vcomment&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">notify</span>: notify,</span></span><br><span class="line"><span class="javascript">      <span class="attr">verify</span>: verify,</span></span><br><span class="line"><span class="javascript">      <span class="attr">app_id</span>: <span class="string">&#x27;&lt;%= theme.valine.appid %&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">app_key</span>: <span class="string">&#x27;&lt;%= theme.valine.appkey %&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">placeholder</span>: <span class="string">&#x27;&lt;%= theme.valine.placeholder %&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">avatar</span>: <span class="string">&#x27;&lt;%= theme.valine.avatar %&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Over 然后就可以去见证奇迹了。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>参考：<a href="https://valine.js.org/?_blank">https://valine.js.org</a></p>
<p>本文有不到之处欢迎交流指正，感谢~</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo更换主题出现空白index.html</title>
    <url>/2021/09/26/hexo-upgrade/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>搭建博客很久了，之前用的<code>yilia</code>主题很喜欢，最近又”移情别恋”上了 <code>ayer</code> 这种简单有点技术控的风格主题，又开始折腾一番。下面记录一下我的折腾轨迹…</p>
<p>版本：<br><code>hexo: 4.2.1</code><br><code>hexo-cli: 3.1.0</code><br><code>node: 12.13.0</code></p>
<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>更换主题</p>
<span id="more"></span>

<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>开始安装新主题并使用</p>
<h6 id="1-安装主题"><a href="#1-安装主题" class="headerlink" title="1.安装主题"></a>1.安装主题</h6><p>hexo-theme-ayer 主题对 hexo 版本&gt;=5.0 和&lt;5.0 有两种不同的安装方法，因为我的 hexo&lt;5.0 采用&lt;5.0 的安装方法：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> hexo &lt; <span class="number">5.0</span></span><br><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/Shen-Yu/</span>hexo-theme-ayer.git themes/ayer</span><br></pre></td></tr></table></figure>

<p>安装成功会在项目的 <code>themes</code> 目录下多一个 <code>ayer</code> 目录，<code>ayer</code> 根目录有一个<code>_config.yml</code> 主题配置文件</p>
<h6 id="2-修改"><a href="#2-修改" class="headerlink" title="2.修改"></a>2.修改</h6><p>将博客根目录下的 <code>_config.yml</code> 里的<code> theme</code> 值修改成 <code>ayer</code></p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">theme:</span> ayer</span><br></pre></td></tr></table></figure>

<p>然后根据自己的需要修改主题的配置文件 <code>themes/ayer/_config.yml</code><br>最后，重新<code>hexo g</code>构建。</p>
<h2 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h2><p>问题出现了，发现构建的 public 目录下的 index.html 文件都是空的，访问博客显示空白。</p>
<h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>在网上查了一下，有相似问题的说是缺少依赖，先<code>npm ls --depth 0</code>查看 npm 插件缺失情况，一般情况下出现<code>npm ERROR！missing xxx</code><br>说明 xxx 插件缺失，然后依次将所有缺失的插件安装上。<br>执行了以上操作之后依然不行，解决不了我的问题。</p>
<p>最后决定一不做二不休，干脆直接升级 <code>hexo</code> 到 5.x.x 版本。<br>执行以下指令进行版本升级：</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> install -g <span class="built_in">npm</span>-check <span class="comment"># 检查之前安装的插件，都有哪些是可以升级的</span></span><br><span class="line"><span class="built_in">npm</span> install -g <span class="built_in">npm</span>-upgrade <span class="comment"># 升级系统中的插件</span></span><br><span class="line"><span class="built_in">npm</span>-check</span><br><span class="line"><span class="built_in">npm</span>-upgrade  <span class="comment">#更新</span></span><br><span class="line"><span class="comment"># 更新 hexo 及所有插件</span></span><br><span class="line"><span class="built_in">npm</span> update</span><br><span class="line"><span class="comment"># 查看版本 确认 hexo 已经更新</span></span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure>

<p>升级之后版本：<br><code>hexo: 5.4.1</code><br><code>hexo-cli: 3.1.0</code><br><code>node: 12.13.0</code></p>
<p>删除之前步骤 1 安装的（ hexo 版本&lt;5.0 ） <code>ayer</code> 主题（/themes/ayer）,然后使用 hexo&gt;5.0 的安装方法重新安装：</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> i hexo-theme-ayer -S</span><br></pre></td></tr></table></figure>

<p>安装完成后会在根目录生成一个<code>_config.ayer.yml</code> 文件，直接编辑<code>_config.ayer.yml</code> 文件进行配置即可。<br>最后，重新<code>hexo g</code>构建，构建成功，index.html 文件内容正常，发布之后博客正常显示，问题解决。</p>
<p>参考：<a href="https://shen-yu.gitee.io/2019/ayer/#%E5%AE%89%E8%A3%85">Ayer 中文说明</a></p>
<p>错误之处欢迎交流指正，感谢~</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>Hexo版本升级</tag>
      </tags>
  </entry>
  <entry>
    <title>ie浏览器踩坑系列</title>
    <url>/2020/06/09/ie-bug/</url>
    <content><![CDATA[<h6 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新…"></a>持续更新…</h6><p>1.使用 antv ，当有两种渲染方式：canvas 和 svg，最好选择 canvas 方式，因为 svg 在 IE 浏览器下有很多 bug。</p>
<span id="more"></span>

<blockquote>
<p>本文有不到之处欢迎交流指正~</p>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>IE</category>
      </categories>
      <tags>
        <tag>ie</tag>
      </tags>
  </entry>
  <entry>
    <title>js处理图片流并显示在页面上</title>
    <url>/2019/12/04/image-flow/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>Ajax 请求图片资源，服务器以文件流的形式返回，前端 js 处理图片流并将图片显示到页面上。</p>
</blockquote>
<h3 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h3><p>首先，使用 axios 发送 Ajax 请求时，将 responseType（响应数据的类型）设置为“blob”（response  是一个包含二进制数据的  Blob  对象  ）。然后，对服务器返回的结果进行处理：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&lt;img <span class="keyword">class</span>=&quot;<span class="symbol">verifyPic</span>&quot; :<span class="symbol">src</span>=&quot;<span class="symbol">verifyImg</span>&quot; /&gt;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// API获取数据</span></span><br><span class="line"><span class="function"><span class="title">getImgVcode</span><span class="params">()</span></span> &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        axios<span class="selector-class">.post</span>(<span class="string">&#x27;/api/getImgVcode&#x27;</span>，&#123;</span><br><span class="line">            responseType: <span class="string">&#x27;blob&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="selector-class">.then</span>(res)&#123;</span><br><span class="line">            <span class="comment">// 使用fileReader对文件对象进行操作 </span></span><br><span class="line">            const reader = new FileReader()</span><br><span class="line">            <span class="comment">// 读到的是URL格式的Base64字符串</span></span><br><span class="line">            reader<span class="selector-class">.readAsDataURL</span>(res)</span><br><span class="line">            reader<span class="selector-class">.onload</span> = (result) =&gt; &#123;</span><br><span class="line">              this<span class="selector-class">.verifyImg</span> = result<span class="selector-class">.target</span><span class="selector-class">.result</span> <span class="comment">// 更新图片的src</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.catch</span>(error)&#123;</span><br><span class="line">            console<span class="selector-class">.log</span>(error)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果示例图"><a href="#结果示例图" class="headerlink" title="结果示例图"></a>结果示例图</h3><p><img src="/2019/12/04/image-flow/num-img.png" alt="num-img"></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>参考： <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader">https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader</a></p>
<p>本文有不到之处欢迎交流指正，感谢~</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>js</category>
        <category>文件流</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>文件流</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML、CSS面试题</title>
    <url>/2021/10/17/interview-question-htmlcss/</url>
    <content><![CDATA[<h5 id="1-盒模型的两种标准？如何相互转化"><a href="#1-盒模型的两种标准？如何相互转化" class="headerlink" title="1. 盒模型的两种标准？如何相互转化"></a>1. 盒模型的两种标准？如何相互转化</h5><h5 id="2-BFC"><a href="#2-BFC" class="headerlink" title="2. BFC"></a>2. BFC</h5><h5 id="3-伪类的伪元素用法与区别"><a href="#3-伪类的伪元素用法与区别" class="headerlink" title="3. 伪类的伪元素用法与区别"></a>3. 伪类的伪元素用法与区别</h5><h5 id="4-div宽度为100vw-设置宽高固定比为10-1-怎么设置"><a href="#4-div宽度为100vw-设置宽高固定比为10-1-怎么设置" class="headerlink" title="4. div宽度为100vw,设置宽高固定比为10:1,怎么设置"></a>4. div宽度为100vw,设置宽高固定比为10:1,怎么设置</h5><h5 id="5-Flex-1完整写法，分别代表什么意思"><a href="#5-Flex-1完整写法，分别代表什么意思" class="headerlink" title="5. Flex:1完整写法，分别代表什么意思"></a>5. Flex:1完整写法，分别代表什么意思</h5><h5 id="6-flex的实现原理"><a href="#6-flex的实现原理" class="headerlink" title="6. flex的实现原理"></a>6. flex的实现原理</h5><h5 id="7-flex垂直居中兼容ie"><a href="#7-flex垂直居中兼容ie" class="headerlink" title="7. flex垂直居中兼容ie"></a>7. flex垂直居中兼容ie</h5><h5 id="8-rem的使用原理"><a href="#8-rem的使用原理" class="headerlink" title="8. rem的使用原理"></a>8. rem的使用原理</h5><h5 id="9-移动端300毫秒延迟，怎么解决的"><a href="#9-移动端300毫秒延迟，怎么解决的" class="headerlink" title="9. 移动端300毫秒延迟，怎么解决的"></a>9. 移动端300毫秒延迟，怎么解决的</h5><h5 id="10-回流和重汇"><a href="#10-回流和重汇" class="headerlink" title="10. 回流和重汇"></a>10. 回流和重汇</h5><span id="more"></span>
<h5 id="11-浏览器最小字体，如何实现10px字体"><a href="#11-浏览器最小字体，如何实现10px字体" class="headerlink" title="11. 浏览器最小字体，如何实现10px字体"></a>11. 浏览器最小字体，如何实现10px字体</h5><h5 id="12-解决移动端1px边框过粗的问题"><a href="#12-解决移动端1px边框过粗的问题" class="headerlink" title="12. 解决移动端1px边框过粗的问题"></a>12. 解决移动端1px边框过粗的问题</h5><h5 id="13-渐进增强和优雅降级"><a href="#13-渐进增强和优雅降级" class="headerlink" title="13. 渐进增强和优雅降级"></a>13. 渐进增强和优雅降级</h5><h5 id="14-sass和less的用法和区别"><a href="#14-sass和less的用法和区别" class="headerlink" title="14. sass和less的用法和区别"></a>14. sass和less的用法和区别</h5><h5 id="15-类选择器-a-b-a-b-a-gt-b分别是什么意思"><a href="#15-类选择器-a-b-a-b-a-gt-b分别是什么意思" class="headerlink" title="15. 类选择器.a  .b  .a.b   .a&gt;.b分别是什么意思"></a>15. 类选择器.a  .b  .a.b   .a&gt;.b分别是什么意思</h5><h5 id="16-选择器类型和权重"><a href="#16-选择器类型和权重" class="headerlink" title="16. 选择器类型和权重"></a>16. 选择器类型和权重</h5><h5 id="17-p标签里面可以放div吗？为什么？"><a href="#17-p标签里面可以放div吗？为什么？" class="headerlink" title="17. p标签里面可以放div吗？为什么？"></a>17. p标签里面可以放div吗？为什么？</h5><h5 id="18-移动端button不同手机没有垂直居中怎么解决"><a href="#18-移动端button不同手机没有垂直居中怎么解决" class="headerlink" title="18. 移动端button不同手机没有垂直居中怎么解决"></a>18. 移动端button不同手机没有垂直居中怎么解决</h5><h5 id="19-解释png、jpg、gif图片的格式，分别什么时候用？有没有了解过webp"><a href="#19-解释png、jpg、gif图片的格式，分别什么时候用？有没有了解过webp" class="headerlink" title="19. 解释png、jpg、gif图片的格式，分别什么时候用？有没有了解过webp"></a>19. 解释png、jpg、gif图片的格式，分别什么时候用？有没有了解过webp</h5><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>面试题</tag>
        <tag>HTML、CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>综合面试题</title>
    <url>/2021/09/11/interview-question-http/</url>
    <content><![CDATA[<h4 id="一、计算机网络"><a href="#一、计算机网络" class="headerlink" title="一、计算机网络"></a>一、计算机网络</h4><h5 id="1-浏览器的缓存机制"><a href="#1-浏览器的缓存机制" class="headerlink" title="1. 浏览器的缓存机制"></a>1. 浏览器的缓存机制</h5><h5 id="2-babel与ployfill的关系和区别"><a href="#2-babel与ployfill的关系和区别" class="headerlink" title="2. babel与ployfill的关系和区别"></a>2. babel与ployfill的关系和区别</h5><h5 id="3-解决跨域的方法"><a href="#3-解决跨域的方法" class="headerlink" title="3. 解决跨域的方法"></a>3. 解决跨域的方法</h5><h5 id="4-http状态码"><a href="#4-http状态码" class="headerlink" title="4. http状态码"></a>4. http状态码</h5><h5 id="5-git-stash"><a href="#5-git-stash" class="headerlink" title="5. git stash"></a>5. git stash</h5><h5 id="6-localstorage跨域可以共享吗，如何解决"><a href="#6-localstorage跨域可以共享吗，如何解决" class="headerlink" title="6. localstorage跨域可以共享吗，如何解决"></a>6. localstorage跨域可以共享吗，如何解决</h5><h5 id="7-描述url到页面渲染的整个过程"><a href="#7-描述url到页面渲染的整个过程" class="headerlink" title="7. 描述url到页面渲染的整个过程"></a>7. 描述url到页面渲染的整个过程</h5><h5 id="8-https页面引入http资源的解决方式-如何让网站同时兼容http和https"><a href="#8-https页面引入http资源的解决方式-如何让网站同时兼容http和https" class="headerlink" title="8. https页面引入http资源的解决方式/如何让网站同时兼容http和https"></a>8. https页面引入http资源的解决方式/如何让网站同时兼容http和https</h5><h5 id="9-cookie、session、sessionStorage和localStorage的-区别"><a href="#9-cookie、session、sessionStorage和localStorage的-区别" class="headerlink" title="9. cookie、session、sessionStorage和localStorage的 区别"></a>9. cookie、session、sessionStorage和localStorage的 区别</h5><h5 id="10-http-和-https-的区别"><a href="#10-http-和-https-的区别" class="headerlink" title="10. http 和 https 的区别"></a>10. http 和 https 的区别</h5><span id="more"></span>
<h5 id="11-GET-和-POST-的区别"><a href="#11-GET-和-POST-的区别" class="headerlink" title="11. GET 和 POST 的区别"></a>11. GET 和 POST 的区别</h5><h5 id="12-DNS（Domain-Name-System）域名解析-的原理"><a href="#12-DNS（Domain-Name-System）域名解析-的原理" class="headerlink" title="12. DNS（Domain Name System）域名解析 的原理"></a>12. DNS（Domain Name System）域名解析 的原理</h5><h5 id="13-三次握手和四次挥手"><a href="#13-三次握手和四次挥手" class="headerlink" title="13. 三次握手和四次挥手"></a>13. 三次握手和四次挥手</h5><h5 id="14-http2-0有什么改进"><a href="#14-http2-0有什么改进" class="headerlink" title="14. http2.0有什么改进"></a>14. http2.0有什么改进</h5><h5 id="15-Web-Storage-sessionStorage、localStorage-带来的好处"><a href="#15-Web-Storage-sessionStorage、localStorage-带来的好处" class="headerlink" title="15. Web Storage(sessionStorage、localStorage)带来的好处"></a>15. Web Storage(sessionStorage、localStorage)带来的好处</h5><h5 id="16-如何让前端禁用cookie"><a href="#16-如何让前端禁用cookie" class="headerlink" title="16. 如何让前端禁用cookie"></a>16. 如何让前端禁用cookie</h5><h5 id="17-script标签为什么放后面？引出defer和async区别？"><a href="#17-script标签为什么放后面？引出defer和async区别？" class="headerlink" title="17. script标签为什么放后面？引出defer和async区别？"></a>17. script标签为什么放后面？引出defer和async区别？</h5><h5 id="18-304状态码是怎么样，怎么产生的"><a href="#18-304状态码是怎么样，怎么产生的" class="headerlink" title="18. 304状态码是怎么样，怎么产生的"></a>18. 304状态码是怎么样，怎么产生的</h5><h4 id="二、webpack"><a href="#二、webpack" class="headerlink" title="二、webpack"></a>二、webpack</h4><h5 id="1-publicpath和contentBase的区别"><a href="#1-publicpath和contentBase的区别" class="headerlink" title="1. publicpath和contentBase的区别"></a>1. publicpath和contentBase的区别</h5><h5 id="2-怎么配置css的局部作用域"><a href="#2-怎么配置css的局部作用域" class="headerlink" title="2. 怎么配置css的局部作用域"></a>2. 怎么配置css的局部作用域</h5><h5 id="3-拆包的配置项是什么，chunks分别代表什么"><a href="#3-拆包的配置项是什么，chunks分别代表什么" class="headerlink" title="3. 拆包的配置项是什么，chunks分别代表什么"></a>3. 拆包的配置项是什么，chunks分别代表什么</h5><h5 id="4-webpack的分包机制、代码分割"><a href="#4-webpack的分包机制、代码分割" class="headerlink" title="4. webpack的分包机制、代码分割"></a>4. webpack的分包机制、代码分割</h5><h5 id="5-webpack的loder是怎么解析不同类型的资源的"><a href="#5-webpack的loder是怎么解析不同类型的资源的" class="headerlink" title="5. webpack的loder是怎么解析不同类型的资源的"></a>5. webpack的loder是怎么解析不同类型的资源的</h5><h5 id="6-webpack的devSever"><a href="#6-webpack的devSever" class="headerlink" title="6. webpack的devSever"></a>6. webpack的devSever</h5><h5 id="7-webpack打包速度做过什么优化"><a href="#7-webpack打包速度做过什么优化" class="headerlink" title="7. webpack打包速度做过什么优化"></a>7. webpack打包速度做过什么优化</h5><h5 id="8-如何解决编译慢的问题"><a href="#8-如何解决编译慢的问题" class="headerlink" title="8. 如何解决编译慢的问题"></a>8. 如何解决编译慢的问题</h5><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>面试题</tag>
        <tag>计算机网络</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>JS系列面试题</title>
    <url>/2021/10/17/interview-question-js/</url>
    <content><![CDATA[<h5 id="1-数据类型有哪些"><a href="#1-数据类型有哪些" class="headerlink" title="1. 数据类型有哪些"></a>1. 数据类型有哪些</h5><h5 id="2-For-of-和-for-in-的区别"><a href="#2-For-of-和-for-in-的区别" class="headerlink" title="2. For of 和 for in 的区别"></a>2. For of 和 for in 的区别</h5><h5 id="3-Map和-object-的区别有哪些，weakMap了解么，和Map区别是什么"><a href="#3-Map和-object-的区别有哪些，weakMap了解么，和Map区别是什么" class="headerlink" title="3. Map和 object 的区别有哪些，weakMap了解么，和Map区别是什么"></a>3. Map和 object 的区别有哪些，weakMap了解么，和Map区别是什么</h5><h5 id="4-为什么要进行垃圾回收，垃圾回收的原理"><a href="#4-为什么要进行垃圾回收，垃圾回收的原理" class="headerlink" title="4. 为什么要进行垃圾回收，垃圾回收的原理"></a>4. 为什么要进行垃圾回收，垃圾回收的原理</h5><h5 id="5-0-1-0-2等于0-3么，为什么不等，有什么好的处理办法么，10转成二进制怎么表示"><a href="#5-0-1-0-2等于0-3么，为什么不等，有什么好的处理办法么，10转成二进制怎么表示" class="headerlink" title="5. 0.1+0.2等于0.3么，为什么不等，有什么好的处理办法么，10转成二进制怎么表示"></a>5. 0.1+0.2等于0.3么，为什么不等，有什么好的处理办法么，10转成二进制怎么表示</h5><h5 id="6-继承有哪些方式，最有效是哪种，如何实现的"><a href="#6-继承有哪些方式，最有效是哪种，如何实现的" class="headerlink" title="6. 继承有哪些方式，最有效是哪种，如何实现的"></a>6. 继承有哪些方式，最有效是哪种，如何实现的</h5><h5 id="7-Var和let的区别有哪些-浏览器环境下-全局作用域的let和var-声明变量会挂载到-window上么-const的值可以修改么，为什么"><a href="#7-Var和let的区别有哪些-浏览器环境下-全局作用域的let和var-声明变量会挂载到-window上么-const的值可以修改么，为什么" class="headerlink" title="7. Var和let的区别有哪些, 浏览器环境下,全局作用域的let和var 声明变量会挂载到 window上么 ,const的值可以修改么，为什么"></a>7. Var和let的区别有哪些, 浏览器环境下,全局作用域的let和var 声明变量会挂载到 window上么 ,const的值可以修改么，为什么</h5><h5 id="8-Object-defineProperty的作用是什么，和proxy的区别"><a href="#8-Object-defineProperty的作用是什么，和proxy的区别" class="headerlink" title="8. Object.defineProperty的作用是什么，和proxy的区别"></a>8. Object.defineProperty的作用是什么，和proxy的区别</h5><h5 id="9-reduce用法"><a href="#9-reduce用法" class="headerlink" title="9. reduce用法"></a>9. reduce用法</h5><h5 id="10-防抖和节流使用场景"><a href="#10-防抖和节流使用场景" class="headerlink" title="10. 防抖和节流使用场景"></a>10. 防抖和节流使用场景</h5><span id="more"></span>
<h5 id="11-深拷贝"><a href="#11-深拷贝" class="headerlink" title="11. 深拷贝"></a>11. 深拷贝</h5><h5 id="12-javaScript-的事件循环（event-loop）"><a href="#12-javaScript-的事件循环（event-loop）" class="headerlink" title="12. javaScript 的事件循环（event loop）"></a>12. javaScript 的事件循环（event loop）</h5><h5 id="13-渲染几万条数据如何优化不卡住页面"><a href="#13-渲染几万条数据如何优化不卡住页面" class="headerlink" title="13. 渲染几万条数据如何优化不卡住页面"></a>13. 渲染几万条数据如何优化不卡住页面</h5><h5 id="14-普通函数和箭头函数的区别"><a href="#14-普通函数和箭头函数的区别" class="headerlink" title="14. 普通函数和箭头函数的区别"></a>14. 普通函数和箭头函数的区别</h5><h5 id="15-原型链"><a href="#15-原型链" class="headerlink" title="15. 原型链"></a>15. 原型链</h5><h5 id="16-js事件模型"><a href="#16-js事件模型" class="headerlink" title="16. js事件模型"></a>16. js事件模型</h5><h5 id="17-函数式编程理解"><a href="#17-函数式编程理解" class="headerlink" title="17. 函数式编程理解"></a>17. 函数式编程理解</h5><h5 id="18-闭包导致的内存泄漏怎么解决"><a href="#18-闭包导致的内存泄漏怎么解决" class="headerlink" title="18. 闭包导致的内存泄漏怎么解决"></a>18. 闭包导致的内存泄漏怎么解决</h5><h5 id="19-JSONP的原理"><a href="#19-JSONP的原理" class="headerlink" title="19. JSONP的原理"></a>19. JSONP的原理</h5><h5 id="20-promise为什么可以链式调用"><a href="#20-promise为什么可以链式调用" class="headerlink" title="20. promise为什么可以链式调用"></a>20. promise为什么可以链式调用</h5><h5 id="21-promise中resolve之后再reject，最终是什么状态"><a href="#21-promise中resolve之后再reject，最终是什么状态" class="headerlink" title="21. promise中resolve之后再reject，最终是什么状态"></a>21. promise中resolve之后再reject，最终是什么状态</h5><h5 id="22-跨域有什么解决方法？json-stringfy有什么类型不能用"><a href="#22-跨域有什么解决方法？json-stringfy有什么类型不能用" class="headerlink" title="22. 跨域有什么解决方法？json.stringfy有什么类型不能用"></a>22. 跨域有什么解决方法？json.stringfy有什么类型不能用</h5><h5 id="23-（es6）class继承"><a href="#23-（es6）class继承" class="headerlink" title="23. （es6）class继承"></a>23. （es6）class继承</h5><h5 id="24-（ts）什么是范型"><a href="#24-（ts）什么是范型" class="headerlink" title="24. （ts）什么是范型"></a>24. （ts）什么是范型</h5><h5 id="25-对柯里化函数的理解"><a href="#25-对柯里化函数的理解" class="headerlink" title="25. 对柯里化函数的理解"></a>25. 对柯里化函数的理解</h5><h5 id="26-面向对象特性"><a href="#26-面向对象特性" class="headerlink" title="26. 面向对象特性"></a>26. 面向对象特性</h5><h5 id="27-如何实现一个new"><a href="#27-如何实现一个new" class="headerlink" title="27. 如何实现一个new"></a>27. 如何实现一个new</h5><h5 id="28-new-这个关键字干了什么"><a href="#28-new-这个关键字干了什么" class="headerlink" title="28. new 这个关键字干了什么"></a>28. new 这个关键字干了什么</h5><h5 id="29-call-apply-bind-的区别"><a href="#29-call-apply-bind-的区别" class="headerlink" title="29. call, apply, bind 的区别"></a>29. call, apply, bind 的区别</h5><h5 id="30-强缓存，协商缓存"><a href="#30-强缓存，协商缓存" class="headerlink" title="30. 强缓存，协商缓存"></a>30. 强缓存，协商缓存</h5><h5 id="31-阻止冒泡，阻止事件捕获"><a href="#31-阻止冒泡，阻止事件捕获" class="headerlink" title="31. 阻止冒泡，阻止事件捕获"></a>31. 阻止冒泡，阻止事件捕获</h5><h5 id="32-高阶函数HOF"><a href="#32-高阶函数HOF" class="headerlink" title="32. 高阶函数HOF"></a>32. 高阶函数HOF</h5><h5 id="33-ES6新特性用过哪些"><a href="#33-ES6新特性用过哪些" class="headerlink" title="33. ES6新特性用过哪些"></a>33. ES6新特性用过哪些</h5><h5 id="34-如何判断是否是对象和数组"><a href="#34-如何判断是否是对象和数组" class="headerlink" title="34. 如何判断是否是对象和数组"></a>34. 如何判断是否是对象和数组</h5><h5 id="35-怎样同步调用接口"><a href="#35-怎样同步调用接口" class="headerlink" title="35. 怎样同步调用接口"></a>35. 怎样同步调用接口</h5><h5 id="36-新api：-pushState、bom"><a href="#36-新api：-pushState、bom" class="headerlink" title="36. 新api： pushState、bom"></a>36. 新api： pushState、bom</h5><h5 id="37-websocket与轮询区别"><a href="#37-websocket与轮询区别" class="headerlink" title="37. websocket与轮询区别"></a>37. websocket与轮询区别</h5><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>面试题</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>VUE系列面试题</title>
    <url>/2021/10/17/interview-question-vue/</url>
    <content><![CDATA[<h5 id="1-vue双向绑定的原理"><a href="#1-vue双向绑定的原理" class="headerlink" title="1. vue双向绑定的原理"></a>1. vue双向绑定的原理</h5><h5 id="2-vue通信方式"><a href="#2-vue通信方式" class="headerlink" title="2. vue通信方式"></a>2. vue通信方式</h5><h5 id="3-组件中的data用箭头函数行不行"><a href="#3-组件中的data用箭头函数行不行" class="headerlink" title="3. 组件中的data用箭头函数行不行"></a>3. 组件中的data用箭头函数行不行</h5><h5 id="4-vue生命周期"><a href="#4-vue生命周期" class="headerlink" title="4. vue生命周期"></a>4. vue生命周期</h5><h5 id="5-vue的keep-alive"><a href="#5-vue的keep-alive" class="headerlink" title="5. vue的keep-alive"></a>5. vue的keep-alive</h5><h5 id="6-vue与react有什么相同点-不同点"><a href="#6-vue与react有什么相同点-不同点" class="headerlink" title="6. vue与react有什么相同点/不同点"></a>6. vue与react有什么相同点/不同点</h5><h5 id="7-vue的-listeners"><a href="#7-vue的-listeners" class="headerlink" title="7. vue的 $listeners"></a>7. vue的 $listeners</h5><h5 id="8-vue修饰符-sync"><a href="#8-vue修饰符-sync" class="headerlink" title="8. vue修饰符.sync"></a>8. vue修饰符.sync</h5><h5 id="9-vue的渲染是异步还是同步，为什么"><a href="#9-vue的渲染是异步还是同步，为什么" class="headerlink" title="9. vue的渲染是异步还是同步，为什么"></a>9. vue的渲染是异步还是同步，为什么</h5><h5 id="10-vue的nextTick的用法及场景"><a href="#10-vue的nextTick的用法及场景" class="headerlink" title="10. vue的nextTick的用法及场景"></a>10. vue的nextTick的用法及场景</h5><span id="more"></span>
<h5 id="11-vue有render吗"><a href="#11-vue有render吗" class="headerlink" title="11. vue有render吗"></a>11. vue有render吗</h5><h5 id="12-v-model做了什么"><a href="#12-v-model做了什么" class="headerlink" title="12. v-model做了什么"></a>12. v-model做了什么</h5><h5 id="13-首页速度加载怎么优化"><a href="#13-首页速度加载怎么优化" class="headerlink" title="13. 首页速度加载怎么优化"></a>13. 首页速度加载怎么优化</h5><h5 id="14-object-defineProperty的弊端怎么解决"><a href="#14-object-defineProperty的弊端怎么解决" class="headerlink" title="14. object.defineProperty的弊端怎么解决"></a>14. object.defineProperty的弊端怎么解决</h5><h5 id="15-vue父子组件的生命周期执行顺序"><a href="#15-vue父子组件的生命周期执行顺序" class="headerlink" title="15. vue父子组件的生命周期执行顺序"></a>15. vue父子组件的生命周期执行顺序</h5><h5 id="16-虚拟DOM"><a href="#16-虚拟DOM" class="headerlink" title="16. 虚拟DOM"></a>16. 虚拟DOM</h5><h5 id="17-vue的设计模式"><a href="#17-vue的设计模式" class="headerlink" title="17. vue的设计模式"></a>17. vue的设计模式</h5><h5 id="18-slot-插槽"><a href="#18-slot-插槽" class="headerlink" title="18. slot 插槽"></a>18. slot 插槽</h5><h5 id="19-指令的封装"><a href="#19-指令的封装" class="headerlink" title="19. 指令的封装"></a>19. 指令的封装</h5><h5 id="20-过滤器的封装"><a href="#20-过滤器的封装" class="headerlink" title="20. 过滤器的封装"></a>20. 过滤器的封装</h5><h5 id="21-diff算法的理解"><a href="#21-diff算法的理解" class="headerlink" title="21. diff算法的理解"></a>21. diff算法的理解</h5><h5 id="22-为什么key不能用下标"><a href="#22-为什么key不能用下标" class="headerlink" title="22. 为什么key不能用下标"></a>22. 为什么key不能用下标</h5><h5 id="23-wacth与computed的区别"><a href="#23-wacth与computed的区别" class="headerlink" title="23. wacth与computed的区别"></a>23. wacth与computed的区别</h5><h5 id="24-实现一个v-model"><a href="#24-实现一个v-model" class="headerlink" title="24. 实现一个v-model"></a>24. 实现一个v-model</h5><h5 id="25-MVVM的理解"><a href="#25-MVVM的理解" class="headerlink" title="25. MVVM的理解"></a>25. MVVM的理解</h5><h5 id="26-全局组件如何引入"><a href="#26-全局组件如何引入" class="headerlink" title="26. 全局组件如何引入"></a>26. 全局组件如何引入</h5><h5 id="27-vuex的使用？引出mutation和action区别？"><a href="#27-vuex的使用？引出mutation和action区别？" class="headerlink" title="27. vuex的使用？引出mutation和action区别？"></a>27. vuex的使用？引出mutation和action区别？</h5><h5 id="28-Vuex整个触发过程（actions，state，view）"><a href="#28-Vuex整个触发过程（actions，state，view）" class="headerlink" title="28. Vuex整个触发过程（actions，state，view）"></a>28. Vuex整个触发过程（actions，state，view）</h5><h5 id="29-vue-router中两种模式的区别？解释原理"><a href="#29-vue-router中两种模式的区别？解释原理" class="headerlink" title="29. vue router中两种模式的区别？解释原理"></a>29. vue router中两种模式的区别？解释原理</h5><h5 id="30-new-Router分别时hush和history时base有什么区别"><a href="#30-new-Router分别时hush和history时base有什么区别" class="headerlink" title="30. new Router分别时hush和history时base有什么区别"></a>30. new Router分别时hush和history时base有什么区别</h5><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>面试题</tag>
        <tag>VUE</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx入门</title>
    <url>/2021/01/22/nginx/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>nginx 是 web 服务器，由 C 语言开发，基于事件驱动能处理百万级别的 tcp 连接，高度模块化的设计和自由的许可证使得扩展其功能的模块层出不穷，跨平台，可使用当前操作系统特有的一些高效 API 来提高自己的性能，nginx 以性能为王。选择 nginx 的核心理由是处理高并发请求的同时保持高效的服务。<br>Nginx 特点：<br>适合前后端分离开发、保证安全、nginx 非常快、负载均衡</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>环境：MAC OS 系统<br><code>brew install nginx</code></p>
<p>查看版本号：<br><code>nginx -V</code></p>
<p>启动：<br><code>nginx</code></p>
<span id="more"></span>

<p>关闭：<br><code>nginx -s stop</code></p>
<p>查看 nginx 相关文件：<br><code>cd /usr/local/etc/nginx</code><br><code>ls</code></p>
<p>打开 nginx 配置文件：<br><code>code nginx.conf</code><br>局部如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       8080;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        #charset koi8-r;</span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>进入 nginx 静态资源文件的默认路径：<br><code>cd /usr/local/var/www</code></p>
<p><code>ls</code><br>查看默认静态资源 html 文件<br><code>cat index.html</code></p>
<h4 id="使用-nginx-部署静态文件"><a href="#使用-nginx-部署静态文件" class="headerlink" title="使用 nginx 部署静态文件"></a>使用 nginx 部署静态文件</h4><p>进入本地项目目录下：<br><code>cd xxx/yourProjectName</code><br><code>ls</code><br><code>cd dist</code><br><code>ls</code></p>
<p>把打包生成的代码 copy 到/usr/local/var/www 目录<br><code>cp -r * /usr/local/var/www</code></p>
<p>然后，访问<br>localhost:8080</p>
<p>流程：<br>用户-&gt;xxx.com-&gt;Nginx-&gt;静态文件</p>
<p>重新启动 nginx：</p>
<p><code>nginx -s reload</code></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>react-hook入门手册</title>
    <url>/2020/06/28/react-hook/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>React Hooks 是 React 16.12 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。</p>
<h3 id="1-useState"><a href="#1-useState" class="headerlink" title="1.useState"></a>1.useState</h3><blockquote>
<p>调用<code>useState</code>方法时做了什么？</p>
</blockquote>
<p>定义一个 state 变量，这是一种在函数调用时保存变量的方式——<code>useState</code>是一种新方法，它与<code>class</code>里的<code>this.state</code>提供的功能完全相同。一般来说，在函数退出后变量就会“消失”，而<code>state</code>中的变量会被<code>react</code>保留。</p>
<span id="more"></span>

<blockquote>
<p><code>useState</code>函数需要那些参数？</p>
</blockquote>
<p>唯一的参数就是初始<code>state</code>。不同于<code>class</code>，我们可以按照需要使用数字或者字符串对其进行赋值，而不一定是对象。如果想要在<code>state</code>中存储两个不同的变量，只需要调用<code>useState()</code>两次即可。</p>
<blockquote>
<p><code>useState</code>方法的返回值是什么?</p>
</blockquote>
<p>返回值为：当前<code>state</code>和更新<code>state</code>的函数。这与<code>class</code>里的<code>this.state.count</code>和<code>this.setState</code>类似，唯一的区别就是你需要成对的获取他们。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入React中的useState Hook。它让我们在函数组件中存储内部state。</span></span><br><span class="line"><span class="keyword">import</span> React,&#123;useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> Example = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 声明一个叫‘count’的state变量，初始值为0</span></span><br><span class="line"><span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">         // 当用户点击按钮后，传递一个新的值给setCount。react会重新渲染Example组件，并把最新的count传给它。</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="xml">         Click me</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-useEffect"><a href="#2-useEffect" class="headerlink" title="2.useEffect"></a>2.useEffect</h3><blockquote>
<p>Effect Hook 可以让你在函数组件中执行副作用操作(DOM 操作、数据请求、组件更新)。可以把它看作 componentDidMount、componentDidUpdate 和 componentWillUnmount 这三个函数的组合。</p>
</blockquote>
<p>useEffect 可以在组件渲染后实现各种不同的副作用。有些副作用可能需要清除，有些不需要，所以就分为不需要清除的 effect 和需要清除的 effect。</p>
<h5 id="不需要清除的-effect"><a href="#不需要清除的-effect" class="headerlink" title="不需要清除的 effect"></a>不需要清除的 effect</h5><blockquote>
<p><code>useEffect</code>做了什么？</p>
</blockquote>
<p>通过使用这个<code>hook</code>，可以告诉<code>React</code>组件需要在渲染后执行某些操作。<code>React</code>会保存你传递的函数（我们将它称之为<code>“effect”</code>），并且在执行 DOM 更新后调用它。在这个<code>effect</code>中，我们设置了<code>document</code>的<code>title</code>属性，不过我们也可以执行数据获取或调用其他命令式的 API。</p>
<blockquote>
<p>为什么在组件内部调用<code>useEffect</code>?</p>
</blockquote>
<p>将<code>useEffect</code>放在组件内部让我们可以在<code>effect</code>中直接访问<code>count state</code>变量或其他<code>props</code>。我们不需要特殊的 api 来读取他，他已经保存在函数作用域中。<code>Hook</code>是使用了<code>Javascript</code>的闭包机制，而不是在 js 已经提供了解决方案的情况下，还引入特定的 React API。</p>
<blockquote>
<p><code>useEffect</code>会在每次渲染后都执行吗？</p>
</blockquote>
<p>是的，默认情况下，它在第一次渲染之后和每次更次呢之后都会执行。React 保证了每次运行<code>effect</code>的同时，DOM 都已经更新完毕。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Similar to componentDidMount and componentDidUpdate:</span></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// update the document title using the browser API</span></span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times!`</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每次更新 DOM 后 useEffect 都会执行，这个过程每次渲染时都会发生，包括首次渲染。<br>与 componentDidMount 或 componentDidUpdate 不同使用 useEffect 调度的 effect 不会阻塞浏览器更新屏幕，这让你的应用看起来响应更快。大多数情况下，effect 不需要同步执行。在个别情况下有单独的 useLayoutEffect Hook 供你使用，其 api 与 useEffect 相同。</p>
<h5 id="需要清除的-effect"><a href="#需要清除的-effect" class="headerlink" title="需要清除的 effect"></a>需要清除的 effect</h5><blockquote>
<p>为什么要在 effect 中返回一个函数？</p>
</blockquote>
<p>这是 effect 可选的清除机制。每个 effect 都可以返回一个清除函数，如此可以将添加和医护订阅的逻辑放在一起。他们都属于 effect 的一部分。</p>
<blockquote>
<p>React 何时清楚 effect？</p>
</blockquote>
<p>React 会在组件卸载的时候执行清除操作。正如之前学到的，effect 在每次执行渲染的时候都会执行。这就是为什么 React 会在执行当前 effect 之前对上一个 effect 进行清除。</p>
<p>注意：并不是必须为 effect 中返回的函数命名。这里我们将其命名为 cleanup 是为了表明函数的目的，但其实也可以返回一个箭头函数或者给起一个别的名字。</p>
<h3 id="3-useReducer"><a href="#3-useReducer" class="headerlink" title="3.useReducer"></a>3.useReducer</h3><p>useState 的替代方案：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useReducer &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> initialState = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;increment&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.count + <span class="number">1</span> &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;decrement&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.count - <span class="number">1</span> &#125;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = useReducer(reducer, initialState)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Similar to componentDidMount and componentDidUpdate:</span></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// update the document title using the browser API</span></span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;state.count&#125;</span> times!`</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>You clicked &#123;state.count&#125; times<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &#x27;increment&#x27; &#125;)&#125;&gt;Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &#x27;decrement&#x27; &#125;)&#125;&gt;Decrement<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-useRef"><a href="#4-useRef" class="headerlink" title="4.useRef"></a>4.useRef</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> refContainer = userRef(initialValue)</span><br></pre></td></tr></table></figure>

<p>返回一个可变的 ref 对象，其.current 属性被初始化未传入的参数 initiaValue。返回的 red 对象在组件的整个生命周期内保持不变。<br>一个常见的用例便是命令式的访问子组件：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TextInputWithFocusButton</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> inputEl = useRef(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> onButtonClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// `current` 指向已挂载到 DOM 上的文本输入元素</span></span><br><span class="line">    <span class="built_in">console</span>.log(inputEl.current.value()</span><br><span class="line">    inputEl.current.focus();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;inputEl&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onButtonClick&#125;</span>&gt;</span>Focus the input<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当 ref 对象内容发生变化时，useRef 并不会通知你。变更.current 属性不会引发组件重新渲染。如果想要在 React 绑定或者解绑 DOM 节点的 ref 时运行某些代码，则需要使用回调 ref 来实现。</p>
</blockquote>
<h3 id="5-Hook-的规则"><a href="#5-Hook-的规则" class="headerlink" title="5.Hook 的规则"></a>5.Hook 的规则</h3><p>Hook 本质就是 js 函数但是在使用它时需要遵循两条规则。可以使用 linter 插件来强制执行这些规则。</p>
<blockquote>
<p>1.只在最顶层使用 Hook</p>
</blockquote>
<p>确保总是在你的 React 函数的最顶层调用他们，不要再条件判断或循环中调用。</p>
<blockquote>
<p>2.只在 React 函数中调用 Hook</p>
</blockquote>
<p>不要在普通的 js 函数中调用 Hook，可以：<br>在 React 的函数组件中调用 Hook<br>在自定义 Hook 中调用其他 Hook</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>1.参考<a href="https://react.docschina.org/docs/hooks-intro.html">官方文档</a></p>
<p>2.实战项目：<a href="https://github.com/yingliyu/react-hook-todo-list">github/react-hook-todo-list</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>react-hook</tag>
      </tags>
  </entry>
  <entry>
    <title>React+AntD+Redux 的项目实战总结</title>
    <url>/2020/07/18/react-share-bike/</url>
    <content><![CDATA[<!-- ![1.jepg](1.jpeg) -->

<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>最近用 <code>React Hook</code> 实战了一个 React 项目。今天来总结一下，因为都是拼凑的时间所以项目历时半个多月之久，通过本次学习进一步的熟悉了 <code>AntD</code> 常用组件的使用，业务功能（增删改查）的开发及百度地图 API、富文本组件的使用、权限设置模块，最重要的是把学习的 <code>React Hook</code> 落实到了项目中。</p>
<span id="more"></span>

<h5 id="1-百度地图的使用"><a href="#1-百度地图的使用" class="headerlink" title="1.百度地图的使用"></a>1.百度地图的使用</h5><p>前提：先注册成为百度地图开放平台的用户，然后获取密钥 ak。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;script</span><br><span class="line">    <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span></span><br><span class="line">    src=<span class="string">&quot;https://api.map.baidu.com/api?v=1.0&amp;type=webgl&amp;ak=xxxxxxxxxx&quot;</span></span><br><span class="line">  &gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./index.module.less&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Card &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="built_in">Map</span> <span class="keyword">from</span> <span class="string">&#x27;./data.json&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">OrderManage</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [total, setTotal] = useState(<span class="number">0</span>)</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    initData()</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> initData = <span class="keyword">async</span> (params) =&gt; &#123;</span><br><span class="line">    setTotal(<span class="built_in">Map</span>.data.total)</span><br><span class="line">    renderMap(<span class="built_in">Map</span>.data)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> renderMap = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> list = data.route_list</span><br><span class="line">    <span class="comment">// 初始化地图</span></span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Map(<span class="string">&#x27;container&#x27;</span>, &#123; <span class="attr">enableMapClick</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    <span class="keyword">const</span> gps2 = list[list.length - <span class="number">1</span>].split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> endPoint = <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Point(gps2[<span class="number">0</span>], gps2[<span class="number">1</span>])</span><br><span class="line">    map.centerAndZoom(<span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Point(endPoint.lng, endPoint.lat), <span class="number">11</span>)</span><br><span class="line">    addMapContrl(map)</span><br><span class="line">    addBikeRoutes(map, list)</span><br><span class="line">    renderMapService(map, data.service_list)</span><br><span class="line">    addBikeIcon(map, data.bike_list)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 添加自行车图标</span></span><br><span class="line">  <span class="keyword">const</span> addBikeIcon = <span class="function">(<span class="params">map, list</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> bikeIcon = <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Icon(</span><br><span class="line">      <span class="built_in">require</span>(<span class="string">&#x27;./imgs/bike.jpg&#x27;</span>),</span><br><span class="line">      <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Size(<span class="number">30</span>, <span class="number">35</span>),</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">imageSize</span>: <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Size(<span class="number">30</span>, <span class="number">35</span>),</span><br><span class="line">        <span class="attr">anchor</span>: <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Size(<span class="number">15</span>, <span class="number">42</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    list.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> p = item.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">      <span class="keyword">let</span> point = <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Point(p[<span class="number">0</span>], p[<span class="number">1</span>])</span><br><span class="line">      <span class="keyword">let</span> marker = <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Marker(point, &#123; <span class="attr">icon</span>: bikeIcon &#125;)</span><br><span class="line">      map.addOverlay(marker)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 绘制服务区</span></span><br><span class="line">  <span class="keyword">const</span> renderMapService = <span class="function">(<span class="params">map, list</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> servicesList = []</span><br><span class="line">    list.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      servicesList.push(<span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Point(item.lon, item.lat))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> polygon = <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Polyline(servicesList, &#123;</span><br><span class="line">      <span class="attr">strokeColor</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">      <span class="attr">strokeWidth</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="attr">strokeOpacity</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">fillColor</span>: <span class="string">&#x27;orange&#x27;</span>,</span><br><span class="line">      <span class="attr">fillOpacity</span>: <span class="number">0.4</span></span><br><span class="line">    &#125;)</span><br><span class="line">    map.addOverlay(polygon)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加地图起始图标及骑行路线</span></span><br><span class="line">  <span class="keyword">const</span> addBikeRoutes = <span class="function">(<span class="params">map, list</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> gps1 = list[<span class="number">0</span>].split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> gps2 = list[list.length - <span class="number">1</span>].split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> startPoint = <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Point(gps1[<span class="number">0</span>], gps1[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">const</span> endPoint = <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Point(gps2[<span class="number">0</span>], gps2[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">let</span> startPointIcon = <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Icon(</span><br><span class="line">      <span class="built_in">require</span>(<span class="string">&#x27;./imgs/start_point.png&#x27;</span>),</span><br><span class="line">      <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Size(<span class="number">36</span>, <span class="number">42</span>),</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">imageSize</span>: <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Size(<span class="number">36</span>, <span class="number">42</span>),</span><br><span class="line">        <span class="attr">anchor</span>: <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Size(<span class="number">18</span>, <span class="number">42</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 创建标注对象并添加到地图</span></span><br><span class="line">    <span class="keyword">let</span> startMarker = <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Marker(startPoint, &#123; <span class="attr">icon</span>: startPointIcon &#125;)</span><br><span class="line">    map.addOverlay(startMarker)</span><br><span class="line">    <span class="keyword">let</span> endPointIcon = <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Icon(</span><br><span class="line">      <span class="built_in">require</span>(<span class="string">&#x27;./imgs/end_point.png&#x27;</span>),</span><br><span class="line">      <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Size(<span class="number">36</span>, <span class="number">42</span>),</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">imageSize</span>: <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Size(<span class="number">36</span>, <span class="number">42</span>),</span><br><span class="line">        <span class="attr">anchor</span>: <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Size(<span class="number">18</span>, <span class="number">42</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 创建标注对象并添加到地图</span></span><br><span class="line">    <span class="keyword">let</span> endMarker = <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Marker(endPoint, &#123; <span class="attr">icon</span>: endPointIcon &#125;)</span><br><span class="line">    map.addOverlay(endMarker)</span><br><span class="line">    <span class="comment">// 绘制行车路线</span></span><br><span class="line">    <span class="keyword">let</span> routesList = []</span><br><span class="line">    list.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> p = item.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">      routesList.push(<span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Point(p[<span class="number">0</span>], p[<span class="number">1</span>]))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> polyline = <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.Polyline(routesList, &#123;</span><br><span class="line">      <span class="attr">strokeColor</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">      <span class="attr">strokeWidth</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="attr">strokeOpacity</span>: <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">    map.addOverlay(polyline)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 添加地图控件</span></span><br><span class="line">  <span class="keyword">const</span> addMapContrl = <span class="function">(<span class="params">map</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// map.enableScrollWheelZoom(true) // 开启鼠标滚轮缩放</span></span><br><span class="line">    <span class="keyword">let</span> scaleCtrl = <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.ScaleControl(&#123; <span class="attr">anchor</span>: <span class="built_in">window</span>.BMAP_ANCHOR_BOTTOM_LEFT &#125;) <span class="comment">// 添加比例尺控件</span></span><br><span class="line">    map.addControl(scaleCtrl)</span><br><span class="line">    <span class="keyword">let</span> zoomCtrl = <span class="keyword">new</span> <span class="built_in">window</span>.BMapGL.ZoomControl(&#123; <span class="attr">anchor</span>: <span class="built_in">window</span>.BMAP_ANCHOR_TOP_RIGHT &#125;) <span class="comment">// 添加缩放控件</span></span><br><span class="line">    map.addControl(zoomCtrl)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles[</span>&#x27;<span class="attr">order-manage-wrapper</span>&#x27;]&#125;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Card</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">QueryForm</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">submitHandle</span>=<span class="string">&#123;handleSearchSubmit&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">formList</span>=<span class="string">&#123;formList&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">initialValues</span>=<span class="string">&#123;searchFormDefaultValues&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Card</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>共搜询到&#123;total&#125;个<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">width:</span> &#x27;<span class="attr">100</span>%&#x27;, <span class="attr">height:</span> <span class="attr">600</span> &#125;&#125; /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>问题：添加地图覆盖物的时候给多边形加填充色无效暂未解决。</p>
<h5 id="2-富文本组件使用"><a href="#2-富文本组件使用" class="headerlink" title="2.富文本组件使用"></a>2.富文本组件使用</h5><p>使用组件 <code>braft-editor</code><br>安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install braft-editor</span><br><span class="line">// or</span><br><span class="line">yarn add braft-editor</span><br></pre></td></tr></table></figure>

<p>基本用法：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Card, Button, Space, Modal &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span></span><br><span class="line"><span class="keyword">import</span> BraftEditor <span class="keyword">from</span> <span class="string">&#x27;braft-editor&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;braft-editor/dist/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./index.module.less&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">RichText</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [editorState, setEditorState] = useState(BraftEditor.createEditorState(<span class="literal">null</span>))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> getBraftContent = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 将editorState数据转换成html字符串</span></span><br><span class="line">    Modal.info(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;富文本内容&#x27;</span>,</span><br><span class="line">      <span class="attr">content</span>: editorState.toHTML()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> handleBraftChange = <span class="function">(<span class="params">editorState</span>) =&gt;</span> &#123;</span><br><span class="line">    setEditorState(editorState)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> submitContent = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 在编辑器获得焦点时按下ctrl+s会执行此方法</span></span><br><span class="line">    <span class="comment">// 编辑器内容提交到服务端之前，可直接调用editorState.toHTML()来获取HTML格式的内容</span></span><br><span class="line">    <span class="keyword">const</span> htmlContent = editorState.toHTML()</span><br><span class="line">    <span class="built_in">console</span>.log(htmlContent)</span><br><span class="line">    <span class="comment">// const result = await saveEditorContent(htmlContent)</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles[</span>&#x27;<span class="attr">rich-text-wrapper</span>&#x27;]&#125;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Card</span> <span class="attr">title</span>=<span class="string">&quot;富文本——braft-editor&quot;</span> <span class="attr">className</span>=<span class="string">&#123;styles[</span>&#x27;<span class="attr">rich-text-inner</span>&#x27;]&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Space</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;getBraftContent&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">              获取富文本内容</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">Space</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">BraftEditor</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">className</span>=<span class="string">&#123;styles[</span>&#x27;<span class="attr">braft-editor</span>&#x27;]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">value</span>=<span class="string">&#123;editorState&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">contentStyle</span>=<span class="string">&#123;&#123;</span> <span class="attr">height:</span> <span class="attr">400</span>, <span class="attr">boxShadow:</span> &#x27;<span class="attr">inset</span> <span class="attr">0</span> <span class="attr">1px</span> <span class="attr">3px</span> <span class="attr">rgba</span>(<span class="attr">0</span>,<span class="attr">0</span>,<span class="attr">0</span>,<span class="attr">.1</span>)&#x27; &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">onChange</span>=<span class="string">&#123;handleBraftChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">onSave</span>=<span class="string">&#123;submitContent&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>项目中踩到的坑：<br>最开始使用的富文本组件是<code>react-draft-wysiwyg</code>,它依赖于<code>draft-js</code>，所以要安装这个，整个使用过程是完全没有问题的。就在使用第二种富文本组件<code>braft-editor</code>的时候入坑了，一直获取不到富文本的内容，使用<code>toHTML()</code>的时候报错，这个组件本来就是中国人写的文档也很详细自己觉得使用起来应该毫无障碍的，但就是堵到这里进行不下去，删除<code>node_modules</code>重新安装也还是不行，最后的最后发现<code>draft-js</code>是罪魁祸首啊啊啊。原来它与<code>draft-js</code>水火不容，我之前安装过<code>draft-js</code>，所以使用<code>braft-editor</code>的时候有问题，把它卸掉之后就解决了。不过不用担心卸掉之后也不影响<code>react-draft-wysiwyg</code>组件的使用，猜想应该是<code>braft-editor</code>内部集成<code>draft-js</code>了吧，总之能用才是王道，不过大部分情况使用一种就够了。</p>
<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>参考：</p>
<ol>
<li><a href="https://jpuri.github.io/react-draft-wysiwyg/#/">https://jpuri.github.io/react-draft-wysiwyg/#/</a></li>
<li><a href="https://braft.margox.cn/demos/basic">https://braft.margox.cn/demos/basic</a></li>
</ol>
<blockquote>
<p>不积跬步无以至千里，不积小流无以成江海，默默努力，然后悄悄拔尖。</p>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>React-ts-d3 项目实践</title>
    <url>/2020/11/18/react-ts-d3/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>自从涉足了知识图谱项目便一发不可收拾，本次项目中也是涉及到一些可视化和知识图谱的元素，对我来说虽不是新的技术领域但是这次改用了 <code>ts</code>，所以还是踩了不少的坑呢，主要集中在 <code>d3</code> 和 <code>ts</code> 结合部分。</p>
<p>其次在项目评审期间，前端主要问题还有自适应方面的问题，最终敲定使用断点媒体查询的方式实现。</p>
<p>近期 <code>bug</code> 修复进入尾声，时隔数日还是复盘一下，毕竟我的脑瓜子还是一如既往的健忘，刚刚被问及一个项目是不是我做的，我记得是我做的，但是具体内容什么的我已经无力想起了，不过看到我还是认识的。言归正传，下面就来回顾一下踩坑流水帐。</p>
<h3 id="1-Echarts-Graph"><a href="#1-Echarts-Graph" class="headerlink" title="1. Echarts Graph"></a>1. Echarts Graph</h3><p>如果使用过 <code>echart</code> 系列图表，那么 <code>graph</code> 关系图还是相对比较容易上手的，毕竟是高度可定制化套路一样同类型属性名也一样。</p>
<span id="more"></span>

<p>但是使用过程中我还是踩到了坑：由于数据返回节点的 <code>name</code> 字符比较长，为了美观前端显示的时候要做个性化样式设计包括换行超出字符省略等等，我天真又粗暴的直接在 <code>name</code> 上动刀了，虽然我知道 <code>name</code> 不能有重复，但我还是撞了南墙，因为部分 <code>name</code> 做个性化处理之后显示的剩余那部分字符相同，所以触碰了 <code>name</code> 不能重复的红线。<br>解决：<code>name</code> 拿来原封不动，在 <code>label</code> 上做 <code>formatter</code> 处理。</p>
<blockquote>
<p>注意：每一个节点的 <code>name</code> 要唯一，如果有重复的 <code>name</code> 就会报如下错，类似于遍历时的 <code>key</code> 值是唯一的。</p>
</blockquote>
<p><img src="/2020/11/18/react-ts-d3/pic1.png" alt="image1"></p>
<h3 id="2-词云-echarts-wordcloud"><a href="#2-词云-echarts-wordcloud" class="headerlink" title="2. 词云 echarts-wordcloud"></a>2. 词云 echarts-wordcloud</h3><p>这是一个基于 <code>echarts</code> 封装的第三方库，使用中没有踩到值得一提的坑。<br>部分代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface IWordCloud &#123;</span><br><span class="line">    <span class="attr">list</span>: ICommonProps[];</span><br><span class="line">    width: number;</span><br><span class="line">    height: number;</span><br><span class="line">    fontSizeRange: number[];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> WordCloud: React.FC&lt;IWordCloud&gt; = <span class="function">(<span class="params">props: IWordCloud</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; list, width, height, fontSizeRange &#125; = props;</span><br><span class="line"></span><br><span class="line">    useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        drawWordCloud();</span><br><span class="line">    &#125;, [list]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> drawWordCloud = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> wordElement = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;wordCloud&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> chart = echarts.init(wordElement <span class="keyword">as</span> HTMLDivElement);</span><br><span class="line">        <span class="keyword">let</span> data = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">in</span> list) &#123;</span><br><span class="line">            data.push(&#123;</span><br><span class="line">                <span class="attr">name</span>: list[index].name,</span><br><span class="line">                <span class="attr">value</span>: <span class="built_in">Math</span>.sqrt(list[index].value)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> maskImage = <span class="keyword">new</span> Image();</span><br><span class="line">        maskImage.src = bg;</span><br><span class="line">        <span class="keyword">let</span> option = &#123;</span><br><span class="line">            <span class="attr">series</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&#x27;wordCloud&#x27;</span>,</span><br><span class="line">                    <span class="attr">left</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">                    <span class="attr">top</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">                    <span class="attr">width</span>: <span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line">                    <span class="attr">height</span>: <span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line">                    <span class="attr">right</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="attr">bottom</span>: <span class="literal">null</span>,</span><br><span class="line">                    <span class="attr">sizeRange</span>: fontSizeRange, <span class="comment">// 字号</span></span><br><span class="line">                    <span class="attr">rotationRange</span>: [-<span class="number">90</span>, <span class="number">90</span>],</span><br><span class="line">                    <span class="attr">rotationStep</span>: <span class="number">90</span>,</span><br><span class="line">                    <span class="attr">gridSize</span>: fontSizeRange[<span class="number">0</span>] - <span class="number">2</span>,</span><br><span class="line">                    <span class="attr">shape</span>: <span class="string">&#x27;circle&#x27;</span>, <span class="comment">// diamond/triangle/circle/pentagon/star</span></span><br><span class="line">                    <span class="comment">// maskImage: maskImage,</span></span><br><span class="line">                    <span class="attr">textStyle</span>: &#123;</span><br><span class="line">                        <span class="attr">normal</span>: &#123;</span><br><span class="line">                            <span class="comment">// fontFamily: &#x27;微软雅黑&#x27;,</span></span><br><span class="line">                            <span class="comment">// fontWeight: &#x27;normal&#x27;,</span></span><br><span class="line">                            <span class="comment">// Color can be a callback function or a color string</span></span><br><span class="line">                            <span class="attr">color</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                                <span class="comment">// Random color</span></span><br><span class="line">                                <span class="keyword">return</span> WORD_CLOUD_COLORS[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">3</span>)];</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">emphasis</span>: &#123;</span><br><span class="line">                            <span class="attr">shadowBlur</span>: <span class="number">2</span>,</span><br><span class="line">                            <span class="attr">shadowColor</span>: <span class="string">&#x27;#1890ff&#x27;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">data</span>: data</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;;</span><br><span class="line">        chart.setOption(option);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;wordCloud&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">height:</span> <span class="attr">height</span>, <span class="attr">width:</span> <span class="attr">width</span> &#125;&#125; /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>效果图如下：<br><img src="/2020/11/18/react-ts-d3/pic2.png" alt="image"></p>
<h3 id="3-echarts-legend-个性化细节"><a href="#3-echarts-legend-个性化细节" class="headerlink" title="3.echarts legend 个性化细节"></a>3.echarts legend 个性化细节</h3><p>可能对别人来说是小儿科，只是它是我初次发现的比较符合我项目中需求的点。</p>
<p>1.<code>legend</code> 图例标记的图形除了定制的哪几种形状还可以设置宽高 <code>itemWidth</code>、<code>itemHeight</code>。 2.<code>legend</code> 文字块的宽定制这样可以是 <code>value</code> 左对齐。 3.<code>legend</code> 也有 <code>tooltip</code>。<br>如下图：<br><img src="/2020/11/18/react-ts-d3/pic3.png" alt="image3"></p>
<h3 id="4-d3-力导向图——-force"><a href="#4-d3-力导向图——-force" class="headerlink" title="4. d3 力导向图—— force"></a>4. d3 力导向图—— force</h3><p>使用 <code>ts</code> 时部分第三方库的定义的各种类型定位起来还是有点烧脑的。<br>我在使用过程中 drag 函数的范型大概折磨了我一周左右最后在庄哥的帮助下终于解决了。<br><img src="/2020/11/18/react-ts-d3/pic4.png" alt="img4"></p>
<p>部分代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// create a force simulation</span></span><br><span class="line">    <span class="keyword">const</span> initForceSimulation = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> linkForce = d3</span><br><span class="line">                .forceLink&lt;INode, ILink&gt;(linksData)</span><br><span class="line">                .id(<span class="function">(<span class="params">data: INode</span>) =&gt;</span> data.id)</span><br><span class="line">                .distance(<span class="number">200</span>);</span><br><span class="line">            <span class="keyword">const</span> nodeCollision = d3</span><br><span class="line">                .forceCollide()</span><br><span class="line">                .radius(<span class="number">80</span>)</span><br><span class="line">                .iterations(<span class="number">0.5</span>)</span><br><span class="line">                .strength(<span class="number">0.5</span>);</span><br><span class="line">            <span class="keyword">const</span> nodeCharge = d3.forceManyBody().strength(-<span class="number">300</span>).theta(<span class="number">0.01</span>);</span><br><span class="line">            simulationRef.current = d3</span><br><span class="line">                .forceSimulation&lt;INode, ILink&gt;(nodesData)</span><br><span class="line">                .alpha(<span class="number">0.3</span>) <span class="comment">// 活力，渲染之后再自动动多久到达目标位置</span></span><br><span class="line">                .force(<span class="string">&#x27;link&#x27;</span>, linkForce) <span class="comment">// 映射id &amp; 线的长度</span></span><br><span class="line">                .force(<span class="string">&#x27;x&#x27;</span>, d3.forceX())</span><br><span class="line">                .force(<span class="string">&#x27;y&#x27;</span>, d3.forceY())</span><br><span class="line">                .force(<span class="string">&#x27;center&#x27;</span>, d3.forceCenter(svgWidth / <span class="number">2</span>, svgHeight / <span class="number">2</span>))</span><br><span class="line">                .force(<span class="string">&#x27;collision&#x27;</span>, nodeCollision)<span class="comment">// 避免节点相互覆盖</span></span><br><span class="line">                .force(<span class="string">&#x27;charge&#x27;</span>, nodeCharge);<span class="comment">// 节点间相互排斥的电磁力</span></span><br><span class="line"></span><br><span class="line">            simulationRef.current.nodes(nodesData).on(<span class="string">&#x27;tick&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                edges</span><br><span class="line">                    .attr(<span class="string">&#x27;x1&#x27;</span>, <span class="function">(<span class="params">&#123; source &#125;</span>) =&gt;</span> (source <span class="keyword">as</span> INode).x || <span class="number">0</span>)</span><br><span class="line">                    .attr(<span class="string">&#x27;y1&#x27;</span>, <span class="function">(<span class="params">&#123; source &#125;</span>) =&gt;</span> (source <span class="keyword">as</span> INode).y || <span class="number">0</span>)</span><br><span class="line">                    .attr(<span class="string">&#x27;x2&#x27;</span>, <span class="function">(<span class="params">&#123; target &#125;</span>) =&gt;</span> (target <span class="keyword">as</span> INode).x || <span class="number">0</span>)</span><br><span class="line">                    .attr(<span class="string">&#x27;y2&#x27;</span>, <span class="function">(<span class="params">&#123; target &#125;</span>) =&gt;</span> (target <span class="keyword">as</span> INode).y || <span class="number">0</span>);</span><br><span class="line">                nodes.attr(<span class="string">&#x27;transform&#x27;</span>, <span class="function">(<span class="params">data: any</span>) =&gt;</span> <span class="string">`translate(<span class="subst">$&#123;data.x&#125;</span>, <span class="subst">$&#123;data.y&#125;</span>)`</span>);</span><br><span class="line">                edgepaths.attr(</span><br><span class="line">                    <span class="string">&#x27;d&#x27;</span>,</span><br><span class="line">                    <span class="function">(<span class="params">&#123; target, source &#125;</span>) =&gt;</span></span><br><span class="line">                        <span class="string">&#x27;M &#x27;</span> +</span><br><span class="line">                        (source <span class="keyword">as</span> INode).x +</span><br><span class="line">                        <span class="string">&#x27; &#x27;</span> +</span><br><span class="line">                        (source <span class="keyword">as</span> INode).y +</span><br><span class="line">                        <span class="string">&#x27; L &#x27;</span> +</span><br><span class="line">                        (target <span class="keyword">as</span> INode).x +</span><br><span class="line">                        <span class="string">&#x27; &#x27;</span> +</span><br><span class="line">                        (target <span class="keyword">as</span> INode).y</span><br><span class="line">                );</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">const</span> edges = drewLines(); <span class="comment">// draw lines</span></span><br><span class="line">            <span class="keyword">const</span> nodes = drawNodes(); <span class="comment">// draw nodes</span></span><br><span class="line">            <span class="keyword">const</span> edgepaths = drawEdgeLabel(); <span class="comment">// draw relation label</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(error);</span><br><span class="line">            message.error(<span class="string">&#x27;内部错误，&#x27;</span> + <span class="built_in">JSON</span>.stringify(error));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>

<p>最后，推荐一个切换全屏库： screenfull。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>React</category>
        <category>Typescript</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>typescript</tag>
        <tag>d3</tag>
      </tags>
  </entry>
  <entry>
    <title>读书是一生的事</title>
    <url>/2019/12/05/reading-lifetime/</url>
    <content><![CDATA[<blockquote>
<p>转载《读者》杂志中一篇王凤的文章——读书是一生的事，分享给那些和我一样默默坚持的你。</p>
</blockquote>
<h3 id="什么是底层"><a href="#什么是底层" class="headerlink" title="什么是底层"></a>什么是底层</h3><p>念高中时，常听班主任提起一个学姐。她几乎不跟周围的人说话，也没什么朋友，直到高考，她考进全省前 10 名。市里去拍摄宣传片时，大家才发现她家中一贫如洗，父亲早已过世，母亲卧病在床。读高中时，为了省钱，她经常趁别人吃完饭离开后，去捡剩的馒头，一边捡，一边吃。那时候，有些高校会给优秀高考生数万元的奖金。她说，她高中 3 年拼命学习，目标就是拿到那笔钱，这样她就能赚够学费了，亲人就再也不能逼她辍学，早点嫁人。“像我这种出身卑微的人，连任性的资格都没有，就害怕一停下来，便被别人狠狠地甩在后面。”知乎上有个提问：底层出身的孩子，假设当年没能考上“985”或者“211”大学，你会损失和错过什么？什么是底层？就是除了你自己，一无所有。只能靠自己的人，连个性都是奢侈品。</p>
<h3 id="人生入场券"><a href="#人生入场券" class="headerlink" title="人生入场券"></a>人生入场券</h3><span id="more"></span>

<p>有人说，这是一个英雄不论出处的年代，也是一个英雄必论出处的年代。龟兔赛跑，如果兔子一直在拼命跑，结果会怎么样？英国 BBC 曾拍摄纪录片，展现 14 个孩子 50 年的人生轨迹。7 岁时，来自精英家庭的 John 和 Andrew 已经习惯了每天看《金融时报》或《观察家报》，而贫民窟孩子的理想，则是能少罚站、少被打、吃饱饭。50 年后，几个精英家庭的孩子，上了好学校，找到好工作。3 个中产家庭的孩子，有一个成为精英，两个依旧中产。而几个来自底層的孩子，包括他们的后代，依然常常与失业相伴。知识改变命运的背后，也是一场关于家庭的较量。有钱的基础是，你家庭的资源、背景，加上你的努力和运气。但大多数人，不过是为了生计而出卖劳动的人。人脉、财富、教育等资源，会父传子，子传孙。据《中国家庭发展报告（2015 年）》，农村 80%的留守儿童从没参加过课外辅导；在西部贫困农村，63%的学生甚至没有高中文凭。中国校友网对全国各省高考状元开展调查，发现在 2007 年至 2016 年间，全国的高考状元中，近五成状元的父母是教师（35%）和工程师（12.6%），近两成的父母是公务员。来自农村、经济状况欠佳家庭的状元比例在逐年下降。这种现象，就如同今年北京高考状元说的：“像我这种生于北京中产阶级家庭的孩子，在教育资源上享有得天独厚的条件。我在学习的时候，确实能走很多捷径。”原生家庭对人的影响，真的太大了。有时你不得不承认：自己努力的天花板，不过是别人的起点。条条大路通罗马，而有人就出生在罗马。人的每一种奢望都是设想“如何能付出最少而得到最多”，但这个世界并不存在这种极端不公平的交易。所以大学，起码为底层人群提供了可行的前进捷径，终其一生或许谈不上逆袭，但在人生的接力赛中，你将是自己孩子的起点。走过这条千军万马的独木桥，以后的门票会越来越贵，你可能再也买不起入场券了。</p>
<h3 id="名校很必要"><a href="#名校很必要" class="headerlink" title="名校很必要"></a>名校很必要</h3><blockquote>
<p>你身边人的优秀程度，会影响你。</p>
</blockquote>
<p>过去 20 年来，北大先后有 500 余名保安考学深造，有的甚至考上研究生，当上了大学老师。每个学校都有保安，但为什么这种成群结队的考学行为，在名校发生的概率更大？在媒体采访北大保安第一人张俊成的报道里，或许就藏着答案。张俊成说，有次站岗，看到一位老人骑车过来，快到门岗前，老人下车，推车走过。经过门岗时，老人点头跟他说：“你辛苦了。”张俊成感到受宠若惊，他问旁人：“这是谁？怎么这么尊重我们？”别人告诉他，老人是北大校长。在保安岗位上，张俊成也曾一度迷失，他说：“那个时候非常无知、愚昧。”但他却得到了多位北大教授的热心帮助。在教授们的建议下，他才开始重新读书学习。心理学博士采铜在《精进》一书中谈道：“一个年轻人，进入一所不那么优秀的高校，对自己的标准会不由自主地降低以适应这个环境，减少自身与环境的冲突，而这种做法对他们人生的影响也许是致命的。”但在一片向上的氛围中，周围的人都在努力，自己也会用相对严格的标准来要求自己，不断自省。哪怕最后变不成最牛的，也可以优秀出众。</p>
<blockquote>
<p>名校的光环，是一种优秀的传递。</p>
</blockquote>
<p>如今，大学生如同韭菜，收完一茬又会有一茬，已经不怎么抢手了。在这种情况下，“名校”就是一块招牌。稍微想一想，就不难理解，亲戚家有孩子考上名校，周围的人会口口相传，“谁家的孩子，上 ×× 学校了！了不起！”即便八竿子打不着的关系都要掰扯清楚，好像有了这层关系，自己的身价也能水涨船高。名校在人心中的地位始终不一般，它的声望是由多年来源源不断的人才输入和输出形成的。所以用人单位选择名牌大学的求职者，成本无疑是最低的。在他们看来，一个人出身名校，起码意味着智商高或者有毅力。而现在，国内大公司招聘时，几乎都会明确地写明岗位的学历要求，有些岗位要求至少是本科以上学历。</p>
<blockquote>
<p>人脉的扩张，是一个人能力与资源的扩张。</p>
</blockquote>
<p>好大学能给你接触更广泛圈子的机会。人脉的扩张，也是一个人能力与资源的扩张。有次和一位正在创业的学长聊天，他说他现在的团队，基本是研究生时期的同学，并且导师觉得他的项目前景不错，主动帮他做宣传。当年北大毕业的陆步轩，以卖猪肉为生，全国哗然。别人只看到才子卖猪肉不光鲜，但陆的校友陈生却注意到：一个档口，自己一天只能卖 1.2 头猪，陆步轩却能卖出 12 头，简直太牛了。陈生邀请他做品牌顾问，两人合作成立“屠夫学校”，养殖土猪。后来，他们开了几百家连锁店，陈生的身家也过百亿。不光是创业上的资源，为什么名校毕业生大多能找到外人眼中不错的工作？除了本身的能力，校友的作用也很明显。比如前辈在大型企业上班，那你进入他的圈子实习和求职的机会，一定会比其他学校的学生多。</p>
<blockquote>
<p>薪酬待遇。</p>
</blockquote>
<p>更功利性一些，如果你以赚更多钱为目标，学历绝对是决定因素之一，在薪资这件事上，国内外都保持了一致。福利待遇好的公务员、事业编制、国企员工等岗位，都有硬性的、比较高的学历要求。2010 年，中央国家行政机关对学历的要求，硕士以上学历的职位有 294 个，占职位总数的 54.55%，而专科学历可以报考的职位只有 1 个。</p>
<blockquote>
<p>受教育程度低的人，通过嫁娶来改变命运将越来越难。</p>
</blockquote>
<p>从相同或相似的阶层群体中挑选配偶，这种门当户对式的婚姻匹配，被称为“同质婚”。反之，跨越社会等级、社会群体壁垒的婚姻，为“异质婚”。据《中国家庭发展报告（2016 年）》，20 世纪 80 年代以后，相同和相近文化程度的婚姻匹配比例显著提高。“男高女低”的异质婚配模式减少，受教育程度低的人群更加难以通过婚姻实现阶层流动。女性选择比自己受教育程度高的男性的空间越来越小，越来越集中在比自己仅仅高一个层次的梯度，也就是现在人们常说的“你是谁，就会嫁给谁”。而受教育程度低的农村男性，在择偶时面临更为严峻的困境。</p>
<h3 id="敲门砖"><a href="#敲门砖" class="headerlink" title="敲门砖"></a>敲门砖</h3><p>一张高校文凭，不能确保让人站上顶峰，却会让大多数人免于跌落谷底。那些说它“没用”的人，不过是一直处在谷底上方，但这绝不等于“谷底”不存在。曾看到一位网友的跟帖，他說：“其实我没参加高考，没读过大学，现在也过得不错，但这是我几年来起早摸黑努力得到的结果。不可以说读书无用。其实读好大学，人生肯定会有个好的起点，同时能更好地认识世界。”学识影响眼界，眼界决定格局，而格局影响人一生。</p>
<p>读书是一生的事，不是什么时候要用到了，我们才去学什么。刘媛媛在《超级演说家》中曾发表过这样一段演说：</p>
<blockquote>
<p>“有些人出生就含着金汤匙，有些人出生后连爸妈都没有，人生跟人生是没有可比性的。我们的人生怎么样，完全取决于自己的感受。你一辈子都在感受抱怨，那你的一生就是抱怨的一生；你一辈子都在感受感动，那你的一生就是感动的一生；你一辈子都立志于改变这个社会，那你的一生就是斗士的一生。”</p>
</blockquote>
<p>这个世界就是，一些人总在昼夜不停地运转；而另外一些人，起床就发现世界已经变了。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>随笔</category>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>权限管理的原理</title>
    <url>/2021/03/11/rights-mgt/</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>在一些中后台项目的业务中经常会有给不同的用户看到不同的页面甚至不同的操作权限，这时候权限管理功能就闪亮登场了，用它来给用户赋予不同的角色，给不同的角色设置不同的权限，那么前后端在技术方面具体是如何实现的呢？带着这个问题我们来看下权限管理的流程和实现原理。</p>
<h5 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h5><blockquote>
<p>权限管理大致方案就是给角色分配权限，给用户分配角色。根据业务不同要求的颗粒度不同，如果颗粒度仅限于路由级别，实现思路大致如下</p>
</blockquote>
<p>首先，前端需要分别定义一套（不需权限所有已登陆用户都可访问）静态路由表和动态路由表，路由元信息中包含这个路由对应的（和后端定义好的）权限名。</p>
<span id="more"></span>

<p>然后， 1.跟后端协商好权限的定义规则，其次，从服务端获取含有用户权限信息的菜单列表然后跟前端自己定义的完整的动态路由表进行递归遍历，如果用户有此页面的权限则添加到用户可访问的路由表中，得到用户有权限访问的路由表； 2.在导航前置守卫中做拦截。<code>token</code> 存在且有效的是权限管理的第一步判断，如果 token 不存在，判断该路由是否在白名单中，如果在则<code>next()</code>，如果不在则重定向至登录页，如果 <code>token</code> 存在再判断（全局状态中）该用户是否有权限，如果有 <code>next()</code>，否则再从服务端获取该用户的权限信息，通过步骤 1，将 1 得到的路由表添加<code>router.addRoutes()</code>到路由表中，并更新全局状态中的路由表，然后 <code>next()</code>，页面渲染出来就是该用户有访问权限的菜单/页面。</p>
<blockquote>
<p>如果权限管理颗粒度细到每个操作按钮级别，可以使用自定义指令实现。</p>
</blockquote>
<p>首先，编写自定义指令，具体思路：能拿到绑定的元素及该操作需要的权限，如果该用户没有此操作的权限则不显示此按钮。然后在模板中使用该指令。</p>
<h5 id="逻辑流程图"><a href="#逻辑流程图" class="headerlink" title="逻辑流程图"></a>逻辑流程图</h5><p><img src="/2021/03/11/rights-mgt/1.png" alt="流程图"></p>
<p>错误之处欢迎交流指正，感谢~</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>-vue - 权限管理</tag>
      </tags>
  </entry>
  <entry>
    <title>单点登录实现</title>
    <url>/2021/05/06/sso/</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>在日常生活中，很多人由于忘记某些网站的登录密码而烦恼，因为大多数用户都要记忆不少于 10 个用户名和相应密码。随着信息化飞速发展，大型企业和政府部门等都开始使用电子系统进行办公，整个办公系统由多个不同的子系统构成，如办公自动化(OA)系统，财务管理系统，档案管理系统，信息查询系统等。如果每个系统都使用独立的登录和验证机制，那么每天工作人员都要登录不同的系统进行办公。用户登录的频繁操作，降低了员工的工作效率，造成工作成本的浪费。而大量的密码和用户名的记忆时间长了也会出现问题，忘记密码或者混淆密码都会造成很大的麻烦。基于以上原因，为用户提供一个畅通的登录通道变得十分重要。</p>
<p>这时候用户希望我在一个系统登录之后可以默认在它的关联系统（二级域名必须相同）中也是已登录状态，避免繁琐的多次登录。这时候就需要 SSO（Single Sign On）来帮助我们实现。</p>
<p>单点登录(SingleSign-On，SSO)是一种帮助用户快捷访问网络中多个站点的安全通信技术。单点登录系统基于一种安全的通信协议，该协议通过多个系统之间的用户身份信息的交换来实现单点登录。使用单点登录系统时，用户只需要登录一次，就可以访问多个系统。</p>
<h5 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h5><blockquote>
<p>Cookie 作为凭证媒介</p>
</blockquote>
<p>众所周知，HTTP 是无状态的协议，这意味着服务器无法确认用户的信息。于是，W3C 就提出了：给每一个用户都发一个通行证，用户访问站点时都要携带通行证，这样服务器就可以从通行证上确认用户的信息，通行证就是 Cookie。</p>
<p>同样因为 HTTP 协议是无状态的，Session 不能依据 HTTP 连接来判断是否为同一个用户。于是：服务器向客户端发送了一个名为 SESSIONID 的 Cookie，它的值是 Session 的 id 值。其实 Session 是依据 Cookie 来识别是否是同一个用户。</p>
<blockquote>
<p>通过页面重定向的方式</p>
</blockquote>
<h5 id="逻辑流程图"><a href="#逻辑流程图" class="headerlink" title="逻辑流程图"></a>逻辑流程图</h5><span id="more"></span>

<p>错误之处欢迎交流指正，感谢~</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>SSO</tag>
      </tags>
  </entry>
  <entry>
    <title>css文字超出显示省略号</title>
    <url>/2020/06/09/text-ellipsis/</url>
    <content><![CDATA[<h5 id="一-单行文本超出省略"><a href="#一-单行文本超出省略" class="headerlink" title="一.单行文本超出省略"></a>一.单行文本超出省略</h5><blockquote>
<p>关键属性：<code>text-overflow:ellipsis|clip</code> 。<br><code>clip</code> : 　不显示省略标记（…），而是简单的裁切掉溢出的文本<br><code>ellipsis</code> : 　当对象内文本溢出时显示省略标记（…）<br><code>string</code>: 使用指定字符串来代表被修剪的文本<br>兼容性：所有主流浏览器都兼容, IE6+</p>
</blockquote>
<p>1.css 实现：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.css+html 实现：</p>
<blockquote>
<p>使用<code>&lt;nobr&gt;</code>不换行标签（行内标签）此标签与 css <code>white-space</code> 功能相同。<br>详情参考<a href="http://www.divcss5.com/html/h533.shtml">http://www.divcss5.com/html/h533.shtml</a> 。<br><code>&lt;nobr&gt;</code>兼容性：IE11+</p>
</blockquote>
<span id="more"></span>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">nobr &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">nobr</span>&gt;</span></span><br><span class="line">    我是禁止换行标签。我是禁止换行标签。 我是禁止换行标签。我是禁止换行标签。</span><br><span class="line">    我是禁止换行标签。我是禁止换行标签。</span><br><span class="line">  <span class="tag">&lt;/<span class="name">nobr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="二-多行文本超出省略"><a href="#二-多行文本超出省略" class="headerlink" title="二.多行文本超出省略"></a>二.多行文本超出省略</h5><blockquote>
<p><code>-webkit-line-clamp</code>:限制在一个块元素显示的文本的行数。是一个不规范的属性，未出现在 css 规范草案中。<br>为了实现该效果，它必须要结合其他的属性 ：<br><code>display: -webkit-box;</code> 必须结合的属性 ，将对象作为弹性伸缩盒子模型显示 。<br><code>-webkit-box-orient</code> 必须结合的属性 ，设置或检索伸缩盒对象的子元素的排列方式 。<br>兼容性：适用于 webkit 浏览器或移动端，详情：<a href="https://www.caniuse.com/#search=-webkit-line-clamp">https://www.caniuse.com/#search=-webkit-line-clamp</a></p>
</blockquote>
<p>以超出 3 行内容省略为例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  -webkit-line-clamp: <span class="number">3</span>;</span><br><span class="line">  -webkit-box-orient: vertical;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跨浏览器兼容方案：(IE9+)<br>注意：<code>hight</code> 是 <code>line-height</code> 的 3 倍</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.p</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.p</span>:after &#123;</span><br><span class="line">  content: <span class="string">&#x27;...&#x27;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">1</span>) <span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>text-ellipsis</tag>
        <tag>-webkit-line-clamp</tag>
      </tags>
  </entry>
  <entry>
    <title>vue动态绑定class与style</title>
    <url>/2020/06/09/vue-class/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>基于 vue 开发的项目中有的交互需要修改元素的样式，就会用到 class 或 style 的动态绑定。当样式的属性值是变量时一般使用 style，其他情况最好使用 class，个人觉得这样模版代码更好维护一点。</p>
</blockquote>
<h5 id="1-绑定-class-方式"><a href="#1-绑定-class-方式" class="headerlink" title="1.绑定 class 方式"></a>1.绑定 class 方式</h5><p>js 代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">isActive</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">isCenter</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">class2</span>: <span class="string">&#x27;align-center&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h6 id="（1）对象形式"><a href="#（1）对象形式" class="headerlink" title="（1）对象形式"></a>（1）对象形式</h6><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; &#x27;active&#x27;: isActive, &#x27;align-center&#x27;: !isCenter &#125;&quot;</span>&gt;</span>全部<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="（2）数组形式"><a href="#（2）数组形式" class="headerlink" title="（2）数组形式"></a>（2）数组形式</h6><p>数组结合三目运算符</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">&quot;[isActive ? &#x27;icon-arrow-up&#x27; : &#x27;icon-arrow-down&#x27;, class2]&quot;</span>&gt;</span>全部 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-绑定-style-方式"><a href="#2-绑定-style-方式" class="headerlink" title="2.绑定 style 方式"></a>2.绑定 style 方式</h5><blockquote>
<p>注意：短横线连接的属性名转换为驼峰命名格式，例如：font-size =&gt; fontSize</p>
</blockquote>
<p>js 代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">activeColor</span>:<span class="string">&#x27;red&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h6 id="（1）对象形式-1"><a href="#（1）对象形式-1" class="headerlink" title="（1）对象形式"></a>（1）对象形式</h6><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; color: activeColor, fontSize: &#x27;12px&#x27; &#125;&quot;</span>&gt;</span>全部<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="（2）数组形式-1"><a href="#（2）数组形式-1" class="headerlink" title="（2）数组形式"></a>（2）数组形式</h6><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">:style</span>=<span class="string">&quot;[&#123;color:activeColor&#125;,&#123;fontSize:&#x27;12px&#x27;&#125;]&quot;</span>&gt;</span>全部<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="（3）其他形式"><a href="#（3）其他形式" class="headerlink" title="（3）其他形式"></a>（3）其他形式</h6><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;display:[&#x27;-webkit-box&#x27;, &#x27;-o-flexbox&#x27;,&#x27;flex&#x27;]&#125;&quot;</span>&gt;</span>全部<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>VUE</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-elementui-diary</title>
    <url>/2021/09/24/vue-elementui-diary/</url>
    <content><![CDATA[<h5 id="title"><a href="#title" class="headerlink" title="title"></a>title</h5><!-- <blockquote class="pullquote mindmap mindmap-md"><ul>
<li><p><a href="https://hunterx.xyz/hexo-simple-mindmap-plugin-intro.html">Hexo 的思维导图插件</a></p>
<ul>
<li>前言</li>
<li>使用方法<ul>
<li>一</li>
<li>二</li>
<li>三</li>
</ul>
</li>
<li>太长不看</li>
<li>参考资料</li>
</ul>
</li>
</ul>
</blockquote> -->

<div style="width: 90%;margin: 0 auto">
    <canvas id="chart7850" style="height: 300px"></canvas>
</div>
<script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script>
<script type="text/javascript">
    var ctx = document.getElementById('chart7850').getContext('2d');
    var options = {
type: 'line',
data: {
labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],
datasets: [{
label: 'My First dataset',
backgroundColor: 'rgb(255, 99, 132)',
borderColor: 'rgb(255, 99, 132)',
data: [0, 10, 5, 2, 20, 30, 45]
}]
},
options: {
responsive: true,
title: {
display: true,
text: 'Chart.js Line Chart'
}
}
};
    new Chart(ctx, options);
</script>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>VUE</category>
        <category>VUE2</category>
      </categories>
      <tags>
        <tag>VUE</tag>
        <tag>VUE2</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue+vue-i18n+Element UI实现多语言切换</title>
    <url>/2019/12/26/vue-i18n/</url>
    <content><![CDATA[<h6 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h6><blockquote>
<p>Vue I18n 是 Vue.js 的国际化插件。最近项目需求——给网站加中英文语言切换功能，使用的是 vue-i8n。老大修改了项目架构使项目支持 i8n，铺垫做的好就使用起来很 easy 了，整理数据然后比着葫芦画瓢就实现了想要的功能。一直以来我的短板就是学习东西不够深入，总是浅尝辄止于会用，发现了不足就去努力克服吧。不能止步于会用，现在就开始从头学习整理一下项目架构是如何配合 i18n 来使用的。</p>
</blockquote>
<h6 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h6><p>1)npm</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vue-i18n</span><br></pre></td></tr></table></figure>

<p>2)yarn</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add vue-i18n</span><br></pre></td></tr></table></figure>

<h6 id="2-开始"><a href="#2-开始" class="headerlink" title="2.开始"></a>2.开始</h6><span id="more"></span>

<p>结合 ElementUI 国际化文档，再 main.js 的同级创建目录 lang，cd lang 目录然后创建目录 en、zh-cn 和 index.js 文件，目录结构如下：<br><img src="/2019/12/26/vue-i18n/Image1.png" alt="Image1.png"></p>
<p>然后目录 en 和 zh-cn 中再分别创建入口文件 index.js 和需要的模块目录(这里只加了 login 模块)。最终如下：<br><img src="/2019/12/26/vue-i18n/Image2.png" alt="Image2.png"></p>
<h6 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h6><p>在 lang/index.js 中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueI18n <span class="keyword">from</span> <span class="string">&#x27;vue-i18n&#x27;</span></span><br><span class="line"><span class="comment">// element-ui lang</span></span><br><span class="line"><span class="keyword">import</span> elementEnLocale <span class="keyword">from</span> <span class="string">&#x27;element-ui/lib/locale/lang/en&#x27;</span></span><br><span class="line"><span class="comment">// element-ui lang</span></span><br><span class="line"><span class="keyword">import</span> elementZhLocale <span class="keyword">from</span> <span class="string">&#x27;element-ui/lib/locale/lang/zh-CN&#x27;</span></span><br><span class="line"><span class="keyword">import</span> enLocale <span class="keyword">from</span> <span class="string">&#x27;./en&#x27;</span></span><br><span class="line"><span class="keyword">import</span> zhLocale <span class="keyword">from</span> <span class="string">&#x27;./zh-cn&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line">Vue.use(VueI18n)</span><br><span class="line"><span class="comment">// http: //element-cn.eleme.io/2.4/#/zh-CN/component/i18n</span></span><br><span class="line"><span class="comment">// 非5.x版本vue-i18n 需要用一下方式兼容</span></span><br><span class="line"><span class="keyword">const</span> messages = &#123;</span><br><span class="line">  <span class="attr">en</span>: &#123;</span><br><span class="line">    ...enLocale,</span><br><span class="line">    ...elementEnLocale</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">zh</span>: &#123;</span><br><span class="line">    ...zhLocale,</span><br><span class="line">    ...elementZhLocale</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> i18n = <span class="keyword">new</span> VueI18n(&#123;</span><br><span class="line">  <span class="comment">// set locale</span></span><br><span class="line">  <span class="comment">// options: en or zh</span></span><br><span class="line">  <span class="attr">locale</span>: store.getters.language || <span class="string">&#x27;en&#x27;</span>, <span class="comment">// 默认显示英文 // set locale messages</span></span><br><span class="line">  messages</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> i18n</span><br></pre></td></tr></table></figure>

<blockquote>
<p>准备的差不多了，然后开始在项目中使用 i18n，在已有的 main.js 中加入：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&#x27;./lang&#x27;</span></span><br><span class="line">Vue.use(ElementUI, &#123;</span><br><span class="line">  <span class="attr">i18n</span>: <span class="function">(<span class="params">key, value</span>) =&gt;</span> i18n.t(key, value)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> Vue(&#123; i18n &#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>然后再 en/index.js 中导出你的数据：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// login</span></span><br><span class="line"><span class="keyword">import</span> login <span class="keyword">from</span> <span class="string">&#x27;./login&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  login</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当你 login 的数据如下时：</p>
</blockquote>
<p><img src="/2019/12/26/vue-i18n/Image3.png" alt="Image3.png"></p>
<blockquote>
<p>你可以通过 <strong><em>$t(‘moduleName.key’)</em></strong> 这么使用它们：</p>
</blockquote>
<p><img src="/2019/12/26/vue-i18n/Image4.png" alt="Image4.png"></p>
<blockquote>
<p>不好奇$t 是什么吗？可以打出来自己看看</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.$t)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.$i18n)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.$t(<span class="string">&#x27;login&#x27;</span>))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>然后切换语言时，将其存储到 vuex 中：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">changeLanguage</span>(<span class="params">lang</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.$i18n.locale = lang</span><br><span class="line">      <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;set_language&#x27;</span>, lang)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h6 id="4-最后"><a href="#4-最后" class="headerlink" title="4.最后"></a>4.最后</h6><blockquote>
<p>我想既然是全局使用，直接存到 cookie 中就可以了刷新干什么页面数据都有效的，为什么还要放到 vuex 中呢？试了一番发现其他都没问题却忽略了中英文小图标的存在，需要双向绑定来保证点击时实时更新图标。</p>
</blockquote>
<p>所以我们需要全局存储到 vuex 中实现双向绑定，同时使用 cookie 缓存你当前切换的语言，根据使用习惯或需求设定过期时间。</p>
<p>参考：<br><em><a href="https://kazupon.github.io/vue-i18n">https://kazupon.github.io/vue-i18n</a><br><a href="https://element.eleme.io/">https://element.eleme.io</a></em></p>
<blockquote>
<p>本文有不到之处欢迎交流指正~</p>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>VUE</category>
      </categories>
      <tags>
        <tag>i18n</tag>
      </tags>
  </entry>
  <entry>
    <title>vue中v-for和v-if不能同时使用解决方案</title>
    <url>/2020/06/16/vue-if-for/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>为什么不可以呢？我们 <code>JS</code> 的使用习惯在遍历时使用条件判断是很常见的， <code>vue</code> 模版中当然也是可以使用的，但是<code>v-for</code>和<code>v-if</code>不可以出现在同一个元素上。<br>因为在 <code>vue</code> 中会优先执行 <code>v-for</code>,如果每一次都遍历整个数组，将会影响速度，尤其是当之需要渲染很小一部分的时候。</p>
</blockquote>
<h3 id="使用情景"><a href="#使用情景" class="headerlink" title="使用情景"></a>使用情景</h3><blockquote>
<p><code>v-for</code> 和 <code>v-if</code> 同时使用有 3 种情景：</p>
<ol>
<li> 部分遍历（内/外部条件）：一个 <code>list</code> 中某个属性值符合条件的遍历出来；</li>
<li> 全部遍历（外部条件）：某外部条件符合条件时遍历全部。</li>
<li> 全部遍历（内部条件）：根据某内部条件渲染出不同的内容。</li>
</ol>
</blockquote>
<p>注：内部条件指被遍历数据内部属性值或条件；外部条件指与独立于被遍历数据以外的数据。</p>
<span id="more"></span>

<h3 id="1-使用计算属性（内-外部条件）"><a href="#1-使用计算属性（内-外部条件）" class="headerlink" title="1.使用计算属性（内/外部条件）"></a>1.使用计算属性（内/外部条件）</h3><blockquote>
<p>在计算属性中先用内/外部条件处理数据，再遍历处理后的数据</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 遍历list，条件是值小于100 方案：使用计算属性activeList首先筛选出符合条件的值再直接遍历 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in activeList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">list</span>: [<span class="number">78</span>, <span class="number">90</span>, <span class="number">20</span>, <span class="number">45</span>, <span class="number">66</span>, <span class="number">120</span>, <span class="number">136</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">activeList</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.list.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> item &lt; <span class="number">100</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-条件放于父级元素（外部条件）"><a href="#2-条件放于父级元素（外部条件）" class="headerlink" title="2.条件放于父级元素（外部条件）"></a>2.条件放于父级元素（外部条件）</h3><blockquote>
<p>解决方案：外部条件放到遍历的父级元素上，没有父级可以使用<code>&lt;template&gt;&lt;/template&gt;</code>。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-if</span>=<span class="string">&quot;isActive&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- or --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;isActive&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello,My name is Lillian!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">isActive</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">list</span>: [<span class="number">78</span>, <span class="number">90</span>, <span class="number">20</span>, <span class="number">45</span>, <span class="number">66</span>, <span class="number">120</span>, <span class="number">136</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-遍历-template（内部条件）"><a href="#3-遍历-template（内部条件）" class="headerlink" title="3.遍历 template（内部条件）"></a>3.遍历 <code>template</code>（内部条件）</h3><blockquote>
<p>根据某内部条件，显示不同内容。注意 <code>key</code> 不能放 <code>template</code> 标签上。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;item.type===0&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span>文字+图标<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;item.type===1&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span>文字+文字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span>其他<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>vue</code> 中会优先执行 <code>v-for</code>, 当 <code>v-for</code> 把所有内容全部遍历之后 , <code>v-if</code> 再对已经遍历的元素进行删除 , 造成了加载的浪费 , 所以应该尽量在执行 <code>v-for</code> 之前优先执行 <code>v-if</code> , 可以减少加载的压力。</p>
<p>参考：<a href="https://cn.vuejs.org/v2/style-guide/#%E9%81%BF%E5%85%8D-v-if-%E5%92%8C-v-for-%E7%94%A8%E5%9C%A8%E4%B8%80%E8%B5%B7%E5%BF%85%E8%A6%81">https://cn.vuejs.org/v2/style-guide</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>VUE</category>
      </categories>
      <tags>
        <tag>v-for与v-if</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3 的新特性(一):ref()、reactive()、toRef() 和 toRefs()</title>
    <url>/2021/01/12/vue3-01/</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>vue3 更好的支持了 <code>Typescript</code>，新增了 <code>CompositionAPI</code>，而且在性能方面有很大提升</p>
<ol>
<li>打包大小减少 41%</li>
<li>初次渲染快 55%，更新快 133%</li>
<li>内存使用减少 54%</li>
</ol>
<p>这篇文章主要来学习以下 vue3 的以下新特性：<code>ref()</code>、<code>reactive()</code>、<code>toRef()</code>、<code>toRefs()</code></p>
<h5 id="版本要求"><a href="#版本要求" class="headerlink" title="版本要求"></a>版本要求</h5><p>对于 Vue3，node 版本 10+、Vue Cli v4.5+的版本可用。已经安装过<code>@vue/cli</code>需更新至最新版本</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn <span class="built_in">global</span> add @vue/cli</span><br><span class="line">#or</span><br><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure>

<h5 id="配置-Vue3-开发环境"><a href="#配置-Vue3-开发环境" class="headerlink" title="配置 Vue3 开发环境"></a>配置 Vue3 开发环境</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vue create [project-name]</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p><code>？Please pick a preset: </code><br>Manually select feature(手动选择一些特性)<br>然后，是一系列可插拔的支持，囊括各种功能，充分体现了渐进式的特点<br><code>？Check the feature needed for your project:</code><br>Choose vue version<br>Babel<br>Typescript<br>Linter/Formatter(代码格式检查工具)<br><code>？Choose a version of vue.js that you want to start the project with: </code><br>3.X(Preview)<br><code>? Use class-style component snytax?</code>（类类型的组件）<br>No<br><code>？Use Babel alongSide Typescript？</code><br>No<br><code>？Pick a linter / formatter config:</code><br>Eslint with error prevention only<br><code>? Pick additional lint features:</code><br>Lint on save<br><code>? Where do you prefer placing config for Babel,Eslint ,etc.?</code><br>In dedicated config files<br><code>? Save this as a preset for future projects?</code><br>No(根据自己的需要选择)</p>
<p>OR 使用 UI 界面：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure>

<p>进入图文界面进行选择配置</p>
<h5 id="vue2-与-vue3-的响应式实现"><a href="#vue2-与-vue3-的响应式实现" class="headerlink" title="vue2 与 vue3 的响应式实现"></a>vue2 与 vue3 的响应式实现</h5><p>我们知道，vue2 中的 data 返回的是一个响应式对象，其原理是通过 <code>Object.defineProperty()</code>实现的，但是会有一些弊端，比如它对于对象上新增的属性无能为力；对于数组则需要拦截它的原型方法来实现响应式。<br>那么，vue3 踏着五彩祥云就来了。vue3 是使用 ES6 中的新特性 Proxy 来实现响应式。先来对 <code>Proxy</code> 进行一下预热，<br><code>Proxy</code> 对象用于定义基本操作的自定义行为（如：属性查找、赋值、枚举、函数调用等）。<br><code>Proxy</code> 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。<br>更多内容可以参考 <a href="https://es6.ruanyifeng.com/#docs/proxy">ES6 Proxy</a></p>
<h5 id="ref-和-reactive"><a href="#ref-和-reactive" class="headerlink" title="ref() 和 reactive()"></a>ref() 和 reactive()</h5><blockquote>
<p><code>ref()</code> 函数接收一个基本数据类型的参数同时返回一个基于该值的响应性对象，该对象内部有且仅有一个属性 value，该对象中的值一旦被改变和访问就会被跟踪到，通过修改 <code>refData.value</code> 的值，可以触发模版的重新的渲染，显示最新的值。<code>reactive</code> 则是修改 <code>state.reactiveField</code> 的值。</p>
</blockquote>
<blockquote>
<p><code>reactive()</code> 函数接收一个复杂数据类型的数据（对象或数组）作为参数，并返回一个响应式代理对象。（响应式数据即当数据发生变化时 UI 也会自动更新）</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; temp &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; user.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; user.age &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increase&quot;</span>&gt;</span>click me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> temp = ref(<span class="number">0</span>)</span><br><span class="line">    temp.value = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> user = reactive(&#123; <span class="attr">name</span>: <span class="string">&#x27;lemon&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(temp)</span><br><span class="line">    <span class="built_in">console</span>.log(temp.value) <span class="comment">// hello</span></span><br><span class="line">    <span class="built_in">console</span>.log(user) <span class="comment">// Proxy &#123;name:&#x27;lemon&#x27;,age:20&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> increase = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      user.age++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123; temp, user, increase &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>reactive()</code> 函数可以代理一个复杂数据类型比如：对象、数组，但不能代理基本类型值，例如字符串、数字、boolean 等，这是 js 语言的限制，因此我们需要使用 <code>ref()</code> 函数来间接对基本类型值进行处理。<code>ref</code>的本质还是<code>reactive</code>系统会自动根据<code>ref()</code>函数的入参将其转换成<code>ref(x)</code>即<code>reactive(&#123;value:x&#125;)</code></p>
<blockquote>
<p>综上，<code>ref(user.name)</code> 就相当于 <code>ref(&#39;lemon&#39;)</code> 也相当于 <code>reactive(&#123;value:&#39;lemon&#39;&#125;)</code></p>
</blockquote>
<p><code>注意：</code></p>
<ol>
<li>在 vue 模板中使用 <code>ref</code> 的值不需要通过 <code>value</code> 属性获取（vue 会自动给 ref 的值加上.value）</li>
<li>在 js 中使用 <code>ref</code> 的值要通过<code>.value</code>获取</li>
</ol>
<h5 id="toRef-和-toRefs"><a href="#toRef-和-toRefs" class="headerlink" title="toRef() 和 toRefs()"></a>toRef() 和 toRefs()</h5><blockquote>
<p><code>toRef</code>是将个对象 A 中的某个属性 x 转换为响应式数据，其接收两个参数，第一个参数为对象 A，第二个参数为对象中的某个属性名 x。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; toRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">&#x27;lemon&#x27;</span>, <span class="attr">age</span>: <span class="number">3</span> &#125;</span><br><span class="line">    <span class="keyword">const</span> userRef = toRef(user, <span class="string">&#x27;age&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123; userRef &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到这里你应该会有一个疑问，<code>toRef()</code>和<code>ref()</code> 都是创建响应式数据的函数，它们之间有什么不同呢？我们来测试一下。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    响应式数值ref0：</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add0&quot;</span>&gt;</span>add &#123;&#123; state0 &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    响应式对象ref1：</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add1&quot;</span>&gt;</span>Add &#123;&#123; state1 &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    响应式对象toRef2：</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add2&quot;</span>&gt;</span>Add &#123;&#123; state2 &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, toRef &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> temp = &#123; <span class="attr">count</span>: <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">const</span> temp0 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> state0 = ref(temp0);</span><br><span class="line">    <span class="keyword">const</span> state1 = ref(temp.count);</span><br><span class="line">    <span class="keyword">const</span> state2 = toRef(temp, <span class="string">&quot;count&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> add0 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      state0.value++;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;原始值：&quot;</span>, temp0); <span class="comment">//原始值：1</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;响应式数据对象ref：&quot;</span>, state0.value); <span class="comment">//响应式数值ref：2</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> add1 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      state1.value++;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;原始值：&quot;</span>, temp); <span class="comment">//原始值：1</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;响应式数据对象ref：&quot;</span>, state1.value); <span class="comment">//响应式对象ref：2</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> add2 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      state2.value++;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;原始值：&quot;</span>, temp); <span class="comment">// 原始值：2</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;响应式数据对象toRef：&quot;</span>, state2.value); <span class="comment">//响应式对象toRef：2</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123; state0, state1, state2, add0, add1, add2 &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>综上，ref()和 refs()有以下区别：</p>
</blockquote>
<ol>
<li>参数不同：<code>ref()</code>接收一个 js 基本数据类型的参数；<code>toRef()</code>接收两个参数，第一个为对象，第二个为对象中的某个属性；</li>
<li>原理不同：<code>ref()</code>是对原数据的一个深拷贝，当其值改变时不会影响到原始值；<code>toRef()</code>是对原数据的一个引用，当值改变时会影响到原始值；</li>
<li>响应性不同：<code>ref()</code>创建的数据会触发 vue 模版更新；<code>toRef()</code>创建的响应式数据并不会触发 vue 模版更新，所以<code>toRef()</code>的本质是引用，与原始数据有关联。</li>
</ol>
<blockquote>
<p><code>toRefs()</code>接收一个对象作为参数，并遍历对象身上的所有属性，然后逐个调用<code>toRef()</code>执行。以此，将响应式对象转化为普通对象，便于在模版中可以直接使用属性。</p>
</blockquote>
<p>当我们希望对象的多个属性都变成响应式数据，并且要求响应式数据和原始数据相关联，并且更新响应式数据时不更新界面，这时候<code>toRefs()</code>就派上用场了，它用于批量设置多个响应式数据。</p>
<p>那么，到这里又有疑问了，通过上面的学习我们知道使用 reactive()创建的数据已经具有响应式了，为什么还要再 toRefs()呢？<br>往下看，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个响应式对象state</span></span><br><span class="line">    <span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">      <span class="attr">foo</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">bar</span>: <span class="number">2</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> stateAsRefs = toRefs(state) <span class="comment">// 将响应式的对象变为普通对象结构</span></span><br><span class="line">    <span class="comment">// The ref and the original property is &quot;linked&quot;</span></span><br><span class="line">    state.foo++</span><br><span class="line">    <span class="built_in">console</span>.log(stateAsRefs.foo.value) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">    stateAsRefs.foo.value++</span><br><span class="line">    <span class="built_in">console</span>.log(state.foo) <span class="comment">// 3</span></span><br><span class="line">    <span class="keyword">return</span> &#123; temp, userRefs, ...stateAsRefs, add &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于以上代码，toRefs()将响应式的对象 state 变为普通对象 stateAsRefs 后，return 时使用 ES6 的扩展运算符，在模版中可以直接使用其内部属性，且仍具有响应性（ 对响应式对象 state 使用扩展运算符后，其内部属性就失去了响应性 ）</p>
<p>官方案例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useFeatureX</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">bar</span>: <span class="number">2</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// logic operating on state</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// convert to refs when returning（返回时转为refs）</span></span><br><span class="line">  <span class="keyword">return</span> toRefs(state)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// can destructure without losing reactivity（可以解构而不失去其响应性）</span></span><br><span class="line">    <span class="keyword">const</span> &#123; foo, bar &#125; = useFeatureX()</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      foo,</span><br><span class="line">      bar</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对响应式对象进行 toRefs 后，可以对其进行解构方便 vue 模版使用，但是不会使其失去响应性。</p>
</blockquote>
<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>参考：<a href="https://es6.ruanyifeng.com/#docs/proxy">ES6</a> 、 <a href="https://v3.vuejs.org/api/refs-api.html#torefs">Vue3</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>VUE</category>
        <category>VUE3</category>
        <category>新特性</category>
      </categories>
      <tags>
        <tag>VUE</tag>
        <tag>VUE3</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3的新特性(三)：setup()、computed()和watch()</title>
    <url>/2021/01/13/vue3-02/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文主要介绍 vue3 新增 Composition API 的一些特性 setup()、computed()和 watch()，Composition API 可以把复杂组件的逻辑变得更为紧凑，使代码有更高复用性和灵活性。</p>
<h3 id="1-setup"><a href="#1-setup" class="headerlink" title="1. setup()"></a>1. setup()</h3><p><code>setup()</code>是 <code>vue3</code> 中新增特性，在组件 <code>created()</code>生命周期之前执行。<br>因为 <code>setup()</code> 是在组件 <code>created()</code>之前执行的，所以在 <code>setup()</code>内部无法获取 <code>this</code>。</p>
<p><code>setup(props,context)</code>接收两个参数：<code>props</code>,<code>context</code></p>
<h5 id="参数一：props"><a href="#参数一：props" class="headerlink" title="参数一：props"></a>参数一：props</h5><p>组件接收的 <code>props</code> 数据可以在 <code>setup()</code>函数内访问到。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="built_in">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(props.title)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>props</code> 具有响应性，不能使用 ES6 解构它，这会使其失去响应性。如果需要解构，可以使用 <code>toRefs()</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; title &#125; = toRefs(props)</span><br><span class="line"><span class="built_in">console</span>.log(title.value)</span><br></pre></td></tr></table></figure>

<p>如果 <code>title</code> 是一个可选的属性，需使用 <code>toRef()</code>,如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; toRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="function"><span class="title">setup</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">	<span class="keyword">const</span> title = toRef(props, <span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">	<span class="built_in">console</span>.log(title.value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h5 id="参数二：context："><a href="#参数二：context：" class="headerlink" title="参数二：context："></a>参数二：context：</h5><pre><code>`context` 是一个上下文对象，可以通过 context 来访问 Vue 的实力 this。
`context` 内部包括三个属性：`attrs`、`slots`、`emit`
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, &#123; attrs, slots, emit &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>context 是一个常规的 js 对象，它不具有响应性可以直接对它解构。但 <code>attrs</code> 和 <code>slots</code> 是有状态的对象，当组件本身更新时它们也会随之更新，这意味着我们应该避免解构它们。</p>
<h3 id="2-computed"><a href="#2-computed" class="headerlink" title="2. computed()"></a>2. computed()</h3><h5 id="computed-创建只读计算属性"><a href="#computed-创建只读计算属性" class="headerlink" title="computed()创建只读计算属性"></a>computed()创建只读计算属性</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> count = ref(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 创建一个只读性计算属性，依赖于count值</span></span><br><span class="line"><span class="keyword">const</span> plusOne = computed(<span class="function">() =&gt;</span> count.value + <span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(plusOne.value) <span class="comment">// 2</span></span><br><span class="line">plusOne.value++ <span class="comment">// error 该计算属性为只读属性，不可写</span></span><br></pre></td></tr></table></figure>

<h5 id="computed-创建可读写计算属性"><a href="#computed-创建可读写计算属性" class="headerlink" title="computed()创建可读写计算属性"></a>computed()创建可读写计算属性</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> count = ref(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 创建一个可读写计算属性</span></span><br><span class="line"><span class="keyword">const</span> plusOne = computed(&#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="function">() =&gt;</span> count.value + <span class="number">1</span>,</span><br><span class="line">  <span class="attr">set</span>: <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    count.value = val - <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">plusOne.value = <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(count.value) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>

<h3 id="3-watch"><a href="#3-watch" class="headerlink" title="3. watch()"></a>3. watch()</h3><h5 id="watch-监听单个数据源"><a href="#watch-监听单个数据源" class="headerlink" title="watch()监听单个数据源"></a>watch()监听单个数据源</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 监听 a getter</span></span><br><span class="line"><span class="keyword">const</span> state = reactive(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span><br><span class="line">watch(</span><br><span class="line">  <span class="function">() =&gt;</span> state.count,</span><br><span class="line">  <span class="function">(<span class="params">count, prevCount</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接监听 a ref</span></span><br><span class="line"><span class="keyword">const</span> count = ref(<span class="number">0</span>)</span><br><span class="line">watch(count, <span class="function">(<span class="params">count, prevCount</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="watch-监听多个数据源"><a href="#watch-监听多个数据源" class="headerlink" title="watch()监听多个数据源"></a>watch()监听多个数据源</h5><p>第一个参数中，要监听的数据源以数组的形式传入。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> firstName = ref(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> lastName = ref(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">watch([firstName, lastName], <span class="function">(<span class="params">newValues, prevValues</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(newValues, prevValues)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">firstName.value = <span class="string">&#x27;John&#x27;</span> <span class="comment">// logs: [&quot;John&quot;,&quot;&quot;] [&quot;&quot;, &quot;&quot;]</span></span><br><span class="line">lastName.value = <span class="string">&#x27;Smith&#x27;</span> <span class="comment">// logs: [&quot;John&quot;, &quot;Smith&quot;] [&quot;John&quot;, &quot;&quot;]</span></span><br></pre></td></tr></table></figure>

<p>另，当监听一个响应性对象时，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = reactive([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">watch(</span><br><span class="line">  <span class="function">() =&gt;</span> [...numbers],</span><br><span class="line">  <span class="function">(<span class="params">numbers, prevNumbers</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(numbers, prevNumbers)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">numbers.push(<span class="number">5</span>) <span class="comment">// logs: [1,2,3,4,5] [1,2,3,4]</span></span><br></pre></td></tr></table></figure>

<p>当监听一个复杂对象的属性或者数组时需要传入第三个参数<code>&#123;deep:true&#125;</code>，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">attributes</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">watch(</span><br><span class="line">  <span class="function">() =&gt;</span> state,</span><br><span class="line">  <span class="function">(<span class="params">state, prevState</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;not deep &#x27;</span>, state.attributes.name, prevState.attributes.name)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">watch(</span><br><span class="line">  <span class="function">() =&gt;</span> state,</span><br><span class="line">  <span class="function">(<span class="params">state, prevState</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;deep &#x27;</span>, state.attributes.name, prevState.attributes.name)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">deep</span>: <span class="literal">true</span> &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">state.attributes.name = <span class="string">&#x27;Alex&#x27;</span> <span class="comment">// Logs: &quot;deep &quot; &quot;Alex&quot; &quot;Alex&quot;</span></span><br></pre></td></tr></table></figure>

<p>监听一个响应式对象或者数组时总是返回当前数据变化前后的引用，为了真正的监听复杂对象或数组，需要进行一次深拷贝。<br>官方推荐方案：<a href="!https://lodash.com/docs/4.17.15#cloneDeep">lodash.cloneDeep</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"><span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">attributes</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;lemon&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">watch(</span><br><span class="line">  <span class="function">() =&gt;</span> _.cloneDeep(state),</span><br><span class="line">  <span class="function">(<span class="params">state, prevState</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(state.attributes.name, prevState.attributes.name)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">state.attributes.name = <span class="string">&#x27;Alex&#x27;</span> <span class="comment">// Logs: &quot;Alex&quot; &quot;lemon&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>更多详细用法请参考<a href="!https://v3.vuejs.org/guide/reactivity-computed-watchers.html#watching-reactive-objects">Composition API——watch</a></p>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>VUE</category>
        <category>VUE3</category>
        <category>新特性</category>
      </categories>
      <tags>
        <tag>VUE</tag>
        <tag>VUE3</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3的新特性(二)：生命周期</title>
    <url>/2021/01/13/vue3-lifecycle/</url>
    <content><![CDATA[<h3 id="生命周期钩子函数"><a href="#生命周期钩子函数" class="headerlink" title="生命周期钩子函数"></a>生命周期钩子函数</h3><p>vue3 更新了生命周期钩子函数。<br>可以直接通过 import 对应的函数（例如：onMounted）来注册生命周期钩子函数。</p>
<p>Options API -&gt; Hook inside <code>setup</code></p>
<ol>
<li><del>beforeCreate</del> -&gt; use setup()</li>
<li><del>created</del> -&gt; use setup()</li>
<li>beforeMount -&gt; onBeforeMount</li>
<li>mounted -&gt; onMounted</li>
<li>beforeUpdate -&gt; onBeforeUpdate</li>
<li>updated -&gt; onUpdated</li>
<li>beforeUnmount -&gt; onBeforeUnmount</li>
<li>unmounted -&gt; onUnmounted</li>
<li>errorCaptured -&gt; onErrorCaptured</li>
<li>renderTracked -&gt; onRenderTracked（调试用）</li>
<li>renderTriggered -&gt; onRenderTriggered（调试用）</li>
</ol>
<p>因为 setup 是在 beforeCreated 和 created 几乎是同时进行的，所以可以将在这两个生命周期里的代码写在 setup 里面。</p>
<span id="more"></span>
<!-- ![life](circle.png) -->
<img width="600px" style="display:block;margin:20px auto;" src="/2021/01/13/vue3-lifecycle/circle.png">

<p>使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted, onUpdated, onUnmounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> MyComponent = &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;mounted!&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    onUpdated(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;updated!&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    onUnmounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;unmounted!&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://v3.vuejs.org/guide/composition-api-lifecycle-hooks.html">更多内容参考 vue3</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>VUE</category>
        <category>VUE3</category>
        <category>新特性</category>
      </categories>
      <tags>
        <tag>VUE</tag>
        <tag>VUE3</tag>
      </tags>
  </entry>
  <entry>
    <title>(译)D3-force</title>
    <url>/2019/11/28/d3-force/</url>
    <content><![CDATA[<blockquote>
<p>原文: <a href="https://github.com/d3/d3/blob/master/API.md#forces-d3-force?_blank">https://github.com/d3/d3/blob/master/API.md#forces-d3-force</a></p>
</blockquote>
<h5 id="d3-forceSimulation-nodes"><a href="#d3-forceSimulation-nodes" class="headerlink" title="d3.forceSimulation( [nodes] )"></a>d3.forceSimulation( [nodes] )</h5><p>使用指定的节点数据和无强度力创建一个新的模拟。若未指定 nodes，默认为空数组。该模拟是自启动的；在该模拟运行时使用 <a href="https://github.com/d3/d3-force/blob/v1.2.1/README.md#simulation_on?_blank">simulation.on</a>  监听每个瞬间（呼吸）事件。如果你想要手动运行模拟，调用 <a href="https://github.com/d3/d3-force/blob/v1.2.1/README.md#simulation_stop?_blank">simulation.stop</a>, 然后需要调用  <a href="https://github.com/d3/d3-force/blob/v1.2.1/README.md#simulation_tick?_blank">simulation.tick</a> .</p>
<h5 id="simulation-nodes（-nodes-）"><a href="#simulation-nodes（-nodes-）" class="headerlink" title="simulation.nodes（[nodes]）"></a>simulation.nodes（[nodes]）</h5><p>每个 node 必须是一个对象模型，下面几个属性将会被仿真系统添加：<br>index-节点在 nodes 数组中的索引</p>
<span id="more"></span>

<ul>
<li>x-节点当前的 x 坐标</li>
<li>y-节点当前的 y-坐标</li>
<li>vx-节点当前的 x 方向速度</li>
<li>vy-节点当前的 y 方向速度</li>
</ul>
<p>固定给定节点的位置，你需要两个特定的额外的属性：</p>
<ul>
<li>fx - 节点的固定 x-位置</li>
<li>fy - 节点的固定 y-位置</li>
</ul>
<h5 id="force-）"><a href="#force-）" class="headerlink" title="force(）"></a>force(）</h5><p>force()是一个用以修改节点位置和速度的函数；在这种情况下，force  可以用来模拟电荷或重力之类的经典物理力学，也可以用来解决几何约束，例如将节点保持在边界框内或者保持节点之间的相对距离。</p>
<h5 id="link-froce-弹簧模型"><a href="#link-froce-弹簧模型" class="headerlink" title="link froce(弹簧模型)"></a>link froce(弹簧模型)</h5><p>可以根据 link distance 将有关联的两个节点拉近或者推远。力的强度与被链接两个节点的距离成比例，类似弹簧力。</p>
<h5 id="d3-forceManyBody"><a href="#d3-forceManyBody" class="headerlink" title="d3.forceManyBody()"></a>d3.forceManyBody()</h5><p>创建一个使用默认参数的电荷力模型。<br>manyBody.strength([strength]) 如果指定了  strength  则将强度访问器设置为指定的数值或者方法，重新评估每个节点的强度访问器并返回此电荷力。若强度为正值则表示节点之间相互吸引，负值表示节点之间相互排斥。</p>
<h5 id="simulation-alphaTarget-target"><a href="#simulation-alphaTarget-target" class="headerlink" title="simulation.alphaTarget([target])"></a>simulation.alphaTarget([target])</h5><p>如果指定了  target  则将当前的目标  alpha  设置为指定的值，需要在 [0, 1] 之间。如果没有指定  target  则返回当前默认的目标  alpha  值, 默认为 0.</p>
<h5 id="simulation-force-name-force"><a href="#simulation-force-name-force" class="headerlink" title="simulation.force(name[, force])"></a>simulation.force(name[, force])</h5><p>如果指定了  force  则表示为仿真添加指定  name  的  force(力学模型)  并返回仿真。如果没有指定  force  则返回当前仿真的对应  name  的力模型，如果没有对应的  name  则返回  undefined. (默认情况下仿真没有任何力学模型，需要手动添加).</p>
<h5 id="enter"><a href="#enter" class="headerlink" title="enter( )"></a>enter( )</h5><p>操作的意义在于通过此函数返回一个集合，这个集合里面包含的就是没有被可视化的数据；</p>
<h5 id="simulation-on-typenames-listener"><a href="#simulation-on-typenames-listener" class="headerlink" title="simulation.on(typenames, [listener])"></a>simulation.on(typenames, [listener])</h5><hr>
<h3 id="Forces"><a href="#Forces" class="headerlink" title="Forces"></a>Forces</h3><p>forces 是一个简单的改变节点位置和速度的函数；在这个模拟环境中，一个 forces 能施加一个典型的物理力，比如电荷力或重力，或者它可以解决一个几何约束， 例如将节点保持在边界框内或将链接节点保持在固定距离之外。<br>举个例子，一个简单的朝着原点（0，0）移动节点的定位力可能实现为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">force</span>(<span class="params">alpha</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, n = nodes.length, node, k = alpha * <span class="number">0.1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    node = nodes[i]</span><br><span class="line">    node.vx -= node.x * k</span><br><span class="line">    node.vy -= node.y * k</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>力模拟通常读取节点当前的位置坐标，然后增加/减去这个节点的速度&lt;vx, vy&gt;,<br>然而，力模拟也可以’偷看‘预期的节点下一个位置&lt;x+vx, y+vy&gt;;这对于通过 通过迭代松弛解决几何约束力是很有必要的。力模拟也可以改变位置方向，这有时可以避免增加模拟的能量，比如在视口模拟重入的时候。</p>
<p>模拟通常要组合多个力，这个模块提供几个供您享用：</p>
<ol>
<li>Centering 定心力</li>
<li>Collision 碰撞力</li>
<li>Links 链接力</li>
<li>Many-body 多体力（电荷）</li>
<li>Positioning 定位力</li>
</ol>
<h5 id="Centering-定心力"><a href="#Centering-定心力" class="headerlink" title="Centering 定心力"></a>Centering 定心力</h5><p>定心力一致的调动节点以至于所有节点(如果多有节点的质量相等则为质心)都是在给定的位置&lt;x,y&gt;。<br>每一个施加了这个力的节点的位置会被改变；但是它的速度不变，这样做通常会导致节点超出目标中心并且围着这个中心震荡。这个力帮助节点保持在视口的中心，不像定位力，会扭曲它们的相对位置。</p>
<p><strong>1. d3.forceCenter([x, y])</strong></p>
<p>使用指定的 x 和 y 坐标创建新的定心力。如果 x 和 y 是未指定,默认&lt;0, 0&gt;</p>
<p><strong>2. center.x([x])</strong></p>
<p>如果指定了 x，则将定心位置的 x 坐标设置为指定的数值并返回此力。如果没有指定 x，则返回当前 x 坐标，该坐标默认为 0。</p>
<p><strong>3. center.y([y])</strong></p>
<p>如果指定了 y，则将定心位置的 y 坐标设置为指定的数值并返回此力。如果没有指定 y，则返回当前 y 坐标，默认为 0。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> simulation = d3</span><br><span class="line">  .forceSimulation(nodes)</span><br><span class="line">  .force(<span class="string">&#x27;charge&#x27;</span>, d3.forceManyBody())</span><br><span class="line">  .force(<span class="string">&#x27;link&#x27;</span>, d3.forceLink(links))</span><br><span class="line">  .force(<span class="string">&#x27;center&#x27;</span>, d3.forceCenter().x().y())</span><br></pre></td></tr></table></figure>

<h5 id="Collision-碰撞力"><a href="#Collision-碰撞力" class="headerlink" title="Collision 碰撞力"></a>Collision 碰撞力</h5><p>碰撞力将节点视为具有给定半径的圆，而不是点，并且阻止节点重叠。通常情况下，两个节点 a 和 b 是分开的所以 a 和 b 之间的距离至少是两个节点的半径之和。为了减少抖动，这是一个默认的软约束，具有可配置的强度和迭代次数。</p>
<p><strong>1. d3.forceCollide([radius])</strong></p>
<p>以一个特定的半径创建一个新的圆形碰撞力。如果这个半径没有设置，所有的节点都默认为常数 1。</p>
<p><strong>2. collide.radius([radius])</strong></p>
<p>如果给定了半径，将半径访问器设为一个特定的数字或者函数，重新评估每一个节点的半径访问器，并且返回这个模拟。如果没有给定半径，返回当前的半径访问器，默认如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">radius</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个半径访问器会被这个模拟中的每一个节点调用，传递节点及其从零开始的索引。然后，结果数被存储在内部，这样每个节点的半径只在初始化力或使用新的半径调用此方法时重新计算，而不是在力的每个应用程序上。</p>
<p><strong>3. collide.strength([strength])</strong></p>
<p>如果指定了强度，设置这个力强度为[0, 1]之间的数字，并返回这个模拟。如果未指定强度，返回当前的强度，默认是 0.7。</p>
<p>通过迭代松弛来解决重叠节点。对于每个节点来说，在下个确定的呼吸事件决定的预计（使用预期的位置&lt;x+vx, y+vy&gt;）将会重叠它的其他节点，z 这个节点的速度会改变，推着这个节点超出另一个将会重叠的节点。 速度的变化被力的强度减弱，这样同时重叠的分辨率可以混合在一起来找到一个稳定的解决方案。</p>
<p><strong>4. collide.iterations([iterations])</strong></p>
<p>如果指定了迭代次数，给每一个应用设置迭代次数的值为一个特定的数字并且返回这个模拟。如果未指定迭代次数，返回当前的迭代次数，默认值为 1。增加迭代次数大大增加了约束的钢度并且避免节点的部分重合，但是也增加了计算力的运行时成本。</p>
<h5 id="Links-链接力"><a href="#Links-链接力" class="headerlink" title="Links 链接力"></a>Links 链接力</h5><p>根据想要的链接距离，链接力将链接在一起的节点推到一起或分开。这个力的强度与链接节点和目标节点的距离差成比例，类似于弹簧力。</p>
<p><strong>1. d3.forceLink([links])</strong></p>
<p>创建一个新的链接力，传一个特定的 links 和默认参数。如果 links 未指定，它将默认是一个空数组。</p>
<p><strong>2. link.links([links])</strong></p>
<p>如果 links 未指定，设置与此力关联的链接数组，重新计算每一个链接参数的距离和强度，并返回这个模拟。如果 links 未指定，返回默认值是空数组的当前的链接数组。</p>
<p>每个链接是一个拥有如下属性的对象：</p>
<ul>
<li>source - 这个链接的源头节点</li>
<li>target - 这个链接的目标节点</li>
<li>index -  将从零开始的索引转换成链接，通过这种方法分配</li>
</ul>
<p>为了方便，一个链接的源头和目标接节点的属性可以用除对象引用外的数值或字符串字符初始化；看 link.id。当这个链接力被初始化（或当节点或链接改变的时候重新初始化），任意 link.source 或 link.target 的那个非对象属性将会被对应给定目标标识符的对象引用替换。</p>
<p>如果指定的链接数组被改变，例如当链接增加或从模拟中删除的时候，必须用新的数组重新调用这个方法，以通知更改的力度。这个力不会去创建特定数组的防御副本。</p>
<p><strong>3. link.id([id])</strong></p>
<p>如果指定了 id，以特定的函数设置这个节点的 id 访问器并返回这个模拟。如果未指定，然会当前的节点 id 访问器，默认数值类型的节点索引：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">id</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> d.index</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>默认 id 访问器允许每一个链接的源或者目标的值指定为节点数组从零开始的索引。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nodes = [&#123; <span class="attr">id</span>: <span class="string">&#x27;Alice&#x27;</span> &#125;, &#123; <span class="attr">id</span>: <span class="string">&#x27;Bob&#x27;</span> &#125;, &#123; <span class="attr">id</span>: <span class="string">&#x27;Carol&#x27;</span> &#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> links = [</span><br><span class="line">  &#123; <span class="attr">source</span>: <span class="number">0</span>, <span class="attr">target</span>: <span class="number">1</span> &#125;, <span class="comment">// Alice → Bob</span></span><br><span class="line">  &#123; <span class="attr">source</span>: <span class="number">1</span>, <span class="attr">target</span>: <span class="number">2</span> &#125; <span class="comment">// Bob → Carol</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>现在考虑一个不同的 id 访问器，它返回一个字符串：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">id</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> d.id</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有了这个访问器，你可以使用命名的源和目标：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nodes = [&#123; <span class="attr">id</span>: <span class="string">&#x27;Alice&#x27;</span> &#125;, &#123; <span class="attr">id</span>: <span class="string">&#x27;Bob&#x27;</span> &#125;, &#123; <span class="attr">id</span>: <span class="string">&#x27;Carol&#x27;</span> &#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> links = [</span><br><span class="line">  &#123; <span class="attr">source</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">target</span>: <span class="string">&#x27;Bob&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">source</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="attr">target</span>: <span class="string">&#x27;Carol&#x27;</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>当用一个 JSON 数据展现图谱/图形时，这是一个极其有用的例子。参考<a href="https://bl.ocks.org/mbostock/f584aa36df54c451c94a9d0798caed35">这个例子</a>。<br>当这个模拟初始化的时候，id 访问器被每一个节点调用，同时当节点或者链接改变的时候，传递节点及其从零开始的索引。</p>
<p><strong>4. link.distance([distance])</strong></p>
<p>如果指定了距离，将距离访问器设置未特定的数字或函数，重新计算每个链接的距离访问器，并且返回这个模拟。如果未指定距离，返回当前的距离访问器，默认如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">distance</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个距离访问器被每个链接调用，传递链接及其从零开始的索引。这个数值的结果将会被存储在内部，当这个模拟初始化或者用一个新的距离调用这个方法的时候会重新计算每一个链接之间的距离，而不是这个模拟的每个应用程序上。</p>
<p><strong>5. link.strength([strength])</strong></p>
<p>如果指定了强度，将强度访问器者设置为特定的数字或这个函数，重新计算每个链接的强度访问器，并返回这个强度。如果未指定，返回当前的强度访问器，默认如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strength</span>(<span class="params">link</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span> / <span class="built_in">Math</span>.min(count(link.source), count(link.target))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中 count(node)是一个函数，它返回给定节点作为源或目标的链接数。之所以选择此默认值，是因为它会自动降低连接到紧密连接节点的链接的强度，从而提高稳定性。</p>
<p>为每个链接调用强度访问器，传递链接及其从零开始的索引。然后，结果数被存储在内部，这样，只有在初始化 force 或使用新强度调用此方法时，才会重新计算每个链接的强度，而不是在 force 的每个应用程序上。</p>
<p><strong>6. link.iterations([iterations])</strong></p>
<p>如果指定了迭代，则将每个应用程序的迭代次数设置为指定的次数并返回该强制。如果没有指定迭代，则返回默认为 1 的当前迭代计数。迭代次数的增加极大地增加了约束的刚度，对于复杂的结构如网格是有用的，但也增加了评估力的运行时成本。</p>
<h5 id="Many-Body-多体力"><a href="#Many-Body-多体力" class="headerlink" title="Many-Body 多体力"></a>Many-Body 多体力</h5><p>多体力在多有节点之间相互作用。如果强度时正数，它相当于引力（吸引），如果强度是负数，它相当于静电电荷斥力。该实现使用四叉树和 Barnes-Hut 近似来极大地提高性能;  他的精确性可以用 theta 参数定制。</p>
<p>不像链接力，它仅仅受两个链接的节点影响，这个电荷斥力是全局的；每个节点会影响每个其他的节点，即使他们不是相互连接的子图。</p>
<p><strong>1. d3.forceManyBody()</strong></p>
<p>用默认的参数创建一个新的多体力。</p>
<p><strong>2. manyBody.strength([strength])</strong></p>
<p>如果指定强度，将强度访问器设为一个特定的数字或函数，重新计算每个节点的强度访问器，并返回这个强度。正数使节点相互吸引，负数使节点相互排斥。如果未指定，返回当前的强度访问器，默认为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strength</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在模拟中，每个节点都会调用强度访问器传递节点及从零开始的索引。这个返回的结果会保存在本地，所以当这个模拟初始化或用一个新的强度调用这个方法的时候，每一个节点的强度重新计算，而不是在模拟的每个应用程序上。</p>
<p><strong>3. manyBody.theta([theta])</strong></p>
<p>如果指定 theta，将 Barnes–Hut 近似准则设置为特定的数值，并发返回这个模拟。如果未指定，返回默认值：0.9。</p>
<p>为了加速计算，模拟执行 在每个应用程序中使用 O(n log n)得出的 Barnes-Hut 近似值，n 是节点数量。对于每个应用程序，使用四叉树存储当前节点的位置。对于每个节点。结合所有给定计算出的所有其他节点的力。对于一个很远的节点集群，电荷力可以近似于用一个独立的、大的节点。这个 theta 的参数值决定了这个近似值的精确度： 如果四叉树单元的宽度 w / l 与从节点到单元质心的距离 l 之比小于 theta，则给定单元中的所有节点都视为单个节点，而不是单独处理。</p>
<p><strong>4. manyBody.distanceMin([distance])</strong></p>
<p>如果指定距离，将它设置为节点之间的最小距离。如果未指定，返回默认值 1. 最小的距离建立了相邻节点的力强度的上线，从而避免不稳定。特别是避免了两个节点完全重合时无限强的力。在这种情况下，力的方向时随机的。</p>
<p><strong>5. manyBody.distanceMax([distance])</strong></p>
<p>如果指定距离，将它设置为两个节点间的最大距离。如果未指定，返回默认值无穷大。指定一个有限大的最大距离提高了性能并且生成更加本地化的布局。</p>
<h5 id="Positioning-定位力"><a href="#Positioning-定位力" class="headerlink" title="Positioning 定位力"></a>Positioning 定位力</h5><p>x 和 y 的定位力以可配置的强度将节点推向给定的尺寸预期的位置。径向力是相似的，除了它时将节点推向给定圆的最近点。这个力的强度是跟节点的位置和目标位置的一维距离成正例。虽然这些力可以作用于单个节点，但是它主要作用于所有节点的全局力。</p>
<p><strong>1. d3.forceX([x])</strong></p>
<p>沿着 x 轴给定位置 x 创建一个新的定位力。如果 x 未指定，默认未 0.</p>
<p><strong>2. x.strength([strength])</strong></p>
<p>如果指定了 strength，将它设置为特定的数值或者函数，重新计算每个节点的强度访问器。并且返回这个强度。强度决定了节点的 x 方向速度增加多少。例如，强度的值是 0.1 就表示节点应该从当前的 x 位置到目标位置要移动 1/10 的距离。较高的值可以更快的将节点移动到目标位置，这通常是以其他力或约束为代价的。超出 0~1 的值是不推荐的。<br>如果强度未指定，返回默认值：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strength</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0.1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>模拟中的每个节点都会调用这个强度访问器，传递节点和从零开始的索引。返回的结果会存储在本地，这样，只有在初始化 force 或使用新 x 调用此方法时，才会重新计算每个节点的目标 x 坐标，而不是在 force 的每个应用程序上。</p>
<p><strong>3. x.x([x])</strong></p>
<p>如果指定了 x，将其设置为特定数值址或函数，重新计算每个节点的 x 访问器，并返回这个模拟。如果未指定，返回默认值：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个模拟中的每个节点都会调用这个 x 访问器，传递节点和从零开始的索引。结果会存储在本地，这样只有模拟初始化或者用新的 x 调用这个方法的时候会重新计算每个节点的目标 x 坐标。</p>
<p><strong>4. d3.forceY([y])</strong></p>
<p><strong>5. y.strength([strength])</strong></p>
<p><strong>6. y.y([y])</strong></p>
<p><strong>7. d3.forceRadial(radius[, x][, y])</strong></p>
<p>创建一个新的定位力沿着特定圆心和半径的圆。如果 x 和 y 未指定，默认值&lt;0,0&gt;。</p>
<p><strong>8. radial.strength([strength])</strong></p>
<p>如果指定强度，将其设置未特定的数值或函数，重新计算每个节点的强度计算器，并返回这个模拟。强度决定了节点的 x 和 y 轴方向的速度增加多少。例如：对于每个应用来说，值为 0.1 表示节点从当前位置到这个圆的最近的点要移动 1/10 的距离。比较高的值表示节点到目标位置的速度更快，通常是以其他力或约束为代价的。超出 0~1 的值是不推荐的。<br>如果未指定，返回默认值：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strength</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0.1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为模拟中的每个节点调用强度访问器，传递节点及其从零开始的索引。然后，结果数被存储在内部，这样，只有在初始化 force 或使用新强度调用此方法时，才会重新计算每个节点的强度，而不是在 force 的每个应用程序上。</p>
<p><strong>9. radial.radius([radius])</strong></p>
<p>如果指定了半径，将其设置为特定的值或函数，重新计算每个节点的半径访问器，并返回这个模拟。如果未指定返回当前的半径访问器。<br>为模拟中的每个节点调用 radius 访问器，传递节点及其从零开始的索引。然后，结果数被存储在内部，以便仅在初始化 force 或使用新半径调用此方法时重新计算每个节点的目标半径，而不是在 force 的每个应用程序上。</p>
<p><strong>10. radial.x([x])</strong></p>
<p>如果指定了 x，则将圆心的 x 坐标设置为指定的数值并返回此力。如果没有指定 x，则返回中心的当前 x 坐标，默认为 0。</p>
<p><strong>11. radial.y([y])</strong></p>
<p>如果指定了 y，则将圆心的 y 坐标设置为指定的数值并返回此力。如果没有指定 y，则返回中心的当前 y 坐标，默认为 0。</p>
<p>注：本文是笔者阅读文档自译版，如跟官方文档有出入谨以官方为准。</p>
<p>本文有不到之处欢迎交流指正，感谢~</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>D3</category>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>D3</tag>
        <tag>可视化</tag>
      </tags>
  </entry>
</search>
